
atalay_haberlesme_v0.0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4f8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800a6f8  0800a6f8  0001a6f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abcc  0800abcc  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800abcc  0800abcc  0001abcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abd4  0800abd4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abd4  0800abd4  0001abd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abd8  0800abd8  0001abd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800abdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009bc  200001f0  0800adcc  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bac  0800adcc  00020bac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107a7  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025b4  00000000  00000000  000309c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00032f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  00033af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b1f  00000000  00000000  00034588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9d4  00000000  00000000  0005d0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f542e  00000000  00000000  0006aa7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015fea9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040ec  00000000  00000000  0015fefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f0 	.word	0x200001f0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a6e0 	.word	0x0800a6e0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f4 	.word	0x200001f4
 800023c:	0800a6e0 	.word	0x0800a6e0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009d4:	f3bf 8f4f 	dsb	sy
}
 80009d8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <__NVIC_SystemReset+0x24>)
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80009e2:	4904      	ldr	r1, [pc, #16]	; (80009f4 <__NVIC_SystemReset+0x24>)
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_SystemReset+0x28>)
 80009e6:	4313      	orrs	r3, r2
 80009e8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ea:	f3bf 8f4f 	dsb	sy
}
 80009ee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <__NVIC_SystemReset+0x20>
 80009f4:	e000ed00 	.word	0xe000ed00
 80009f8:	05fa0004 	.word	0x05fa0004

080009fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a00:	f001 f925 	bl	8001c4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a04:	f000 f8f6 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a08:	f000 fb08 	bl	800101c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a0c:	f000 fac4 	bl	8000f98 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a10:	f000 fa32 	bl	8000e78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a14:	f000 fa60 	bl	8000ed8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a18:	f000 fa8e 	bl	8000f38 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8000a1c:	f000 f9b8 	bl	8000d90 <MX_SPI2_Init>
  MX_SPI1_Init();
 8000a20:	f000 f978 	bl	8000d14 <MX_SPI1_Init>
  MX_SPI4_Init();
 8000a24:	f000 f9ee 	bl	8000e04 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_DMA(&hspi2, ANA_Rx_Buffer, ANA_BufferSize);
 8000a28:	220d      	movs	r2, #13
 8000a2a:	495e      	ldr	r1, [pc, #376]	; (8000ba4 <main+0x1a8>)
 8000a2c:	485e      	ldr	r0, [pc, #376]	; (8000ba8 <main+0x1ac>)
 8000a2e:	f003 fa1f 	bl	8003e70 <HAL_SPI_Receive_DMA>
  HAL_SPI_Receive_DMA(&hspi4, YEDEK_Rx_Buffer, YEDEK_BufferSize);
 8000a32:	2204      	movs	r2, #4
 8000a34:	495d      	ldr	r1, [pc, #372]	; (8000bac <main+0x1b0>)
 8000a36:	485e      	ldr	r0, [pc, #376]	; (8000bb0 <main+0x1b4>)
 8000a38:	f003 fa1a 	bl	8003e70 <HAL_SPI_Receive_DMA>
  //POLL_WDMA_ZOE();
  //POLL_SL869();
  POLL_WDMA_ZOE();
 8000a3c:	f000 ffd4 	bl	80019e8 <POLL_WDMA_ZOE>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(500);
 8000a40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a44:	f001 f960 	bl	8001d08 <HAL_Delay>

	  	  ZOE();
 8000a48:	f001 f8d0 	bl	8001bec <ZOE>
//			if(zoe.rx_zoe_data[0] == 181 &&
//				zoe.rx_zoe_data[1] == 98 &&
//				zoe.rx_zoe_data[2] == 1 &&
//				zoe.rx_zoe_data[3] == 2)
//		{
	  	giden_buffer1[0]= zoe.rx_zoe_data[10];
 8000a4c:	4b59      	ldr	r3, [pc, #356]	; (8000bb4 <main+0x1b8>)
 8000a4e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8000a52:	4b59      	ldr	r3, [pc, #356]	; (8000bb8 <main+0x1bc>)
 8000a54:	701a      	strb	r2, [r3, #0]
	  	giden_buffer1[1]= zoe.rx_zoe_data[11];
 8000a56:	4b57      	ldr	r3, [pc, #348]	; (8000bb4 <main+0x1b8>)
 8000a58:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8000a5c:	4b56      	ldr	r3, [pc, #344]	; (8000bb8 <main+0x1bc>)
 8000a5e:	705a      	strb	r2, [r3, #1]
	  	giden_buffer1[2]= zoe.rx_zoe_data[12];
 8000a60:	4b54      	ldr	r3, [pc, #336]	; (8000bb4 <main+0x1b8>)
 8000a62:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8000a66:	4b54      	ldr	r3, [pc, #336]	; (8000bb8 <main+0x1bc>)
 8000a68:	709a      	strb	r2, [r3, #2]
	  	giden_buffer1[3]= zoe.rx_zoe_data[13];
 8000a6a:	4b52      	ldr	r3, [pc, #328]	; (8000bb4 <main+0x1b8>)
 8000a6c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8000a70:	4b51      	ldr	r3, [pc, #324]	; (8000bb8 <main+0x1bc>)
 8000a72:	70da      	strb	r2, [r3, #3]
	  	giden_buffer1[4]= zoe.rx_zoe_data[14];
 8000a74:	4b4f      	ldr	r3, [pc, #316]	; (8000bb4 <main+0x1b8>)
 8000a76:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8000a7a:	4b4f      	ldr	r3, [pc, #316]	; (8000bb8 <main+0x1bc>)
 8000a7c:	711a      	strb	r2, [r3, #4]
	  	giden_buffer1[5]= zoe.rx_zoe_data[15];
 8000a7e:	4b4d      	ldr	r3, [pc, #308]	; (8000bb4 <main+0x1b8>)
 8000a80:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8000a84:	4b4c      	ldr	r3, [pc, #304]	; (8000bb8 <main+0x1bc>)
 8000a86:	715a      	strb	r2, [r3, #5]
	  	giden_buffer1[6]= zoe.rx_zoe_data[16];
 8000a88:	4b4a      	ldr	r3, [pc, #296]	; (8000bb4 <main+0x1b8>)
 8000a8a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8000a8e:	4b4a      	ldr	r3, [pc, #296]	; (8000bb8 <main+0x1bc>)
 8000a90:	719a      	strb	r2, [r3, #6]
	  	giden_buffer1[7]= zoe.rx_zoe_data[17];
 8000a92:	4b48      	ldr	r3, [pc, #288]	; (8000bb4 <main+0x1b8>)
 8000a94:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8000a98:	4b47      	ldr	r3, [pc, #284]	; (8000bb8 <main+0x1bc>)
 8000a9a:	71da      	strb	r2, [r3, #7]
	  	giden_buffer1[8]= zoe.rx_zoe_data[22];
 8000a9c:	4b45      	ldr	r3, [pc, #276]	; (8000bb4 <main+0x1b8>)
 8000a9e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8000aa2:	4b45      	ldr	r3, [pc, #276]	; (8000bb8 <main+0x1bc>)
 8000aa4:	721a      	strb	r2, [r3, #8]
	  	giden_buffer1[9]= zoe.rx_zoe_data[23];
 8000aa6:	4b43      	ldr	r3, [pc, #268]	; (8000bb4 <main+0x1b8>)
 8000aa8:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8000aac:	4b42      	ldr	r3, [pc, #264]	; (8000bb8 <main+0x1bc>)
 8000aae:	725a      	strb	r2, [r3, #9]
	  	giden_buffer1[10]= zoe.rx_zoe_data[24];
 8000ab0:	4b40      	ldr	r3, [pc, #256]	; (8000bb4 <main+0x1b8>)
 8000ab2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8000ab6:	4b40      	ldr	r3, [pc, #256]	; (8000bb8 <main+0x1bc>)
 8000ab8:	729a      	strb	r2, [r3, #10]
	  	giden_buffer1[11]= zoe.rx_zoe_data[25];
 8000aba:	4b3e      	ldr	r3, [pc, #248]	; (8000bb4 <main+0x1b8>)
 8000abc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8000ac0:	4b3d      	ldr	r3, [pc, #244]	; (8000bb8 <main+0x1bc>)
 8000ac2:	72da      	strb	r2, [r3, #11]
	  	giden_buffer1[12]= zoe.rx_zoe_data[18+36];
 8000ac4:	4b3b      	ldr	r3, [pc, #236]	; (8000bb4 <main+0x1b8>)
 8000ac6:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8000aca:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <main+0x1bc>)
 8000acc:	731a      	strb	r2, [r3, #12]
        giden_buffer1[13]= zoe.rx_zoe_data[19+36];
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <main+0x1b8>)
 8000ad0:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
 8000ad4:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <main+0x1bc>)
 8000ad6:	735a      	strb	r2, [r3, #13]
        giden_buffer1[14]= zoe.rx_zoe_data[20+36];
 8000ad8:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <main+0x1b8>)
 8000ada:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8000ade:	4b36      	ldr	r3, [pc, #216]	; (8000bb8 <main+0x1bc>)
 8000ae0:	739a      	strb	r2, [r3, #14]
        giden_buffer1[15]= zoe.rx_zoe_data[21+36];
 8000ae2:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <main+0x1b8>)
 8000ae4:	f893 2059 	ldrb.w	r2, [r3, #89]	; 0x59
 8000ae8:	4b33      	ldr	r3, [pc, #204]	; (8000bb8 <main+0x1bc>)
 8000aea:	73da      	strb	r2, [r3, #15]
        giden_buffer1[16]=  0x78;
 8000aec:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <main+0x1bc>)
 8000aee:	2278      	movs	r2, #120	; 0x78
 8000af0:	741a      	strb	r2, [r3, #16]

        giden_buffer1[17]= 	   ANA_Rx_Buffer[0]   ;
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <main+0x1a8>)
 8000af4:	781a      	ldrb	r2, [r3, #0]
 8000af6:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <main+0x1bc>)
 8000af8:	745a      	strb	r2, [r3, #17]
        giden_buffer1[18]=	   ANA_Rx_Buffer[1]   ;
 8000afa:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <main+0x1a8>)
 8000afc:	785a      	ldrb	r2, [r3, #1]
 8000afe:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <main+0x1bc>)
 8000b00:	749a      	strb	r2, [r3, #18]
        giden_buffer1[19]= 	   ANA_Rx_Buffer[2]   ;
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <main+0x1a8>)
 8000b04:	789a      	ldrb	r2, [r3, #2]
 8000b06:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <main+0x1bc>)
 8000b08:	74da      	strb	r2, [r3, #19]
        giden_buffer1[20]=     ANA_Rx_Buffer[3]   ;
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <main+0x1a8>)
 8000b0c:	78da      	ldrb	r2, [r3, #3]
 8000b0e:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <main+0x1bc>)
 8000b10:	751a      	strb	r2, [r3, #20]
        giden_buffer1[21]=     ANA_Rx_Buffer[4]   ;
 8000b12:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <main+0x1a8>)
 8000b14:	791a      	ldrb	r2, [r3, #4]
 8000b16:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <main+0x1bc>)
 8000b18:	755a      	strb	r2, [r3, #21]
        giden_buffer1[22]=     ANA_Rx_Buffer[5]   ;
 8000b1a:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <main+0x1a8>)
 8000b1c:	795a      	ldrb	r2, [r3, #5]
 8000b1e:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <main+0x1bc>)
 8000b20:	759a      	strb	r2, [r3, #22]
        giden_buffer1[23]=     ANA_Rx_Buffer[6]   ;
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <main+0x1a8>)
 8000b24:	799a      	ldrb	r2, [r3, #6]
 8000b26:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <main+0x1bc>)
 8000b28:	75da      	strb	r2, [r3, #23]
        giden_buffer1[24]=     ANA_Rx_Buffer[7]   ;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <main+0x1a8>)
 8000b2c:	79da      	ldrb	r2, [r3, #7]
 8000b2e:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <main+0x1bc>)
 8000b30:	761a      	strb	r2, [r3, #24]
        giden_buffer1[25]=     ANA_Rx_Buffer[8]   ;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <main+0x1a8>)
 8000b34:	7a1a      	ldrb	r2, [r3, #8]
 8000b36:	4b20      	ldr	r3, [pc, #128]	; (8000bb8 <main+0x1bc>)
 8000b38:	765a      	strb	r2, [r3, #25]
        giden_buffer1[26]=     ANA_Rx_Buffer[9]   ;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <main+0x1a8>)
 8000b3c:	7a5a      	ldrb	r2, [r3, #9]
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <main+0x1bc>)
 8000b40:	769a      	strb	r2, [r3, #26]
        giden_buffer1[27]=     ANA_Rx_Buffer[10]  ;
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <main+0x1a8>)
 8000b44:	7a9a      	ldrb	r2, [r3, #10]
 8000b46:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <main+0x1bc>)
 8000b48:	76da      	strb	r2, [r3, #27]
        giden_buffer1[28]=     ANA_Rx_Buffer[11]  ;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <main+0x1a8>)
 8000b4c:	7ada      	ldrb	r2, [r3, #11]
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <main+0x1bc>)
 8000b50:	771a      	strb	r2, [r3, #28]
        giden_buffer1[29]=     ANA_Rx_Buffer[12]  ;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <main+0x1a8>)
 8000b54:	7b1a      	ldrb	r2, [r3, #12]
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <main+0x1bc>)
 8000b58:	775a      	strb	r2, [r3, #29]
        giden_buffer1[30]=     YEDEK_Rx_Buffer[0] ;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <main+0x1b0>)
 8000b5c:	781a      	ldrb	r2, [r3, #0]
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <main+0x1bc>)
 8000b60:	779a      	strb	r2, [r3, #30]
        giden_buffer1[31]=     YEDEK_Rx_Buffer[1] ;
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <main+0x1b0>)
 8000b64:	785a      	ldrb	r2, [r3, #1]
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <main+0x1bc>)
 8000b68:	77da      	strb	r2, [r3, #31]
        giden_buffer1[32]=     YEDEK_Rx_Buffer[2] ;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <main+0x1b0>)
 8000b6c:	789a      	ldrb	r2, [r3, #2]
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <main+0x1bc>)
 8000b70:	f883 2020 	strb.w	r2, [r3, #32]
        giden_buffer1[33]=     YEDEK_Rx_Buffer[3] ;
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <main+0x1b0>)
 8000b76:	78da      	ldrb	r2, [r3, #3]
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <main+0x1bc>)
 8000b7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        giden_buffer1[34]= 0x78;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <main+0x1bc>)
 8000b80:	2278      	movs	r2, #120	; 0x78
 8000b82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
//		}

			HAL_UART_Transmit(&huart3, giden_buffer1, 35, 1000);
 8000b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8a:	2223      	movs	r2, #35	; 0x23
 8000b8c:	490a      	ldr	r1, [pc, #40]	; (8000bb8 <main+0x1bc>)
 8000b8e:	480b      	ldr	r0, [pc, #44]	; (8000bbc <main+0x1c0>)
 8000b90:	f004 f83c 	bl	8004c0c <HAL_UART_Transmit>
			//HAL_UART_Transmit(&huart3, gidenbuffer2, 18, 1000);


	  	  if(zoe.rx_zoe_data[0]==0x00)
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <main+0x1b8>)
 8000b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f47f af50 	bne.w	8000a40 <main+0x44>
	  	  {
	  		  NVIC_SystemReset();
 8000ba0:	f7ff ff16 	bl	80009d0 <__NVIC_SystemReset>
 8000ba4:	2000020c 	.word	0x2000020c
 8000ba8:	2000028c 	.word	0x2000028c
 8000bac:	2000021c 	.word	0x2000021c
 8000bb0:	20000540 	.word	0x20000540
 8000bb4:	2000068c 	.word	0x2000068c
 8000bb8:	20000374 	.word	0x20000374
 8000bbc:	200002f0 	.word	0x200002f0

08000bc0 <HAL_SPI_RxCpltCallback>:
  }
  /* USER CODE END 3 */
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	  HAL_SPI_Receive_DMA(&hspi2, ANA_Rx_Buffer, ANA_BufferSize);
 8000bc8:	220d      	movs	r2, #13
 8000bca:	4906      	ldr	r1, [pc, #24]	; (8000be4 <HAL_SPI_RxCpltCallback+0x24>)
 8000bcc:	4806      	ldr	r0, [pc, #24]	; (8000be8 <HAL_SPI_RxCpltCallback+0x28>)
 8000bce:	f003 f94f 	bl	8003e70 <HAL_SPI_Receive_DMA>
	  HAL_SPI_Receive_DMA(&hspi4, YEDEK_Rx_Buffer, YEDEK_BufferSize);
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	4905      	ldr	r1, [pc, #20]	; (8000bec <HAL_SPI_RxCpltCallback+0x2c>)
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <HAL_SPI_RxCpltCallback+0x30>)
 8000bd8:	f003 f94a 	bl	8003e70 <HAL_SPI_Receive_DMA>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000020c 	.word	0x2000020c
 8000be8:	2000028c 	.word	0x2000028c
 8000bec:	2000021c 	.word	0x2000021c
 8000bf0:	20000540 	.word	0x20000540

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0b8      	sub	sp, #224	; 0xe0
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bfe:	2234      	movs	r2, #52	; 0x34
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f005 fa0e 	bl	8006024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c18:	f107 0308 	add.w	r3, r7, #8
 8000c1c:	2290      	movs	r2, #144	; 0x90
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f005 f9ff 	bl	8006024 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c26:	f001 ff8f 	bl	8002b48 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <SystemClock_Config+0x118>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a37      	ldr	r2, [pc, #220]	; (8000d0c <SystemClock_Config+0x118>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <SystemClock_Config+0x118>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c42:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <SystemClock_Config+0x11c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c4a:	4a31      	ldr	r2, [pc, #196]	; (8000d10 <SystemClock_Config+0x11c>)
 8000c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <SystemClock_Config+0x11c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c80:	23a8      	movs	r3, #168	; 0xa8
 8000c82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c86:	2302      	movs	r3, #2
 8000c88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c8c:	2309      	movs	r3, #9
 8000c8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 ff66 	bl	8002b68 <HAL_RCC_OscConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ca2:	f000 fa5d 	bl	8001160 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca6:	230f      	movs	r3, #15
 8000ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cac:	2302      	movs	r3, #2
 8000cae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cc8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ccc:	2105      	movs	r1, #5
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 f9f8 	bl	80030c4 <HAL_RCC_ClockConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000cda:	f000 fa41 	bl	8001160 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000cde:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000ce2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f002 fbe7 	bl	80034c8 <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000d00:	f000 fa2e 	bl	8001160 <Error_Handler>
  }
}
 8000d04:	bf00      	nop
 8000d06:	37e0      	adds	r7, #224	; 0xe0
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40007000 	.word	0x40007000

08000d14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_SPI1_Init+0x74>)
 8000d1a:	4a1c      	ldr	r2, [pc, #112]	; (8000d8c <MX_SPI1_Init+0x78>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_SPI1_Init+0x74>)
 8000d20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <MX_SPI1_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_SPI1_Init+0x74>)
 8000d2e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_SPI1_Init+0x74>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <MX_SPI1_Init+0x74>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_SPI1_Init+0x74>)
 8000d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_SPI1_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_SPI1_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_SPI1_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <MX_SPI1_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_SPI1_Init+0x74>)
 8000d62:	2207      	movs	r2, #7
 8000d64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <MX_SPI1_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_SPI1_Init+0x74>)
 8000d6e:	2208      	movs	r2, #8
 8000d70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <MX_SPI1_Init+0x74>)
 8000d74:	f002 ffd0 	bl	8003d18 <HAL_SPI_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d7e:	f000 f9ef 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200005a4 	.word	0x200005a4
 8000d8c:	40013000 	.word	0x40013000

08000d90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <MX_SPI2_Init+0x6c>)
 8000d96:	4a1a      	ldr	r2, [pc, #104]	; (8000e00 <MX_SPI2_Init+0x70>)
 8000d98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_SPI2_Init+0x6c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_SPI2_Init+0x6c>)
 8000da2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_SPI2_Init+0x6c>)
 8000daa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_SPI2_Init+0x6c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_SPI2_Init+0x6c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_SPI2_Init+0x6c>)
 8000dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc2:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MX_SPI2_Init+0x6c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_SPI2_Init+0x6c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MX_SPI2_Init+0x6c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_SPI2_Init+0x6c>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <MX_SPI2_Init+0x6c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_SPI2_Init+0x6c>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MX_SPI2_Init+0x6c>)
 8000dea:	f002 ff95 	bl	8003d18 <HAL_SPI_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_SPI2_Init+0x68>
  {
    Error_Handler();
 8000df4:	f000 f9b4 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	2000028c 	.word	0x2000028c
 8000e00:	40003800 	.word	0x40003800

08000e04 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_SPI4_Init+0x6c>)
 8000e0a:	4a1a      	ldr	r2, [pc, #104]	; (8000e74 <MX_SPI4_Init+0x70>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_SPI4_Init+0x6c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <MX_SPI4_Init+0x6c>)
 8000e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e1a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <MX_SPI4_Init+0x6c>)
 8000e1e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e22:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_SPI4_Init+0x6c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_SPI4_Init+0x6c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_SPI4_Init+0x6c>)
 8000e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e36:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <MX_SPI4_Init+0x6c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_SPI4_Init+0x6c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <MX_SPI4_Init+0x6c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_SPI4_Init+0x6c>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <MX_SPI4_Init+0x6c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_SPI4_Init+0x6c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <MX_SPI4_Init+0x6c>)
 8000e5e:	f002 ff5b 	bl	8003d18 <HAL_SPI_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_SPI4_Init+0x68>
  {
    Error_Handler();
 8000e68:	f000 f97a 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000540 	.word	0x20000540
 8000e74:	40013400 	.word	0x40013400

08000e78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e7e:	4a15      	ldr	r2, [pc, #84]	; (8000ed4 <MX_USART1_UART_Init+0x5c>)
 8000e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_USART1_UART_Init+0x58>)
 8000ebc:	f003 fe58 	bl	8004b70 <HAL_UART_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ec6:	f000 f94b 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200004bc 	.word	0x200004bc
 8000ed4:	40011000 	.word	0x40011000

08000ed8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ede:	4a15      	ldr	r2, [pc, #84]	; (8000f34 <MX_USART2_UART_Init+0x5c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ee4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_USART2_UART_Init+0x58>)
 8000f1c:	f003 fe28 	bl	8004b70 <HAL_UART_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f26:	f000 f91b 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000608 	.word	0x20000608
 8000f34:	40004400 	.word	0x40004400

08000f38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <MX_USART3_UART_Init+0x5c>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	; (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f7c:	f003 fdf8 	bl	8004b70 <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f86:	f000 f8eb 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200002f0 	.word	0x200002f0
 8000f94:	40004800 	.word	0x40004800

08000f98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <MX_DMA_Init+0x80>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <MX_DMA_Init+0x80>)
 8000fa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MX_DMA_Init+0x80>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <MX_DMA_Init+0x80>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a17      	ldr	r2, [pc, #92]	; (8001018 <MX_DMA_Init+0x80>)
 8000fbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_DMA_Init+0x80>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	200c      	movs	r0, #12
 8000fd4:	f000 ff97 	bl	8001f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fd8:	200c      	movs	r0, #12
 8000fda:	f000 ffb0 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2010      	movs	r0, #16
 8000fe4:	f000 ff8f 	bl	8001f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fe8:	2010      	movs	r0, #16
 8000fea:	f000 ffa8 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2038      	movs	r0, #56	; 0x38
 8000ff4:	f000 ff87 	bl	8001f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ff8:	2038      	movs	r0, #56	; 0x38
 8000ffa:	f000 ffa0 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	203a      	movs	r0, #58	; 0x3a
 8001004:	f000 ff7f 	bl	8001f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001008:	203a      	movs	r0, #58	; 0x3a
 800100a:	f000 ff98 	bl	8001f3e <HAL_NVIC_EnableIRQ>

}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001032:	4b46      	ldr	r3, [pc, #280]	; (800114c <MX_GPIO_Init+0x130>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a45      	ldr	r2, [pc, #276]	; (800114c <MX_GPIO_Init+0x130>)
 8001038:	f043 0310 	orr.w	r3, r3, #16
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b43      	ldr	r3, [pc, #268]	; (800114c <MX_GPIO_Init+0x130>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	4b40      	ldr	r3, [pc, #256]	; (800114c <MX_GPIO_Init+0x130>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a3f      	ldr	r2, [pc, #252]	; (800114c <MX_GPIO_Init+0x130>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b3d      	ldr	r3, [pc, #244]	; (800114c <MX_GPIO_Init+0x130>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	4b3a      	ldr	r3, [pc, #232]	; (800114c <MX_GPIO_Init+0x130>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a39      	ldr	r2, [pc, #228]	; (800114c <MX_GPIO_Init+0x130>)
 8001068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b37      	ldr	r3, [pc, #220]	; (800114c <MX_GPIO_Init+0x130>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b34      	ldr	r3, [pc, #208]	; (800114c <MX_GPIO_Init+0x130>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a33      	ldr	r2, [pc, #204]	; (800114c <MX_GPIO_Init+0x130>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b31      	ldr	r3, [pc, #196]	; (800114c <MX_GPIO_Init+0x130>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b2e      	ldr	r3, [pc, #184]	; (800114c <MX_GPIO_Init+0x130>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a2d      	ldr	r2, [pc, #180]	; (800114c <MX_GPIO_Init+0x130>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b2b      	ldr	r3, [pc, #172]	; (800114c <MX_GPIO_Init+0x130>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010aa:	4b28      	ldr	r3, [pc, #160]	; (800114c <MX_GPIO_Init+0x130>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a27      	ldr	r2, [pc, #156]	; (800114c <MX_GPIO_Init+0x130>)
 80010b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b25      	ldr	r3, [pc, #148]	; (800114c <MX_GPIO_Init+0x130>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80010c8:	4821      	ldr	r0, [pc, #132]	; (8001150 <MX_GPIO_Init+0x134>)
 80010ca:	f001 fd09 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2140      	movs	r1, #64	; 0x40
 80010d2:	4820      	ldr	r0, [pc, #128]	; (8001154 <MX_GPIO_Init+0x138>)
 80010d4:	f001 fd04 	bl	8002ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010de:	4b1e      	ldr	r3, [pc, #120]	; (8001158 <MX_GPIO_Init+0x13c>)
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	481b      	ldr	r0, [pc, #108]	; (800115c <MX_GPIO_Init+0x140>)
 80010ee:	f001 fb4b 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010f2:	f244 0381 	movw	r3, #16513	; 0x4081
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4811      	ldr	r0, [pc, #68]	; (8001150 <MX_GPIO_Init+0x134>)
 800110c:	f001 fb3c 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001110:	2340      	movs	r3, #64	; 0x40
 8001112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 031c 	add.w	r3, r7, #28
 8001124:	4619      	mov	r1, r3
 8001126:	480b      	ldr	r0, [pc, #44]	; (8001154 <MX_GPIO_Init+0x138>)
 8001128:	f001 fb2e 	bl	8002788 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <MX_GPIO_Init+0x138>)
 8001140:	f001 fb22 	bl	8002788 <HAL_GPIO_Init>

}
 8001144:	bf00      	nop
 8001146:	3730      	adds	r7, #48	; 0x30
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40020400 	.word	0x40020400
 8001154:	40021800 	.word	0x40021800
 8001158:	10110000 	.word	0x10110000
 800115c:	40020800 	.word	0x40020800

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <GPS_CallBack>:


}
//##################################################################################################################
void	GPS_CallBack(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	GPS.LastTime=HAL_GetTick();
 8001170:	f000 fdbe 	bl	8001cf0 <HAL_GetTick>
 8001174:	4603      	mov	r3, r0
 8001176:	4a11      	ldr	r2, [pc, #68]	; (80011bc <GPS_CallBack+0x50>)
 8001178:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
	if(GPS.rxIndex < sizeof(GPS.rxBuffer)-2)
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <GPS_CallBack+0x50>)
 800117e:	f8b3 3438 	ldrh.w	r3, [r3, #1080]	; 0x438
 8001182:	f240 4235 	movw	r2, #1077	; 0x435
 8001186:	4293      	cmp	r3, r2
 8001188:	d810      	bhi.n	80011ac <GPS_CallBack+0x40>
	{
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <GPS_CallBack+0x50>)
 800118c:	f8b3 3438 	ldrh.w	r3, [r3, #1080]	; 0x438
 8001190:	461a      	mov	r2, r3
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <GPS_CallBack+0x50>)
 8001194:	f893 143a 	ldrb.w	r1, [r3, #1082]	; 0x43a
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <GPS_CallBack+0x50>)
 800119a:	5499      	strb	r1, [r3, r2]
		GPS.rxIndex++;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <GPS_CallBack+0x50>)
 800119e:	f8b3 3438 	ldrh.w	r3, [r3, #1080]	; 0x438
 80011a2:	3301      	adds	r3, #1
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <GPS_CallBack+0x50>)
 80011a8:	f8a3 2438 	strh.w	r2, [r3, #1080]	; 0x438
	}
	HAL_UART_Receive_IT(&huart2,&GPS.rxTmp,1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	4904      	ldr	r1, [pc, #16]	; (80011c0 <GPS_CallBack+0x54>)
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <GPS_CallBack+0x58>)
 80011b2:	f003 fdbe 	bl	8004d32 <HAL_UART_Receive_IT>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000710 	.word	0x20000710
 80011c0:	20000b4a 	.word	0x20000b4a
 80011c4:	20000608 	.word	0x20000608

080011c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_MspInit+0x44>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_MspInit+0x44>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_MspInit+0x44>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_MspInit+0x44>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_MspInit+0x44>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_MspInit+0x44>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	; 0x38
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a89      	ldr	r2, [pc, #548]	; (8001454 <HAL_SPI_MspInit+0x244>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d128      	bne.n	8001284 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001232:	4b89      	ldr	r3, [pc, #548]	; (8001458 <HAL_SPI_MspInit+0x248>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a88      	ldr	r2, [pc, #544]	; (8001458 <HAL_SPI_MspInit+0x248>)
 8001238:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b86      	ldr	r3, [pc, #536]	; (8001458 <HAL_SPI_MspInit+0x248>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001246:	623b      	str	r3, [r7, #32]
 8001248:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b83      	ldr	r3, [pc, #524]	; (8001458 <HAL_SPI_MspInit+0x248>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a82      	ldr	r2, [pc, #520]	; (8001458 <HAL_SPI_MspInit+0x248>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b80      	ldr	r3, [pc, #512]	; (8001458 <HAL_SPI_MspInit+0x248>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001262:	23a0      	movs	r3, #160	; 0xa0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001272:	2305      	movs	r3, #5
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127a:	4619      	mov	r1, r3
 800127c:	4877      	ldr	r0, [pc, #476]	; (800145c <HAL_SPI_MspInit+0x24c>)
 800127e:	f001 fa83 	bl	8002788 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001282:	e0e3      	b.n	800144c <HAL_SPI_MspInit+0x23c>
  else if(hspi->Instance==SPI2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a75      	ldr	r2, [pc, #468]	; (8001460 <HAL_SPI_MspInit+0x250>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d17b      	bne.n	8001386 <HAL_SPI_MspInit+0x176>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800128e:	4b72      	ldr	r3, [pc, #456]	; (8001458 <HAL_SPI_MspInit+0x248>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a71      	ldr	r2, [pc, #452]	; (8001458 <HAL_SPI_MspInit+0x248>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b6f      	ldr	r3, [pc, #444]	; (8001458 <HAL_SPI_MspInit+0x248>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	61bb      	str	r3, [r7, #24]
 80012a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	4b6c      	ldr	r3, [pc, #432]	; (8001458 <HAL_SPI_MspInit+0x248>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a6b      	ldr	r2, [pc, #428]	; (8001458 <HAL_SPI_MspInit+0x248>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b69      	ldr	r3, [pc, #420]	; (8001458 <HAL_SPI_MspInit+0x248>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b66      	ldr	r3, [pc, #408]	; (8001458 <HAL_SPI_MspInit+0x248>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a65      	ldr	r2, [pc, #404]	; (8001458 <HAL_SPI_MspInit+0x248>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b63      	ldr	r3, [pc, #396]	; (8001458 <HAL_SPI_MspInit+0x248>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012d6:	2302      	movs	r3, #2
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e6:	2305      	movs	r3, #5
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	4619      	mov	r1, r3
 80012f0:	485c      	ldr	r0, [pc, #368]	; (8001464 <HAL_SPI_MspInit+0x254>)
 80012f2:	f001 fa49 	bl	8002788 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001308:	2305      	movs	r3, #5
 800130a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001310:	4619      	mov	r1, r3
 8001312:	4855      	ldr	r0, [pc, #340]	; (8001468 <HAL_SPI_MspInit+0x258>)
 8001314:	f001 fa38 	bl	8002788 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8001318:	4b54      	ldr	r3, [pc, #336]	; (800146c <HAL_SPI_MspInit+0x25c>)
 800131a:	4a55      	ldr	r2, [pc, #340]	; (8001470 <HAL_SPI_MspInit+0x260>)
 800131c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_9;
 800131e:	4b53      	ldr	r3, [pc, #332]	; (800146c <HAL_SPI_MspInit+0x25c>)
 8001320:	f04f 5290 	mov.w	r2, #301989888	; 0x12000000
 8001324:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001326:	4b51      	ldr	r3, [pc, #324]	; (800146c <HAL_SPI_MspInit+0x25c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800132c:	4b4f      	ldr	r3, [pc, #316]	; (800146c <HAL_SPI_MspInit+0x25c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001332:	4b4e      	ldr	r3, [pc, #312]	; (800146c <HAL_SPI_MspInit+0x25c>)
 8001334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001338:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800133a:	4b4c      	ldr	r3, [pc, #304]	; (800146c <HAL_SPI_MspInit+0x25c>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001340:	4b4a      	ldr	r3, [pc, #296]	; (800146c <HAL_SPI_MspInit+0x25c>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001346:	4b49      	ldr	r3, [pc, #292]	; (800146c <HAL_SPI_MspInit+0x25c>)
 8001348:	2200      	movs	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800134c:	4b47      	ldr	r3, [pc, #284]	; (800146c <HAL_SPI_MspInit+0x25c>)
 800134e:	2200      	movs	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001352:	4b46      	ldr	r3, [pc, #280]	; (800146c <HAL_SPI_MspInit+0x25c>)
 8001354:	2200      	movs	r2, #0
 8001356:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001358:	4844      	ldr	r0, [pc, #272]	; (800146c <HAL_SPI_MspInit+0x25c>)
 800135a:	f000 fe0b 	bl	8001f74 <HAL_DMA_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 8001364:	f7ff fefc 	bl	8001160 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a40      	ldr	r2, [pc, #256]	; (800146c <HAL_SPI_MspInit+0x25c>)
 800136c:	659a      	str	r2, [r3, #88]	; 0x58
 800136e:	4a3f      	ldr	r2, [pc, #252]	; (800146c <HAL_SPI_MspInit+0x25c>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2024      	movs	r0, #36	; 0x24
 800137a:	f000 fdc4 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800137e:	2024      	movs	r0, #36	; 0x24
 8001380:	f000 fddd 	bl	8001f3e <HAL_NVIC_EnableIRQ>
}
 8001384:	e062      	b.n	800144c <HAL_SPI_MspInit+0x23c>
  else if(hspi->Instance==SPI4)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a3a      	ldr	r2, [pc, #232]	; (8001474 <HAL_SPI_MspInit+0x264>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d15d      	bne.n	800144c <HAL_SPI_MspInit+0x23c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001390:	4b31      	ldr	r3, [pc, #196]	; (8001458 <HAL_SPI_MspInit+0x248>)
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	4a30      	ldr	r2, [pc, #192]	; (8001458 <HAL_SPI_MspInit+0x248>)
 8001396:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800139a:	6453      	str	r3, [r2, #68]	; 0x44
 800139c:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <HAL_SPI_MspInit+0x248>)
 800139e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_SPI_MspInit+0x248>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	4a2a      	ldr	r2, [pc, #168]	; (8001458 <HAL_SPI_MspInit+0x248>)
 80013ae:	f043 0310 	orr.w	r3, r3, #16
 80013b2:	6313      	str	r3, [r2, #48]	; 0x30
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <HAL_SPI_MspInit+0x248>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80013c0:	2344      	movs	r3, #68	; 0x44
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80013d0:	2305      	movs	r3, #5
 80013d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	4619      	mov	r1, r3
 80013da:	4827      	ldr	r0, [pc, #156]	; (8001478 <HAL_SPI_MspInit+0x268>)
 80013dc:	f001 f9d4 	bl	8002788 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80013e0:	4b26      	ldr	r3, [pc, #152]	; (800147c <HAL_SPI_MspInit+0x26c>)
 80013e2:	4a27      	ldr	r2, [pc, #156]	; (8001480 <HAL_SPI_MspInit+0x270>)
 80013e4:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80013e6:	4b25      	ldr	r3, [pc, #148]	; (800147c <HAL_SPI_MspInit+0x26c>)
 80013e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ec:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <HAL_SPI_MspInit+0x26c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f4:	4b21      	ldr	r3, [pc, #132]	; (800147c <HAL_SPI_MspInit+0x26c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <HAL_SPI_MspInit+0x26c>)
 80013fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001400:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <HAL_SPI_MspInit+0x26c>)
 8001404:	2200      	movs	r2, #0
 8001406:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <HAL_SPI_MspInit+0x26c>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_SPI_MspInit+0x26c>)
 8001410:	2200      	movs	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_SPI_MspInit+0x26c>)
 8001416:	2200      	movs	r2, #0
 8001418:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_SPI_MspInit+0x26c>)
 800141c:	2200      	movs	r2, #0
 800141e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001420:	4816      	ldr	r0, [pc, #88]	; (800147c <HAL_SPI_MspInit+0x26c>)
 8001422:	f000 fda7 	bl	8001f74 <HAL_DMA_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <HAL_SPI_MspInit+0x220>
      Error_Handler();
 800142c:	f7ff fe98 	bl	8001160 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <HAL_SPI_MspInit+0x26c>)
 8001434:	659a      	str	r2, [r3, #88]	; 0x58
 8001436:	4a11      	ldr	r2, [pc, #68]	; (800147c <HAL_SPI_MspInit+0x26c>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2054      	movs	r0, #84	; 0x54
 8001442:	f000 fd60 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001446:	2054      	movs	r0, #84	; 0x54
 8001448:	f000 fd79 	bl	8001f3e <HAL_NVIC_EnableIRQ>
}
 800144c:	bf00      	nop
 800144e:	3738      	adds	r7, #56	; 0x38
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40013000 	.word	0x40013000
 8001458:	40023800 	.word	0x40023800
 800145c:	40020000 	.word	0x40020000
 8001460:	40003800 	.word	0x40003800
 8001464:	40020800 	.word	0x40020800
 8001468:	40020400 	.word	0x40020400
 800146c:	20000398 	.word	0x20000398
 8001470:	40026028 	.word	0x40026028
 8001474:	40013400 	.word	0x40013400
 8001478:	40021000 	.word	0x40021000
 800147c:	200003f8 	.word	0x200003f8
 8001480:	40026410 	.word	0x40026410

08001484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08e      	sub	sp, #56	; 0x38
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a8b      	ldr	r2, [pc, #556]	; (80016d0 <HAL_UART_MspInit+0x24c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d17d      	bne.n	80015a2 <HAL_UART_MspInit+0x11e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a6:	4b8b      	ldr	r3, [pc, #556]	; (80016d4 <HAL_UART_MspInit+0x250>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a8a      	ldr	r2, [pc, #552]	; (80016d4 <HAL_UART_MspInit+0x250>)
 80014ac:	f043 0310 	orr.w	r3, r3, #16
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b88      	ldr	r3, [pc, #544]	; (80016d4 <HAL_UART_MspInit+0x250>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f003 0310 	and.w	r3, r3, #16
 80014ba:	623b      	str	r3, [r7, #32]
 80014bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	4b85      	ldr	r3, [pc, #532]	; (80016d4 <HAL_UART_MspInit+0x250>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a84      	ldr	r2, [pc, #528]	; (80016d4 <HAL_UART_MspInit+0x250>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b82      	ldr	r3, [pc, #520]	; (80016d4 <HAL_UART_MspInit+0x250>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4b7f      	ldr	r3, [pc, #508]	; (80016d4 <HAL_UART_MspInit+0x250>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a7e      	ldr	r2, [pc, #504]	; (80016d4 <HAL_UART_MspInit+0x250>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b7c      	ldr	r3, [pc, #496]	; (80016d4 <HAL_UART_MspInit+0x250>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	61bb      	str	r3, [r7, #24]
 80014ec:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001500:	2304      	movs	r3, #4
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001508:	4619      	mov	r1, r3
 800150a:	4873      	ldr	r0, [pc, #460]	; (80016d8 <HAL_UART_MspInit+0x254>)
 800150c:	f001 f93c 	bl	8002788 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001522:	2307      	movs	r3, #7
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	486b      	ldr	r0, [pc, #428]	; (80016dc <HAL_UART_MspInit+0x258>)
 800152e:	f001 f92b 	bl	8002788 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001532:	4b6b      	ldr	r3, [pc, #428]	; (80016e0 <HAL_UART_MspInit+0x25c>)
 8001534:	4a6b      	ldr	r2, [pc, #428]	; (80016e4 <HAL_UART_MspInit+0x260>)
 8001536:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001538:	4b69      	ldr	r3, [pc, #420]	; (80016e0 <HAL_UART_MspInit+0x25c>)
 800153a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800153e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001540:	4b67      	ldr	r3, [pc, #412]	; (80016e0 <HAL_UART_MspInit+0x25c>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001546:	4b66      	ldr	r3, [pc, #408]	; (80016e0 <HAL_UART_MspInit+0x25c>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800154c:	4b64      	ldr	r3, [pc, #400]	; (80016e0 <HAL_UART_MspInit+0x25c>)
 800154e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001552:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001554:	4b62      	ldr	r3, [pc, #392]	; (80016e0 <HAL_UART_MspInit+0x25c>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800155a:	4b61      	ldr	r3, [pc, #388]	; (80016e0 <HAL_UART_MspInit+0x25c>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001560:	4b5f      	ldr	r3, [pc, #380]	; (80016e0 <HAL_UART_MspInit+0x25c>)
 8001562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001566:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001568:	4b5d      	ldr	r3, [pc, #372]	; (80016e0 <HAL_UART_MspInit+0x25c>)
 800156a:	2200      	movs	r2, #0
 800156c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800156e:	4b5c      	ldr	r3, [pc, #368]	; (80016e0 <HAL_UART_MspInit+0x25c>)
 8001570:	2200      	movs	r2, #0
 8001572:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001574:	485a      	ldr	r0, [pc, #360]	; (80016e0 <HAL_UART_MspInit+0x25c>)
 8001576:	f000 fcfd 	bl	8001f74 <HAL_DMA_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001580:	f7ff fdee 	bl	8001160 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a56      	ldr	r2, [pc, #344]	; (80016e0 <HAL_UART_MspInit+0x25c>)
 8001588:	671a      	str	r2, [r3, #112]	; 0x70
 800158a:	4a55      	ldr	r2, [pc, #340]	; (80016e0 <HAL_UART_MspInit+0x25c>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	2025      	movs	r0, #37	; 0x25
 8001596:	f000 fcb6 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800159a:	2025      	movs	r0, #37	; 0x25
 800159c:	f000 fccf 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015a0:	e091      	b.n	80016c6 <HAL_UART_MspInit+0x242>
  else if(huart->Instance==USART2)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a50      	ldr	r2, [pc, #320]	; (80016e8 <HAL_UART_MspInit+0x264>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d15e      	bne.n	800166a <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ac:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <HAL_UART_MspInit+0x250>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	4a48      	ldr	r2, [pc, #288]	; (80016d4 <HAL_UART_MspInit+0x250>)
 80015b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
 80015b8:	4b46      	ldr	r3, [pc, #280]	; (80016d4 <HAL_UART_MspInit+0x250>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <HAL_UART_MspInit+0x250>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	4a42      	ldr	r2, [pc, #264]	; (80016d4 <HAL_UART_MspInit+0x250>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6313      	str	r3, [r2, #48]	; 0x30
 80015d0:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <HAL_UART_MspInit+0x250>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015dc:	230c      	movs	r3, #12
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ec:	2307      	movs	r3, #7
 80015ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	4839      	ldr	r0, [pc, #228]	; (80016dc <HAL_UART_MspInit+0x258>)
 80015f8:	f001 f8c6 	bl	8002788 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80015fc:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <HAL_UART_MspInit+0x268>)
 80015fe:	4a3c      	ldr	r2, [pc, #240]	; (80016f0 <HAL_UART_MspInit+0x26c>)
 8001600:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001602:	4b3a      	ldr	r3, [pc, #232]	; (80016ec <HAL_UART_MspInit+0x268>)
 8001604:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001608:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160a:	4b38      	ldr	r3, [pc, #224]	; (80016ec <HAL_UART_MspInit+0x268>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001610:	4b36      	ldr	r3, [pc, #216]	; (80016ec <HAL_UART_MspInit+0x268>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001616:	4b35      	ldr	r3, [pc, #212]	; (80016ec <HAL_UART_MspInit+0x268>)
 8001618:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800161c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800161e:	4b33      	ldr	r3, [pc, #204]	; (80016ec <HAL_UART_MspInit+0x268>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001624:	4b31      	ldr	r3, [pc, #196]	; (80016ec <HAL_UART_MspInit+0x268>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800162a:	4b30      	ldr	r3, [pc, #192]	; (80016ec <HAL_UART_MspInit+0x268>)
 800162c:	2200      	movs	r2, #0
 800162e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001630:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <HAL_UART_MspInit+0x268>)
 8001632:	2200      	movs	r2, #0
 8001634:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001636:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <HAL_UART_MspInit+0x268>)
 8001638:	2200      	movs	r2, #0
 800163a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800163c:	482b      	ldr	r0, [pc, #172]	; (80016ec <HAL_UART_MspInit+0x268>)
 800163e:	f000 fc99 	bl	8001f74 <HAL_DMA_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 8001648:	f7ff fd8a 	bl	8001160 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a27      	ldr	r2, [pc, #156]	; (80016ec <HAL_UART_MspInit+0x268>)
 8001650:	671a      	str	r2, [r3, #112]	; 0x70
 8001652:	4a26      	ldr	r2, [pc, #152]	; (80016ec <HAL_UART_MspInit+0x268>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	2026      	movs	r0, #38	; 0x26
 800165e:	f000 fc52 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001662:	2026      	movs	r0, #38	; 0x26
 8001664:	f000 fc6b 	bl	8001f3e <HAL_NVIC_EnableIRQ>
}
 8001668:	e02d      	b.n	80016c6 <HAL_UART_MspInit+0x242>
  else if(huart->Instance==USART3)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <HAL_UART_MspInit+0x270>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d128      	bne.n	80016c6 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_UART_MspInit+0x250>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	4a16      	ldr	r2, [pc, #88]	; (80016d4 <HAL_UART_MspInit+0x250>)
 800167a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167e:	6413      	str	r3, [r2, #64]	; 0x40
 8001680:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <HAL_UART_MspInit+0x250>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_UART_MspInit+0x250>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_UART_MspInit+0x250>)
 8001692:	f043 0302 	orr.w	r3, r3, #2
 8001696:	6313      	str	r3, [r2, #48]	; 0x30
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_UART_MspInit+0x250>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	2302      	movs	r3, #2
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b2:	2303      	movs	r3, #3
 80016b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016b6:	2307      	movs	r3, #7
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <HAL_UART_MspInit+0x254>)
 80016c2:	f001 f861 	bl	8002788 <HAL_GPIO_Init>
}
 80016c6:	bf00      	nop
 80016c8:	3738      	adds	r7, #56	; 0x38
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40011000 	.word	0x40011000
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40020000 	.word	0x40020000
 80016e0:	2000045c 	.word	0x2000045c
 80016e4:	40026440 	.word	0x40026440
 80016e8:	40004400 	.word	0x40004400
 80016ec:	2000022c 	.word	0x2000022c
 80016f0:	40026088 	.word	0x40026088
 80016f4:	40004800 	.word	0x40004800

080016f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <NMI_Handler+0x4>

080016fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <HardFault_Handler+0x4>

08001704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <MemManage_Handler+0x4>

0800170a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <BusFault_Handler+0x4>

08001710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <UsageFault_Handler+0x4>

08001716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001744:	f000 fac0 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <DMA1_Stream1_IRQHandler+0x10>)
 8001752:	f000 fdaf 	bl	80022b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000398 	.word	0x20000398

08001760 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <DMA1_Stream5_IRQHandler+0x10>)
 8001766:	f000 fda5 	bl	80022b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000022c 	.word	0x2000022c

08001774 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <SPI2_IRQHandler+0x10>)
 800177a:	f002 fe29 	bl	80043d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000028c 	.word	0x2000028c

08001788 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <USART1_IRQHandler+0x10>)
 800178e:	f003 fb4b 	bl	8004e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200004bc 	.word	0x200004bc

0800179c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <USART2_IRQHandler+0x10>)
 80017a2:	f003 fb41 	bl	8004e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000608 	.word	0x20000608

080017b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <DMA2_Stream0_IRQHandler+0x10>)
 80017b6:	f000 fd7d 	bl	80022b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200003f8 	.word	0x200003f8

080017c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80017c8:	4803      	ldr	r0, [pc, #12]	; (80017d8 <DMA2_Stream2_IRQHandler+0x14>)
 80017ca:	f000 fd73 	bl	80022b4 <HAL_DMA_IRQHandler>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80017ce:	4802      	ldr	r0, [pc, #8]	; (80017d8 <DMA2_Stream2_IRQHandler+0x14>)
 80017d0:	f000 fd70 	bl	80022b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000045c 	.word	0x2000045c

080017dc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <SPI4_IRQHandler+0x10>)
 80017e2:	f002 fdf5 	bl	80043d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000540 	.word	0x20000540

080017f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
	return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_kill>:

int _kill(int pid, int sig)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800180a:	f004 fbe1 	bl	8005fd0 <__errno>
 800180e:	4603      	mov	r3, r0
 8001810:	2216      	movs	r2, #22
 8001812:	601a      	str	r2, [r3, #0]
	return -1;
 8001814:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_exit>:

void _exit (int status)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ffe7 	bl	8001800 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001832:	e7fe      	b.n	8001832 <_exit+0x12>

08001834 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	e00a      	b.n	800185c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001846:	f3af 8000 	nop.w
 800184a:	4601      	mov	r1, r0
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	60ba      	str	r2, [r7, #8]
 8001852:	b2ca      	uxtb	r2, r1
 8001854:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf0      	blt.n	8001846 <_read+0x12>
	}

return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e009      	b.n	8001894 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	dbf1      	blt.n	8001880 <_write+0x12>
	}
	return len;
 800189c:	687b      	ldr	r3, [r7, #4]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_close>:

int _close(int file)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	return -1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ce:	605a      	str	r2, [r3, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_isatty>:

int _isatty(int file)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
	return 1;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	; (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f004 fb46 	bl	8005fd0 <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20080000 	.word	0x20080000
 8001970:	00000400 	.word	0x00000400
 8001974:	20000220 	.word	0x20000220
 8001978:	20000bb0 	.word	0x20000bb0

0800197c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <HAL_UART_RxHalfCpltCallback>:
zoe_m8q zoe;

extern UART_HandleTypeDef huart1;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);  // toggle PA0
 80019a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <HAL_UART_RxHalfCpltCallback+0x1c>)
 80019ae:	f001 f8b0 	bl	8002b12 <HAL_GPIO_TogglePin>

}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40020400 	.word	0x40020400

080019c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_DMA(&huart1, zoe.rx_zoe_data, 80);
 80019c8:	2250      	movs	r2, #80	; 0x50
 80019ca:	4905      	ldr	r1, [pc, #20]	; (80019e0 <HAL_UART_RxCpltCallback+0x20>)
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <HAL_UART_RxCpltCallback+0x24>)
 80019ce:	f003 f9ed 	bl	8004dac <HAL_UART_Receive_DMA>
  GPS_CallBack();
 80019d2:	f7ff fbcb 	bl	800116c <GPS_CallBack>

}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200006ac 	.word	0x200006ac
 80019e4:	200004bc 	.word	0x200004bc

080019e8 <POLL_WDMA_ZOE>:

void POLL_WDMA_ZOE(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA (&huart1, zoe.rx_zoe_data, 80);
 80019ec:	2250      	movs	r2, #80	; 0x50
 80019ee:	4903      	ldr	r1, [pc, #12]	; (80019fc <POLL_WDMA_ZOE+0x14>)
 80019f0:	4803      	ldr	r0, [pc, #12]	; (8001a00 <POLL_WDMA_ZOE+0x18>)
 80019f2:	f003 f9db 	bl	8004dac <HAL_UART_Receive_DMA>
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200006ac 	.word	0x200006ac
 8001a00:	200004bc 	.word	0x200004bc

08001a04 <zoe_llhvelned_request>:

void zoe_llhvelned_request(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, request_posllh_array , 8, 1000);
 8001a08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	4906      	ldr	r1, [pc, #24]	; (8001a28 <zoe_llhvelned_request+0x24>)
 8001a10:	4806      	ldr	r0, [pc, #24]	; (8001a2c <zoe_llhvelned_request+0x28>)
 8001a12:	f003 f8fb 	bl	8004c0c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, request_velned_array , 8, 1000);
 8001a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	4904      	ldr	r1, [pc, #16]	; (8001a30 <zoe_llhvelned_request+0x2c>)
 8001a1e:	4803      	ldr	r0, [pc, #12]	; (8001a2c <zoe_llhvelned_request+0x28>)
 8001a20:	f003 f8f4 	bl	8004c0c <HAL_UART_Transmit>
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000004 	.word	0x20000004
 8001a2c:	200004bc 	.word	0x200004bc
 8001a30:	2000000c 	.word	0x2000000c

08001a34 <zoe_parse_data>:

void zoe_parse_data(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0


		if(zoe.rx_zoe_data[0] == 181 &&
 8001a38:	4b6b      	ldr	r3, [pc, #428]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3e:	2bb5      	cmp	r3, #181	; 0xb5
 8001a40:	d14d      	bne.n	8001ade <zoe_parse_data+0xaa>
			zoe.rx_zoe_data[1] == 98 &&
 8001a42:	4b69      	ldr	r3, [pc, #420]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001a44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		if(zoe.rx_zoe_data[0] == 181 &&
 8001a48:	2b62      	cmp	r3, #98	; 0x62
 8001a4a:	d148      	bne.n	8001ade <zoe_parse_data+0xaa>
			zoe.rx_zoe_data[2] == 1 &&
 8001a4c:	4b66      	ldr	r3, [pc, #408]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001a4e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
			zoe.rx_zoe_data[1] == 98 &&
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d143      	bne.n	8001ade <zoe_parse_data+0xaa>
			zoe.rx_zoe_data[3] == 2)
 8001a56:	4b64      	ldr	r3, [pc, #400]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001a58:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
			zoe.rx_zoe_data[2] == 1 &&
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d13e      	bne.n	8001ade <zoe_parse_data+0xaa>
	{
	  zoe.lattitude_zoe_m8q = zoe.rx_zoe_data[10] 	    |
 8001a60:	4b61      	ldr	r3, [pc, #388]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001a62:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001a66:	461a      	mov	r2, r3
				  	  	  	 (zoe.rx_zoe_data[11] << 8) |
 8001a68:	4b5f      	ldr	r3, [pc, #380]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001a6a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001a6e:	021b      	lsls	r3, r3, #8
	  zoe.lattitude_zoe_m8q = zoe.rx_zoe_data[10] 	    |
 8001a70:	431a      	orrs	r2, r3
				  	  	  	 (zoe.rx_zoe_data[12] << 16)|
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001a74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a78:	041b      	lsls	r3, r3, #16
				  	  	  	 (zoe.rx_zoe_data[11] << 8) |
 8001a7a:	431a      	orrs	r2, r3
							 (zoe.rx_zoe_data[13] << 24);
 8001a7c:	4b5a      	ldr	r3, [pc, #360]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001a7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a82:	061b      	lsls	r3, r3, #24
				  	  	  	 (zoe.rx_zoe_data[12] << 16)|
 8001a84:	4313      	orrs	r3, r2
	  zoe.lattitude_zoe_m8q = zoe.rx_zoe_data[10] 	    |
 8001a86:	4a58      	ldr	r2, [pc, #352]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001a88:	6053      	str	r3, [r2, #4]

	  zoe.longtitude_zoe_m8q= zoe.rx_zoe_data[14] 	    |
 8001a8a:	4b57      	ldr	r3, [pc, #348]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001a8c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001a90:	461a      	mov	r2, r3
						  	 (zoe.rx_zoe_data[15] << 8) |
 8001a92:	4b55      	ldr	r3, [pc, #340]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001a94:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001a98:	021b      	lsls	r3, r3, #8
	  zoe.longtitude_zoe_m8q= zoe.rx_zoe_data[14] 	    |
 8001a9a:	431a      	orrs	r2, r3
						  	 (zoe.rx_zoe_data[16] << 16)|
 8001a9c:	4b52      	ldr	r3, [pc, #328]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001a9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aa2:	041b      	lsls	r3, r3, #16
						  	 (zoe.rx_zoe_data[15] << 8) |
 8001aa4:	431a      	orrs	r2, r3
							 (zoe.rx_zoe_data[17] << 24);
 8001aa6:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001aa8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001aac:	061b      	lsls	r3, r3, #24
						  	 (zoe.rx_zoe_data[16] << 16)|
 8001aae:	4313      	orrs	r3, r2
	  zoe.longtitude_zoe_m8q= zoe.rx_zoe_data[14] 	    |
 8001ab0:	4a4d      	ldr	r2, [pc, #308]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001ab2:	6013      	str	r3, [r2, #0]

	  zoe.altitude_zoe_m8q  = zoe.rx_zoe_data[22] 	    |
 8001ab4:	4b4c      	ldr	r3, [pc, #304]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001ab6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001aba:	461a      	mov	r2, r3
						  	 (zoe.rx_zoe_data[23] << 8) |
 8001abc:	4b4a      	ldr	r3, [pc, #296]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001abe:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001ac2:	021b      	lsls	r3, r3, #8
	  zoe.altitude_zoe_m8q  = zoe.rx_zoe_data[22] 	    |
 8001ac4:	431a      	orrs	r2, r3
						  	 (zoe.rx_zoe_data[24] << 16)|
 8001ac6:	4b48      	ldr	r3, [pc, #288]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001ac8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001acc:	041b      	lsls	r3, r3, #16
						  	 (zoe.rx_zoe_data[23] << 8) |
 8001ace:	431a      	orrs	r2, r3
							 (zoe.rx_zoe_data[25] << 24);
 8001ad0:	4b45      	ldr	r3, [pc, #276]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001ad2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ad6:	061b      	lsls	r3, r3, #24
						  	 (zoe.rx_zoe_data[24] << 16)|
 8001ad8:	4313      	orrs	r3, r2
	  zoe.altitude_zoe_m8q  = zoe.rx_zoe_data[22] 	    |
 8001ada:	4a43      	ldr	r2, [pc, #268]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001adc:	6093      	str	r3, [r2, #8]
	}

		 if(zoe.rx_zoe_data[0+36] == 181 &&
 8001ade:	4b42      	ldr	r3, [pc, #264]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001ae0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ae4:	2bb5      	cmp	r3, #181	; 0xb5
 8001ae6:	d179      	bne.n	8001bdc <zoe_parse_data+0x1a8>
			        zoe.rx_zoe_data[1+36] == 98 &&
 8001ae8:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
		 if(zoe.rx_zoe_data[0+36] == 181 &&
 8001aee:	2b62      	cmp	r3, #98	; 0x62
 8001af0:	d174      	bne.n	8001bdc <zoe_parse_data+0x1a8>
					zoe.rx_zoe_data[2+36] == 1 &&
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001af4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
			        zoe.rx_zoe_data[1+36] == 98 &&
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d16f      	bne.n	8001bdc <zoe_parse_data+0x1a8>
					zoe.rx_zoe_data[3+36] == 18)
 8001afc:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001afe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
					zoe.rx_zoe_data[2+36] == 1 &&
 8001b02:	2b12      	cmp	r3, #18
 8001b04:	d16a      	bne.n	8001bdc <zoe_parse_data+0x1a8>
	{
	  zoe.velocity_north    =  zoe.rx_zoe_data[10+36] 	    |
 8001b06:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b08:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001b0c:	461a      	mov	r2, r3
				  	  	  	  (zoe.rx_zoe_data[11+36] << 8) |
 8001b0e:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b10:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001b14:	021b      	lsls	r3, r3, #8
	  zoe.velocity_north    =  zoe.rx_zoe_data[10+36] 	    |
 8001b16:	431a      	orrs	r2, r3
				  	  	  	  (zoe.rx_zoe_data[12+36] << 16)|
 8001b18:	4b33      	ldr	r3, [pc, #204]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b1e:	041b      	lsls	r3, r3, #16
				  	  	  	  (zoe.rx_zoe_data[11+36] << 8) |
 8001b20:	431a      	orrs	r2, r3
							  (zoe.rx_zoe_data[13+36] << 24);
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b28:	061b      	lsls	r3, r3, #24
				  	  	  	  (zoe.rx_zoe_data[12+36] << 16)|
 8001b2a:	4313      	orrs	r3, r2
	  zoe.velocity_north    =  zoe.rx_zoe_data[10+36] 	    |
 8001b2c:	4a2e      	ldr	r2, [pc, #184]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b2e:	60d3      	str	r3, [r2, #12]

	  zoe.velocity_east     =  zoe.rx_zoe_data[14+36] 	    |
 8001b30:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b32:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8001b36:	461a      	mov	r2, r3
						  	  (zoe.rx_zoe_data[15+36] << 8) |
 8001b38:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b3a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001b3e:	021b      	lsls	r3, r3, #8
	  zoe.velocity_east     =  zoe.rx_zoe_data[14+36] 	    |
 8001b40:	431a      	orrs	r2, r3
						  	  (zoe.rx_zoe_data[16+36] << 16)|
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b44:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b48:	041b      	lsls	r3, r3, #16
						  	  (zoe.rx_zoe_data[15+36] << 8) |
 8001b4a:	431a      	orrs	r2, r3
							  (zoe.rx_zoe_data[17+36] << 24);
 8001b4c:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b4e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b52:	061b      	lsls	r3, r3, #24
						  	  (zoe.rx_zoe_data[16+36] << 16)|
 8001b54:	4313      	orrs	r3, r2
	  zoe.velocity_east     =  zoe.rx_zoe_data[14+36] 	    |
 8001b56:	4a24      	ldr	r2, [pc, #144]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b58:	6113      	str	r3, [r2, #16]

	  zoe.velocity_down     =  zoe.rx_zoe_data[18+36] 	    |
 8001b5a:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b5c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001b60:	461a      	mov	r2, r3
			  	  	  	  	  (zoe.rx_zoe_data[19+36] << 8) |
 8001b62:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b64:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001b68:	021b      	lsls	r3, r3, #8
	  zoe.velocity_down     =  zoe.rx_zoe_data[18+36] 	    |
 8001b6a:	431a      	orrs	r2, r3
							  (zoe.rx_zoe_data[20+36] << 16)|
 8001b6c:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001b72:	041b      	lsls	r3, r3, #16
			  	  	  	  	  (zoe.rx_zoe_data[19+36] << 8) |
 8001b74:	431a      	orrs	r2, r3
							  (zoe.rx_zoe_data[21+36] << 24);
 8001b76:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b78:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001b7c:	061b      	lsls	r3, r3, #24
							  (zoe.rx_zoe_data[20+36] << 16)|
 8001b7e:	4313      	orrs	r3, r2
	  zoe.velocity_down     =  zoe.rx_zoe_data[18+36] 	    |
 8001b80:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b82:	6153      	str	r3, [r2, #20]

	  zoe.speed_3d			=  zoe.rx_zoe_data[22+36] 	    |
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b86:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8001b8a:	461a      	mov	r2, r3
			  	  	  	  	  (zoe.rx_zoe_data[23+36] << 8) |
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b8e:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8001b92:	021b      	lsls	r3, r3, #8
	  zoe.speed_3d			=  zoe.rx_zoe_data[22+36] 	    |
 8001b94:	431a      	orrs	r2, r3
							  (zoe.rx_zoe_data[24+36] << 16)|
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001b98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001b9c:	041b      	lsls	r3, r3, #16
			  	  	  	  	  (zoe.rx_zoe_data[23+36] << 8) |
 8001b9e:	431a      	orrs	r2, r3
							  (zoe.rx_zoe_data[25+36] << 24);
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001ba2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ba6:	061b      	lsls	r3, r3, #24
							  (zoe.rx_zoe_data[24+36] << 16)|
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	461a      	mov	r2, r3
	  zoe.speed_3d			=  zoe.rx_zoe_data[22+36] 	    |
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001bae:	619a      	str	r2, [r3, #24]

	  zoe.speed_gnd			=  zoe.rx_zoe_data[26+36] 	    |
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001bb2:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8001bb6:	461a      	mov	r2, r3
			  	  	  	  	  (zoe.rx_zoe_data[27+36] << 8) |
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001bba:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
 8001bbe:	021b      	lsls	r3, r3, #8
	  zoe.speed_gnd			=  zoe.rx_zoe_data[26+36] 	    |
 8001bc0:	431a      	orrs	r2, r3
							  (zoe.rx_zoe_data[28+36] << 16)|
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001bc4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001bc8:	041b      	lsls	r3, r3, #16
			  	  	  	  	  (zoe.rx_zoe_data[27+36] << 8) |
 8001bca:	431a      	orrs	r2, r3
							  (zoe.rx_zoe_data[29+36] << 24);
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001bce:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001bd2:	061b      	lsls	r3, r3, #24
							  (zoe.rx_zoe_data[28+36] << 16)|
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	461a      	mov	r2, r3
	  zoe.speed_gnd			=  zoe.rx_zoe_data[26+36] 	    |
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <zoe_parse_data+0x1b4>)
 8001bda:	61da      	str	r2, [r3, #28]
	}


}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	2000068c 	.word	0x2000068c

08001bec <ZOE>:

void ZOE(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	  zoe_llhvelned_request();
 8001bf0:	f7ff ff08 	bl	8001a04 <zoe_llhvelned_request>
	  zoe_parse_data();
 8001bf4:	f7ff ff1e 	bl	8001a34 <zoe_parse_data>
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c00:	480d      	ldr	r0, [pc, #52]	; (8001c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c02:	490e      	ldr	r1, [pc, #56]	; (8001c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c04:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c08:	e002      	b.n	8001c10 <LoopCopyDataInit>

08001c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0e:	3304      	adds	r3, #4

08001c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c14:	d3f9      	bcc.n	8001c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c16:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c18:	4c0b      	ldr	r4, [pc, #44]	; (8001c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c1c:	e001      	b.n	8001c22 <LoopFillZerobss>

08001c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c20:	3204      	adds	r2, #4

08001c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c24:	d3fb      	bcc.n	8001c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c26:	f7ff fea9 	bl	800197c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c2a:	f004 f9d7 	bl	8005fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c2e:	f7fe fee5 	bl	80009fc <main>
  bx  lr    
 8001c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c34:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c3c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001c40:	0800abdc 	.word	0x0800abdc
  ldr r2, =_sbss
 8001c44:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001c48:	20000bac 	.word	0x20000bac

08001c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c4c:	e7fe      	b.n	8001c4c <ADC_IRQHandler>

08001c4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c52:	2003      	movs	r0, #3
 8001c54:	f000 f94c 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f000 f805 	bl	8001c68 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c5e:	f7ff fab3 	bl	80011c8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x54>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_InitTick+0x58>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f967 	bl	8001f5a <HAL_SYSTICK_Config>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00e      	b.n	8001cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b0f      	cmp	r3, #15
 8001c9a:	d80a      	bhi.n	8001cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f000 f92f 	bl	8001f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca8:	4a06      	ldr	r2, [pc, #24]	; (8001cc4 <HAL_InitTick+0x5c>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e000      	b.n	8001cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	20000018 	.word	0x20000018
 8001cc4:	20000014 	.word	0x20000014

08001cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x20>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_IncTick+0x24>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_IncTick+0x24>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000018 	.word	0x20000018
 8001cec:	20000b98 	.word	0x20000b98

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <HAL_GetTick+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000b98 	.word	0x20000b98

08001d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff ffee 	bl	8001cf0 <HAL_GetTick>
 8001d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d005      	beq.n	8001d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_Delay+0x44>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2e:	bf00      	nop
 8001d30:	f7ff ffde 	bl	8001cf0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8f7      	bhi.n	8001d30 <HAL_Delay+0x28>
  {
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000018 	.word	0x20000018

08001d50 <__NVIC_SetPriorityGrouping>:
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <__NVIC_SetPriorityGrouping+0x40>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7e:	4a04      	ldr	r2, [pc, #16]	; (8001d90 <__NVIC_SetPriorityGrouping+0x40>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60d3      	str	r3, [r2, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000ed00 	.word	0xe000ed00
 8001d94:	05fa0000 	.word	0x05fa0000

08001d98 <__NVIC_GetPriorityGrouping>:
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <__NVIC_EnableIRQ+0x38>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	; (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ebc:	d301      	bcc.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00f      	b.n	8001ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <SysTick_Config+0x40>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	210f      	movs	r1, #15
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f7ff ff8e 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <SysTick_Config+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <SysTick_Config+0x40>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff29 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff3e 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff8e 	bl	8001e44 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5d 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff31 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffa2 	bl	8001eac <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff feb6 	bl	8001cf0 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e099      	b.n	80020c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb0:	e00f      	b.n	8001fd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb2:	f7ff fe9d 	bl	8001cf0 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d908      	bls.n	8001fd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e078      	b.n	80020c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1e8      	bne.n	8001fb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	4b38      	ldr	r3, [pc, #224]	; (80020cc <HAL_DMA_Init+0x158>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800200a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	2b04      	cmp	r3, #4
 800202a:	d107      	bne.n	800203c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	4313      	orrs	r3, r2
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4313      	orrs	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f023 0307 	bic.w	r3, r3, #7
 8002052:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	2b04      	cmp	r3, #4
 8002064:	d117      	bne.n	8002096 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00e      	beq.n	8002096 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fb09 	bl	8002690 <DMA_CheckFifoParam>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2240      	movs	r2, #64	; 0x40
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002092:	2301      	movs	r3, #1
 8002094:	e016      	b.n	80020c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fac0 	bl	8002624 <DMA_CalcBaseAndBitshift>
 80020a4:	4603      	mov	r3, r0
 80020a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	223f      	movs	r2, #63	; 0x3f
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	e010803f 	.word	0xe010803f

080020d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_DMA_Start_IT+0x26>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e048      	b.n	8002188 <HAL_DMA_Start_IT+0xb8>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b01      	cmp	r3, #1
 8002108:	d137      	bne.n	800217a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2202      	movs	r2, #2
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 fa52 	bl	80025c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	223f      	movs	r2, #63	; 0x3f
 800212a:	409a      	lsls	r2, r3
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0216 	orr.w	r2, r2, #22
 800213e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800214e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0208 	orr.w	r2, r2, #8
 8002166:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e005      	b.n	8002186 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002182:	2302      	movs	r3, #2
 8002184:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002186:	7dfb      	ldrb	r3, [r7, #23]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800219e:	f7ff fda7 	bl	8001cf0 <HAL_GetTick>
 80021a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d008      	beq.n	80021c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e052      	b.n	8002268 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0216 	bic.w	r2, r2, #22
 80021d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d103      	bne.n	80021f2 <HAL_DMA_Abort+0x62>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0208 	bic.w	r2, r2, #8
 8002200:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0201 	bic.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002212:	e013      	b.n	800223c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002214:	f7ff fd6c 	bl	8001cf0 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b05      	cmp	r3, #5
 8002220:	d90c      	bls.n	800223c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2220      	movs	r2, #32
 8002226:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2203      	movs	r2, #3
 8002234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e015      	b.n	8002268 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1e4      	bne.n	8002214 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224e:	223f      	movs	r2, #63	; 0x3f
 8002250:	409a      	lsls	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d004      	beq.n	800228e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2280      	movs	r2, #128	; 0x80
 8002288:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e00c      	b.n	80022a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2205      	movs	r2, #5
 8002292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80022c0:	4b92      	ldr	r3, [pc, #584]	; (800250c <HAL_DMA_IRQHandler+0x258>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a92      	ldr	r2, [pc, #584]	; (8002510 <HAL_DMA_IRQHandler+0x25c>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	0a9b      	lsrs	r3, r3, #10
 80022cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022de:	2208      	movs	r2, #8
 80022e0:	409a      	lsls	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01a      	beq.n	8002320 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0204 	bic.w	r2, r2, #4
 8002306:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230c:	2208      	movs	r2, #8
 800230e:	409a      	lsls	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002324:	2201      	movs	r2, #1
 8002326:	409a      	lsls	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d012      	beq.n	8002356 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	2201      	movs	r2, #1
 8002344:	409a      	lsls	r2, r3
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f043 0202 	orr.w	r2, r3, #2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	2204      	movs	r2, #4
 800235c:	409a      	lsls	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d012      	beq.n	800238c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00b      	beq.n	800238c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002378:	2204      	movs	r2, #4
 800237a:	409a      	lsls	r2, r3
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	f043 0204 	orr.w	r2, r3, #4
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	2210      	movs	r2, #16
 8002392:	409a      	lsls	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d043      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d03c      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	2210      	movs	r2, #16
 80023b0:	409a      	lsls	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d018      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d108      	bne.n	80023e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d024      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4798      	blx	r3
 80023e2:	e01f      	b.n	8002424 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01b      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
 80023f4:	e016      	b.n	8002424 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d107      	bne.n	8002414 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0208 	bic.w	r2, r2, #8
 8002412:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	2220      	movs	r2, #32
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 808e 	beq.w	8002552 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 8086 	beq.w	8002552 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	2220      	movs	r2, #32
 800244c:	409a      	lsls	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b05      	cmp	r3, #5
 800245c:	d136      	bne.n	80024cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0216 	bic.w	r2, r2, #22
 800246c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800247c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	2b00      	cmp	r3, #0
 8002484:	d103      	bne.n	800248e <HAL_DMA_IRQHandler+0x1da>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0208 	bic.w	r2, r2, #8
 800249c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	223f      	movs	r2, #63	; 0x3f
 80024a4:	409a      	lsls	r2, r3
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d07d      	beq.n	80025be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	4798      	blx	r3
        }
        return;
 80024ca:	e078      	b.n	80025be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01c      	beq.n	8002514 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d108      	bne.n	80024fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d030      	beq.n	8002552 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	4798      	blx	r3
 80024f8:	e02b      	b.n	8002552 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d027      	beq.n	8002552 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	4798      	blx	r3
 800250a:	e022      	b.n	8002552 <HAL_DMA_IRQHandler+0x29e>
 800250c:	20000000 	.word	0x20000000
 8002510:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10f      	bne.n	8002542 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0210 	bic.w	r2, r2, #16
 8002530:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	2b00      	cmp	r3, #0
 8002558:	d032      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d022      	beq.n	80025ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2205      	movs	r2, #5
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0201 	bic.w	r2, r2, #1
 800257c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	3301      	adds	r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	429a      	cmp	r2, r3
 8002588:	d307      	bcc.n	800259a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f2      	bne.n	800257e <HAL_DMA_IRQHandler+0x2ca>
 8002598:	e000      	b.n	800259c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800259a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
 80025bc:	e000      	b.n	80025c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80025be:	bf00      	nop
    }
  }
}
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop

080025c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b40      	cmp	r3, #64	; 0x40
 80025f4:	d108      	bne.n	8002608 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002606:	e007      	b.n	8002618 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	60da      	str	r2, [r3, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	3b10      	subs	r3, #16
 8002634:	4a13      	ldr	r2, [pc, #76]	; (8002684 <DMA_CalcBaseAndBitshift+0x60>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <DMA_CalcBaseAndBitshift+0x64>)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2b03      	cmp	r3, #3
 8002650:	d908      	bls.n	8002664 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <DMA_CalcBaseAndBitshift+0x68>)
 800265a:	4013      	ands	r3, r2
 800265c:	1d1a      	adds	r2, r3, #4
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	659a      	str	r2, [r3, #88]	; 0x58
 8002662:	e006      	b.n	8002672 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <DMA_CalcBaseAndBitshift+0x68>)
 800266c:	4013      	ands	r3, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	aaaaaaab 	.word	0xaaaaaaab
 8002688:	0800a710 	.word	0x0800a710
 800268c:	fffffc00 	.word	0xfffffc00

08002690 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d11f      	bne.n	80026ea <DMA_CheckFifoParam+0x5a>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d856      	bhi.n	800275e <DMA_CheckFifoParam+0xce>
 80026b0:	a201      	add	r2, pc, #4	; (adr r2, 80026b8 <DMA_CheckFifoParam+0x28>)
 80026b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b6:	bf00      	nop
 80026b8:	080026c9 	.word	0x080026c9
 80026bc:	080026db 	.word	0x080026db
 80026c0:	080026c9 	.word	0x080026c9
 80026c4:	0800275f 	.word	0x0800275f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d046      	beq.n	8002762 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d8:	e043      	b.n	8002762 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026e2:	d140      	bne.n	8002766 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e8:	e03d      	b.n	8002766 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f2:	d121      	bne.n	8002738 <DMA_CheckFifoParam+0xa8>
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d837      	bhi.n	800276a <DMA_CheckFifoParam+0xda>
 80026fa:	a201      	add	r2, pc, #4	; (adr r2, 8002700 <DMA_CheckFifoParam+0x70>)
 80026fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002700:	08002711 	.word	0x08002711
 8002704:	08002717 	.word	0x08002717
 8002708:	08002711 	.word	0x08002711
 800270c:	08002729 	.word	0x08002729
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
      break;
 8002714:	e030      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d025      	beq.n	800276e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002726:	e022      	b.n	800276e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002730:	d11f      	bne.n	8002772 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002736:	e01c      	b.n	8002772 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d903      	bls.n	8002746 <DMA_CheckFifoParam+0xb6>
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d003      	beq.n	800274c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002744:	e018      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
      break;
 800274a:	e015      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00e      	beq.n	8002776 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
      break;
 800275c:	e00b      	b.n	8002776 <DMA_CheckFifoParam+0xe6>
      break;
 800275e:	bf00      	nop
 8002760:	e00a      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      break;
 8002762:	bf00      	nop
 8002764:	e008      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      break;
 8002766:	bf00      	nop
 8002768:	e006      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      break;
 800276a:	bf00      	nop
 800276c:	e004      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      break;
 800276e:	bf00      	nop
 8002770:	e002      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      break;   
 8002772:	bf00      	nop
 8002774:	e000      	b.n	8002778 <DMA_CheckFifoParam+0xe8>
      break;
 8002776:	bf00      	nop
    }
  } 
  
  return status; 
 8002778:	7bfb      	ldrb	r3, [r7, #15]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop

08002788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002788:	b480      	push	{r7}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	e175      	b.n	8002a94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	f040 8164 	bne.w	8002a8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d00b      	beq.n	80027e6 <HAL_GPIO_Init+0x5e>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d007      	beq.n	80027e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027da:	2b11      	cmp	r3, #17
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b12      	cmp	r3, #18
 80027e4:	d130      	bne.n	8002848 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800281c:	2201      	movs	r2, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 0201 	and.w	r2, r3, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x100>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b12      	cmp	r3, #18
 8002886:	d123      	bne.n	80028d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	08da      	lsrs	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3208      	adds	r2, #8
 8002890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	220f      	movs	r2, #15
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	08da      	lsrs	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3208      	adds	r2, #8
 80028ca:	69b9      	ldr	r1, [r7, #24]
 80028cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0203 	and.w	r2, r3, #3
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80be 	beq.w	8002a8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002912:	4b66      	ldr	r3, [pc, #408]	; (8002aac <HAL_GPIO_Init+0x324>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	4a65      	ldr	r2, [pc, #404]	; (8002aac <HAL_GPIO_Init+0x324>)
 8002918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800291c:	6453      	str	r3, [r2, #68]	; 0x44
 800291e:	4b63      	ldr	r3, [pc, #396]	; (8002aac <HAL_GPIO_Init+0x324>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800292a:	4a61      	ldr	r2, [pc, #388]	; (8002ab0 <HAL_GPIO_Init+0x328>)
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	089b      	lsrs	r3, r3, #2
 8002930:	3302      	adds	r3, #2
 8002932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	220f      	movs	r2, #15
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <HAL_GPIO_Init+0x32c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d037      	beq.n	80029c6 <HAL_GPIO_Init+0x23e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a57      	ldr	r2, [pc, #348]	; (8002ab8 <HAL_GPIO_Init+0x330>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d031      	beq.n	80029c2 <HAL_GPIO_Init+0x23a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a56      	ldr	r2, [pc, #344]	; (8002abc <HAL_GPIO_Init+0x334>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d02b      	beq.n	80029be <HAL_GPIO_Init+0x236>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a55      	ldr	r2, [pc, #340]	; (8002ac0 <HAL_GPIO_Init+0x338>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d025      	beq.n	80029ba <HAL_GPIO_Init+0x232>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a54      	ldr	r2, [pc, #336]	; (8002ac4 <HAL_GPIO_Init+0x33c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01f      	beq.n	80029b6 <HAL_GPIO_Init+0x22e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a53      	ldr	r2, [pc, #332]	; (8002ac8 <HAL_GPIO_Init+0x340>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d019      	beq.n	80029b2 <HAL_GPIO_Init+0x22a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a52      	ldr	r2, [pc, #328]	; (8002acc <HAL_GPIO_Init+0x344>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d013      	beq.n	80029ae <HAL_GPIO_Init+0x226>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a51      	ldr	r2, [pc, #324]	; (8002ad0 <HAL_GPIO_Init+0x348>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00d      	beq.n	80029aa <HAL_GPIO_Init+0x222>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a50      	ldr	r2, [pc, #320]	; (8002ad4 <HAL_GPIO_Init+0x34c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d007      	beq.n	80029a6 <HAL_GPIO_Init+0x21e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a4f      	ldr	r2, [pc, #316]	; (8002ad8 <HAL_GPIO_Init+0x350>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_GPIO_Init+0x21a>
 800299e:	2309      	movs	r3, #9
 80029a0:	e012      	b.n	80029c8 <HAL_GPIO_Init+0x240>
 80029a2:	230a      	movs	r3, #10
 80029a4:	e010      	b.n	80029c8 <HAL_GPIO_Init+0x240>
 80029a6:	2308      	movs	r3, #8
 80029a8:	e00e      	b.n	80029c8 <HAL_GPIO_Init+0x240>
 80029aa:	2307      	movs	r3, #7
 80029ac:	e00c      	b.n	80029c8 <HAL_GPIO_Init+0x240>
 80029ae:	2306      	movs	r3, #6
 80029b0:	e00a      	b.n	80029c8 <HAL_GPIO_Init+0x240>
 80029b2:	2305      	movs	r3, #5
 80029b4:	e008      	b.n	80029c8 <HAL_GPIO_Init+0x240>
 80029b6:	2304      	movs	r3, #4
 80029b8:	e006      	b.n	80029c8 <HAL_GPIO_Init+0x240>
 80029ba:	2303      	movs	r3, #3
 80029bc:	e004      	b.n	80029c8 <HAL_GPIO_Init+0x240>
 80029be:	2302      	movs	r3, #2
 80029c0:	e002      	b.n	80029c8 <HAL_GPIO_Init+0x240>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_GPIO_Init+0x240>
 80029c6:	2300      	movs	r3, #0
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	f002 0203 	and.w	r2, r2, #3
 80029ce:	0092      	lsls	r2, r2, #2
 80029d0:	4093      	lsls	r3, r2
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029d8:	4935      	ldr	r1, [pc, #212]	; (8002ab0 <HAL_GPIO_Init+0x328>)
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	3302      	adds	r3, #2
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029e6:	4b3d      	ldr	r3, [pc, #244]	; (8002adc <HAL_GPIO_Init+0x354>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a0a:	4a34      	ldr	r2, [pc, #208]	; (8002adc <HAL_GPIO_Init+0x354>)
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a10:	4b32      	ldr	r3, [pc, #200]	; (8002adc <HAL_GPIO_Init+0x354>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a34:	4a29      	ldr	r2, [pc, #164]	; (8002adc <HAL_GPIO_Init+0x354>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a3a:	4b28      	ldr	r3, [pc, #160]	; (8002adc <HAL_GPIO_Init+0x354>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a5e:	4a1f      	ldr	r2, [pc, #124]	; (8002adc <HAL_GPIO_Init+0x354>)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a64:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <HAL_GPIO_Init+0x354>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a88:	4a14      	ldr	r2, [pc, #80]	; (8002adc <HAL_GPIO_Init+0x354>)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3301      	adds	r3, #1
 8002a92:	61fb      	str	r3, [r7, #28]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	2b0f      	cmp	r3, #15
 8002a98:	f67f ae86 	bls.w	80027a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	40020000 	.word	0x40020000
 8002ab8:	40020400 	.word	0x40020400
 8002abc:	40020800 	.word	0x40020800
 8002ac0:	40020c00 	.word	0x40020c00
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40021400 	.word	0x40021400
 8002acc:	40021800 	.word	0x40021800
 8002ad0:	40021c00 	.word	0x40021c00
 8002ad4:	40022000 	.word	0x40022000
 8002ad8:	40022400 	.word	0x40022400
 8002adc:	40013c00 	.word	0x40013c00

08002ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]
 8002aec:	4613      	mov	r3, r2
 8002aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002af0:	787b      	ldrb	r3, [r7, #1]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002afc:	e003      	b.n	8002b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002afe:	887b      	ldrh	r3, [r7, #2]
 8002b00:	041a      	lsls	r2, r3, #16
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	619a      	str	r2, [r3, #24]
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b085      	sub	sp, #20
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b24:	887a      	ldrh	r2, [r7, #2]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	041a      	lsls	r2, r3, #16
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	887b      	ldrh	r3, [r7, #2]
 8002b32:	400b      	ands	r3, r1
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	619a      	str	r2, [r3, #24]
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b56:	6013      	str	r3, [r2, #0]
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40007000 	.word	0x40007000

08002b68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b70:	2300      	movs	r3, #0
 8002b72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e29b      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8087 	beq.w	8002c9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b8c:	4b96      	ldr	r3, [pc, #600]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d00c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b98:	4b93      	ldr	r3, [pc, #588]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d112      	bne.n	8002bca <HAL_RCC_OscConfig+0x62>
 8002ba4:	4b90      	ldr	r3, [pc, #576]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb0:	d10b      	bne.n	8002bca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb2:	4b8d      	ldr	r3, [pc, #564]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d06c      	beq.n	8002c98 <HAL_RCC_OscConfig+0x130>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d168      	bne.n	8002c98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e275      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCC_OscConfig+0x7a>
 8002bd4:	4b84      	ldr	r3, [pc, #528]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a83      	ldr	r2, [pc, #524]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	e02e      	b.n	8002c40 <HAL_RCC_OscConfig+0xd8>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x9c>
 8002bea:	4b7f      	ldr	r3, [pc, #508]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a7e      	ldr	r2, [pc, #504]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b7c      	ldr	r3, [pc, #496]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a7b      	ldr	r2, [pc, #492]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e01d      	b.n	8002c40 <HAL_RCC_OscConfig+0xd8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0xc0>
 8002c0e:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a75      	ldr	r2, [pc, #468]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	4b73      	ldr	r3, [pc, #460]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a72      	ldr	r2, [pc, #456]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0xd8>
 8002c28:	4b6f      	ldr	r3, [pc, #444]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a6e      	ldr	r2, [pc, #440]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b6c      	ldr	r3, [pc, #432]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a6b      	ldr	r2, [pc, #428]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d013      	beq.n	8002c70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c48:	f7ff f852 	bl	8001cf0 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c50:	f7ff f84e 	bl	8001cf0 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b64      	cmp	r3, #100	; 0x64
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e229      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b61      	ldr	r3, [pc, #388]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0xe8>
 8002c6e:	e014      	b.n	8002c9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7ff f83e 	bl	8001cf0 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c78:	f7ff f83a 	bl	8001cf0 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e215      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8a:	4b57      	ldr	r3, [pc, #348]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x110>
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d069      	beq.n	8002d7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ca6:	4b50      	ldr	r3, [pc, #320]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb2:	4b4d      	ldr	r3, [pc, #308]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d11c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x190>
 8002cbe:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d116      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cca:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x17a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d001      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e1e9      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce2:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	493d      	ldr	r1, [pc, #244]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	e040      	b.n	8002d7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d023      	beq.n	8002d48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d00:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a38      	ldr	r2, [pc, #224]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fff0 	bl	8001cf0 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d14:	f7fe ffec 	bl	8001cf0 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e1c7      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d26:	4b30      	ldr	r3, [pc, #192]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4929      	ldr	r1, [pc, #164]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
 8002d46:	e018      	b.n	8002d7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d48:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a26      	ldr	r2, [pc, #152]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7fe ffcc 	bl	8001cf0 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7fe ffc8 	bl	8001cf0 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e1a3      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f0      	bne.n	8002d5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d038      	beq.n	8002df8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d019      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d8e:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d92:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fe ffa9 	bl	8001cf0 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da2:	f7fe ffa5 	bl	8001cf0 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e180      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x23a>
 8002dc0:	e01a      	b.n	8002df8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc6:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <HAL_RCC_OscConfig+0x280>)
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7fe ff8f 	bl	8001cf0 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd6:	f7fe ff8b 	bl	8001cf0 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d903      	bls.n	8002dec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e166      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>
 8002de8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dec:	4b92      	ldr	r3, [pc, #584]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ee      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 80a4 	beq.w	8002f4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e06:	4b8c      	ldr	r3, [pc, #560]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10d      	bne.n	8002e2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e12:	4b89      	ldr	r3, [pc, #548]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	4a88      	ldr	r2, [pc, #544]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1e:	4b86      	ldr	r3, [pc, #536]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2e:	4b83      	ldr	r3, [pc, #524]	; (800303c <HAL_RCC_OscConfig+0x4d4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d118      	bne.n	8002e6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e3a:	4b80      	ldr	r3, [pc, #512]	; (800303c <HAL_RCC_OscConfig+0x4d4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a7f      	ldr	r2, [pc, #508]	; (800303c <HAL_RCC_OscConfig+0x4d4>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e46:	f7fe ff53 	bl	8001cf0 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4e:	f7fe ff4f 	bl	8001cf0 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b64      	cmp	r3, #100	; 0x64
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e12a      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e60:	4b76      	ldr	r3, [pc, #472]	; (800303c <HAL_RCC_OscConfig+0x4d4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0f0      	beq.n	8002e4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d106      	bne.n	8002e82 <HAL_RCC_OscConfig+0x31a>
 8002e74:	4b70      	ldr	r3, [pc, #448]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	4a6f      	ldr	r2, [pc, #444]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e80:	e02d      	b.n	8002ede <HAL_RCC_OscConfig+0x376>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x33c>
 8002e8a:	4b6b      	ldr	r3, [pc, #428]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	4a6a      	ldr	r2, [pc, #424]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70
 8002e96:	4b68      	ldr	r3, [pc, #416]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	4a67      	ldr	r2, [pc, #412]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002e9c:	f023 0304 	bic.w	r3, r3, #4
 8002ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea2:	e01c      	b.n	8002ede <HAL_RCC_OscConfig+0x376>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d10c      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x35e>
 8002eac:	4b62      	ldr	r3, [pc, #392]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	4a61      	ldr	r2, [pc, #388]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002eb2:	f043 0304 	orr.w	r3, r3, #4
 8002eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb8:	4b5f      	ldr	r3, [pc, #380]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4a5e      	ldr	r2, [pc, #376]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec4:	e00b      	b.n	8002ede <HAL_RCC_OscConfig+0x376>
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a5b      	ldr	r2, [pc, #364]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed2:	4b59      	ldr	r3, [pc, #356]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a58      	ldr	r2, [pc, #352]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d015      	beq.n	8002f12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7fe ff03 	bl	8001cf0 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fe feff 	bl	8001cf0 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e0d8      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	4b4c      	ldr	r3, [pc, #304]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ee      	beq.n	8002eee <HAL_RCC_OscConfig+0x386>
 8002f10:	e014      	b.n	8002f3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f12:	f7fe feed 	bl	8001cf0 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe fee9 	bl	8001cf0 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e0c2      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f30:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ee      	bne.n	8002f1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d105      	bne.n	8002f4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f42:	4b3d      	ldr	r3, [pc, #244]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	4a3c      	ldr	r2, [pc, #240]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 80ae 	beq.w	80030b4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f58:	4b37      	ldr	r3, [pc, #220]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 030c 	and.w	r3, r3, #12
 8002f60:	2b08      	cmp	r3, #8
 8002f62:	d06d      	beq.n	8003040 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d14b      	bne.n	8003004 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6c:	4b32      	ldr	r3, [pc, #200]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a31      	ldr	r2, [pc, #196]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe feba 	bl	8001cf0 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fe feb6 	bl	8001cf0 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e091      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f92:	4b29      	ldr	r3, [pc, #164]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69da      	ldr	r2, [r3, #28]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	019b      	lsls	r3, r3, #6
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	041b      	lsls	r3, r3, #16
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	061b      	lsls	r3, r3, #24
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	071b      	lsls	r3, r3, #28
 8002fca:	491b      	ldr	r1, [pc, #108]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a18      	ldr	r2, [pc, #96]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fe88 	bl	8001cf0 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fe fe84 	bl	8001cf0 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e05f      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x47c>
 8003002:	e057      	b.n	80030b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0b      	ldr	r2, [pc, #44]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 800300a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800300e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe fe6e 	bl	8001cf0 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003018:	f7fe fe6a 	bl	8001cf0 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e045      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302a:	4b03      	ldr	r3, [pc, #12]	; (8003038 <HAL_RCC_OscConfig+0x4d0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x4b0>
 8003036:	e03d      	b.n	80030b4 <HAL_RCC_OscConfig+0x54c>
 8003038:	40023800 	.word	0x40023800
 800303c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003040:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <HAL_RCC_OscConfig+0x558>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d030      	beq.n	80030b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d129      	bne.n	80030b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d122      	bne.n	80030b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003070:	4013      	ands	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003076:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003078:	4293      	cmp	r3, r2
 800307a:	d119      	bne.n	80030b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	3b01      	subs	r3, #1
 800308a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d10f      	bne.n	80030b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023800 	.word	0x40023800

080030c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0d0      	b.n	800327e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030dc:	4b6a      	ldr	r3, [pc, #424]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d910      	bls.n	800310c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ea:	4b67      	ldr	r3, [pc, #412]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 020f 	bic.w	r2, r3, #15
 80030f2:	4965      	ldr	r1, [pc, #404]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b63      	ldr	r3, [pc, #396]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0b8      	b.n	800327e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003124:	4b59      	ldr	r3, [pc, #356]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a58      	ldr	r2, [pc, #352]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 800312a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800312e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800313c:	4b53      	ldr	r3, [pc, #332]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a52      	ldr	r2, [pc, #328]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 8003142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003146:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b50      	ldr	r3, [pc, #320]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	494d      	ldr	r1, [pc, #308]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d040      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b47      	ldr	r3, [pc, #284]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d115      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e07f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d107      	bne.n	8003196 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	4b41      	ldr	r3, [pc, #260]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e073      	b.n	800327e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003196:	4b3d      	ldr	r3, [pc, #244]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e06b      	b.n	800327e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031a6:	4b39      	ldr	r3, [pc, #228]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f023 0203 	bic.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4936      	ldr	r1, [pc, #216]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b8:	f7fe fd9a 	bl	8001cf0 <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c0:	f7fe fd96 	bl	8001cf0 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e053      	b.n	800327e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	4b2d      	ldr	r3, [pc, #180]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 020c 	and.w	r2, r3, #12
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1eb      	bne.n	80031c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031e8:	4b27      	ldr	r3, [pc, #156]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d210      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b24      	ldr	r3, [pc, #144]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 020f 	bic.w	r2, r3, #15
 80031fe:	4922      	ldr	r1, [pc, #136]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b20      	ldr	r3, [pc, #128]	; (8003288 <HAL_RCC_ClockConfig+0x1c4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e032      	b.n	800327e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4916      	ldr	r1, [pc, #88]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003242:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	490e      	ldr	r1, [pc, #56]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003256:	f000 f821 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800325a:	4602      	mov	r2, r0
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_ClockConfig+0x1c8>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	490a      	ldr	r1, [pc, #40]	; (8003290 <HAL_RCC_ClockConfig+0x1cc>)
 8003268:	5ccb      	ldrb	r3, [r1, r3]
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	4a09      	ldr	r2, [pc, #36]	; (8003294 <HAL_RCC_ClockConfig+0x1d0>)
 8003270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_RCC_ClockConfig+0x1d4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe fcf6 	bl	8001c68 <HAL_InitTick>

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023c00 	.word	0x40023c00
 800328c:	40023800 	.word	0x40023800
 8003290:	0800a6f8 	.word	0x0800a6f8
 8003294:	20000000 	.word	0x20000000
 8003298:	20000014 	.word	0x20000014

0800329c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800329c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	607b      	str	r3, [r7, #4]
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	2300      	movs	r3, #0
 80032ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b4:	4b67      	ldr	r3, [pc, #412]	; (8003454 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d00d      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x40>
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	f200 80bd 	bhi.w	8003440 <HAL_RCC_GetSysClockFreq+0x1a4>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d003      	beq.n	80032d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ce:	e0b7      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b61      	ldr	r3, [pc, #388]	; (8003458 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032d2:	60bb      	str	r3, [r7, #8]
      break;
 80032d4:	e0b7      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032d6:	4b61      	ldr	r3, [pc, #388]	; (800345c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80032d8:	60bb      	str	r3, [r7, #8]
      break;
 80032da:	e0b4      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032dc:	4b5d      	ldr	r3, [pc, #372]	; (8003454 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032e6:	4b5b      	ldr	r3, [pc, #364]	; (8003454 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d04d      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f2:	4b58      	ldr	r3, [pc, #352]	; (8003454 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	099b      	lsrs	r3, r3, #6
 80032f8:	461a      	mov	r2, r3
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003302:	f04f 0100 	mov.w	r1, #0
 8003306:	ea02 0800 	and.w	r8, r2, r0
 800330a:	ea03 0901 	and.w	r9, r3, r1
 800330e:	4640      	mov	r0, r8
 8003310:	4649      	mov	r1, r9
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	014b      	lsls	r3, r1, #5
 800331c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003320:	0142      	lsls	r2, r0, #5
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	ebb0 0008 	subs.w	r0, r0, r8
 800332a:	eb61 0109 	sbc.w	r1, r1, r9
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	018b      	lsls	r3, r1, #6
 8003338:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800333c:	0182      	lsls	r2, r0, #6
 800333e:	1a12      	subs	r2, r2, r0
 8003340:	eb63 0301 	sbc.w	r3, r3, r1
 8003344:	f04f 0000 	mov.w	r0, #0
 8003348:	f04f 0100 	mov.w	r1, #0
 800334c:	00d9      	lsls	r1, r3, #3
 800334e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003352:	00d0      	lsls	r0, r2, #3
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	eb12 0208 	adds.w	r2, r2, r8
 800335c:	eb43 0309 	adc.w	r3, r3, r9
 8003360:	f04f 0000 	mov.w	r0, #0
 8003364:	f04f 0100 	mov.w	r1, #0
 8003368:	0259      	lsls	r1, r3, #9
 800336a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800336e:	0250      	lsls	r0, r2, #9
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4610      	mov	r0, r2
 8003376:	4619      	mov	r1, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	461a      	mov	r2, r3
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	f7fd f972 	bl	8000668 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4613      	mov	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e04a      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338e:	4b31      	ldr	r3, [pc, #196]	; (8003454 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	099b      	lsrs	r3, r3, #6
 8003394:	461a      	mov	r2, r3
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800339e:	f04f 0100 	mov.w	r1, #0
 80033a2:	ea02 0400 	and.w	r4, r2, r0
 80033a6:	ea03 0501 	and.w	r5, r3, r1
 80033aa:	4620      	mov	r0, r4
 80033ac:	4629      	mov	r1, r5
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	014b      	lsls	r3, r1, #5
 80033b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033bc:	0142      	lsls	r2, r0, #5
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	1b00      	subs	r0, r0, r4
 80033c4:	eb61 0105 	sbc.w	r1, r1, r5
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	018b      	lsls	r3, r1, #6
 80033d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033d6:	0182      	lsls	r2, r0, #6
 80033d8:	1a12      	subs	r2, r2, r0
 80033da:	eb63 0301 	sbc.w	r3, r3, r1
 80033de:	f04f 0000 	mov.w	r0, #0
 80033e2:	f04f 0100 	mov.w	r1, #0
 80033e6:	00d9      	lsls	r1, r3, #3
 80033e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033ec:	00d0      	lsls	r0, r2, #3
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	1912      	adds	r2, r2, r4
 80033f4:	eb45 0303 	adc.w	r3, r5, r3
 80033f8:	f04f 0000 	mov.w	r0, #0
 80033fc:	f04f 0100 	mov.w	r1, #0
 8003400:	0299      	lsls	r1, r3, #10
 8003402:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003406:	0290      	lsls	r0, r2, #10
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4610      	mov	r0, r2
 800340e:	4619      	mov	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	461a      	mov	r2, r3
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	f7fd f926 	bl	8000668 <__aeabi_uldivmod>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4613      	mov	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	0c1b      	lsrs	r3, r3, #16
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	3301      	adds	r3, #1
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	60bb      	str	r3, [r7, #8]
      break;
 800343e:	e002      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003440:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003442:	60bb      	str	r3, [r7, #8]
      break;
 8003444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003446:	68bb      	ldr	r3, [r7, #8]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	00f42400 	.word	0x00f42400
 800345c:	007a1200 	.word	0x007a1200

08003460 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003464:	4b03      	ldr	r3, [pc, #12]	; (8003474 <HAL_RCC_GetHCLKFreq+0x14>)
 8003466:	681b      	ldr	r3, [r3, #0]
}
 8003468:	4618      	mov	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20000000 	.word	0x20000000

08003478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800347c:	f7ff fff0 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 8003480:	4602      	mov	r2, r0
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	0a9b      	lsrs	r3, r3, #10
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	4903      	ldr	r1, [pc, #12]	; (800349c <HAL_RCC_GetPCLK1Freq+0x24>)
 800348e:	5ccb      	ldrb	r3, [r1, r3]
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003494:	4618      	mov	r0, r3
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40023800 	.word	0x40023800
 800349c:	0800a708 	.word	0x0800a708

080034a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034a4:	f7ff ffdc 	bl	8003460 <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	0b5b      	lsrs	r3, r3, #13
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4903      	ldr	r1, [pc, #12]	; (80034c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034bc:	4618      	mov	r0, r3
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40023800 	.word	0x40023800
 80034c4:	0800a708 	.word	0x0800a708

080034c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d012      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034f0:	4b69      	ldr	r3, [pc, #420]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a68      	ldr	r2, [pc, #416]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80034fa:	6093      	str	r3, [r2, #8]
 80034fc:	4b66      	ldr	r3, [pc, #408]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003504:	4964      	ldr	r1, [pc, #400]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003512:	2301      	movs	r3, #1
 8003514:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d017      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003522:	4b5d      	ldr	r3, [pc, #372]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003528:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003530:	4959      	ldr	r1, [pc, #356]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003540:	d101      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003542:	2301      	movs	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800354e:	2301      	movs	r3, #1
 8003550:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d017      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800355e:	4b4e      	ldr	r3, [pc, #312]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003564:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	494a      	ldr	r1, [pc, #296]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800357c:	d101      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800357e:	2301      	movs	r3, #1
 8003580:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800358a:	2301      	movs	r3, #1
 800358c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800359a:	2301      	movs	r3, #1
 800359c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 808b 	beq.w	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035ac:	4b3a      	ldr	r3, [pc, #232]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	4a39      	ldr	r2, [pc, #228]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b6:	6413      	str	r3, [r2, #64]	; 0x40
 80035b8:	4b37      	ldr	r3, [pc, #220]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035c4:	4b35      	ldr	r3, [pc, #212]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a34      	ldr	r2, [pc, #208]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d0:	f7fe fb8e 	bl	8001cf0 <HAL_GetTick>
 80035d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d8:	f7fe fb8a 	bl	8001cf0 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e38f      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035ea:	4b2c      	ldr	r3, [pc, #176]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035f6:	4b28      	ldr	r3, [pc, #160]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d035      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	429a      	cmp	r2, r3
 8003612:	d02e      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003614:	4b20      	ldr	r3, [pc, #128]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800361e:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	4a1d      	ldr	r2, [pc, #116]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003628:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800362a:	4b1b      	ldr	r3, [pc, #108]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a1a      	ldr	r2, [pc, #104]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003634:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003636:	4a18      	ldr	r2, [pc, #96]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800363c:	4b16      	ldr	r3, [pc, #88]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b01      	cmp	r3, #1
 8003646:	d114      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fe fb52 	bl	8001cf0 <HAL_GetTick>
 800364c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364e:	e00a      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003650:	f7fe fb4e 	bl	8001cf0 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	; 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e351      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003666:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0ee      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800367e:	d111      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800368c:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800368e:	400b      	ands	r3, r1
 8003690:	4901      	ldr	r1, [pc, #4]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
 8003696:	e00b      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003698:	40023800 	.word	0x40023800
 800369c:	40007000 	.word	0x40007000
 80036a0:	0ffffcff 	.word	0x0ffffcff
 80036a4:	4bb3      	ldr	r3, [pc, #716]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4ab2      	ldr	r2, [pc, #712]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036ae:	6093      	str	r3, [r2, #8]
 80036b0:	4bb0      	ldr	r3, [pc, #704]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036bc:	49ad      	ldr	r1, [pc, #692]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d010      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036ce:	4ba9      	ldr	r3, [pc, #676]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d4:	4aa7      	ldr	r2, [pc, #668]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036de:	4ba5      	ldr	r3, [pc, #660]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	49a2      	ldr	r1, [pc, #648]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036fc:	4b9d      	ldr	r3, [pc, #628]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800370a:	499a      	ldr	r1, [pc, #616]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800371e:	4b95      	ldr	r3, [pc, #596]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800372c:	4991      	ldr	r1, [pc, #580]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003740:	4b8c      	ldr	r3, [pc, #560]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800374e:	4989      	ldr	r1, [pc, #548]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003762:	4b84      	ldr	r3, [pc, #528]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003768:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	4980      	ldr	r1, [pc, #512]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003784:	4b7b      	ldr	r3, [pc, #492]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378a:	f023 0203 	bic.w	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	4978      	ldr	r1, [pc, #480]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037a6:	4b73      	ldr	r3, [pc, #460]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ac:	f023 020c 	bic.w	r2, r3, #12
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b4:	496f      	ldr	r1, [pc, #444]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037c8:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d6:	4967      	ldr	r1, [pc, #412]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037ea:	4b62      	ldr	r3, [pc, #392]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f8:	495e      	ldr	r1, [pc, #376]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800380c:	4b59      	ldr	r3, [pc, #356]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381a:	4956      	ldr	r1, [pc, #344]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800382e:	4b51      	ldr	r3, [pc, #324]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383c:	494d      	ldr	r1, [pc, #308]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003850:	4b48      	ldr	r3, [pc, #288]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385e:	4945      	ldr	r1, [pc, #276]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003872:	4b40      	ldr	r3, [pc, #256]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003878:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003880:	493c      	ldr	r1, [pc, #240]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003894:	4b37      	ldr	r3, [pc, #220]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038a2:	4934      	ldr	r1, [pc, #208]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d011      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038b6:	4b2f      	ldr	r3, [pc, #188]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038c4:	492b      	ldr	r1, [pc, #172]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d4:	d101      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038d6:	2301      	movs	r3, #1
 80038d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038e6:	2301      	movs	r3, #1
 80038e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038f6:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003904:	491b      	ldr	r1, [pc, #108]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00b      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003918:	4b16      	ldr	r3, [pc, #88]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003928:	4912      	ldr	r1, [pc, #72]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00b      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800393c:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800394c:	4909      	ldr	r1, [pc, #36]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00f      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003966:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	e002      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	4986      	ldr	r1, [pc, #536]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00b      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800398c:	4b81      	ldr	r3, [pc, #516]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800398e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003992:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399c:	497d      	ldr	r1, [pc, #500]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d006      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80d6 	beq.w	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039b8:	4b76      	ldr	r3, [pc, #472]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a75      	ldr	r2, [pc, #468]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c4:	f7fe f994 	bl	8001cf0 <HAL_GetTick>
 80039c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039cc:	f7fe f990 	bl	8001cf0 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	; 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e195      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039de:	4b6d      	ldr	r3, [pc, #436]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d021      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d11d      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039fe:	4b65      	ldr	r3, [pc, #404]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a0c:	4b61      	ldr	r3, [pc, #388]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a12:	0e1b      	lsrs	r3, r3, #24
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	019a      	lsls	r2, r3, #6
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	041b      	lsls	r3, r3, #16
 8003a24:	431a      	orrs	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	061b      	lsls	r3, r3, #24
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	071b      	lsls	r3, r3, #28
 8003a32:	4958      	ldr	r1, [pc, #352]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d004      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a4e:	d00a      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d02e      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a64:	d129      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a66:	4b4b      	ldr	r3, [pc, #300]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a6c:	0c1b      	lsrs	r3, r3, #16
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a74:	4b47      	ldr	r3, [pc, #284]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7a:	0f1b      	lsrs	r3, r3, #28
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	019a      	lsls	r2, r3, #6
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	041b      	lsls	r3, r3, #16
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	061b      	lsls	r3, r3, #24
 8003a94:	431a      	orrs	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	071b      	lsls	r3, r3, #28
 8003a9a:	493e      	ldr	r1, [pc, #248]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003aa2:	4b3c      	ldr	r3, [pc, #240]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa8:	f023 021f 	bic.w	r2, r3, #31
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	4938      	ldr	r1, [pc, #224]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01d      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ac6:	4b33      	ldr	r3, [pc, #204]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003acc:	0e1b      	lsrs	r3, r3, #24
 8003ace:	f003 030f 	and.w	r3, r3, #15
 8003ad2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ad4:	4b2f      	ldr	r3, [pc, #188]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ada:	0f1b      	lsrs	r3, r3, #28
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	019a      	lsls	r2, r3, #6
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	041b      	lsls	r3, r3, #16
 8003aee:	431a      	orrs	r2, r3
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	061b      	lsls	r3, r3, #24
 8003af4:	431a      	orrs	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	071b      	lsls	r3, r3, #28
 8003afa:	4926      	ldr	r1, [pc, #152]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d011      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	019a      	lsls	r2, r3, #6
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	041b      	lsls	r3, r3, #16
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	061b      	lsls	r3, r3, #24
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	071b      	lsls	r3, r3, #28
 8003b2a:	491a      	ldr	r1, [pc, #104]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b32:	4b18      	ldr	r3, [pc, #96]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b3e:	f7fe f8d7 	bl	8001cf0 <HAL_GetTick>
 8003b42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b46:	f7fe f8d3 	bl	8001cf0 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b64      	cmp	r3, #100	; 0x64
 8003b52:	d901      	bls.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e0d8      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b58:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	f040 80ce 	bne.w	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b6c:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a08      	ldr	r2, [pc, #32]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b78:	f7fe f8ba 	bl	8001cf0 <HAL_GetTick>
 8003b7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b7e:	e00b      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b80:	f7fe f8b6 	bl	8001cf0 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d904      	bls.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e0bb      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b98:	4b5e      	ldr	r3, [pc, #376]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ba4:	d0ec      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d02e      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d12a      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bce:	4b51      	ldr	r3, [pc, #324]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	0c1b      	lsrs	r3, r3, #16
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bdc:	4b4d      	ldr	r3, [pc, #308]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	0f1b      	lsrs	r3, r3, #28
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	019a      	lsls	r2, r3, #6
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	041b      	lsls	r3, r3, #16
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	061b      	lsls	r3, r3, #24
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	071b      	lsls	r3, r3, #28
 8003c02:	4944      	ldr	r1, [pc, #272]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c0a:	4b42      	ldr	r3, [pc, #264]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	493d      	ldr	r1, [pc, #244]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d022      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c38:	d11d      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c3a:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	0e1b      	lsrs	r3, r3, #24
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c48:	4b32      	ldr	r3, [pc, #200]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4e:	0f1b      	lsrs	r3, r3, #28
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	019a      	lsls	r2, r3, #6
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	431a      	orrs	r2, r3
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	061b      	lsls	r3, r3, #24
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	071b      	lsls	r3, r3, #28
 8003c6e:	4929      	ldr	r1, [pc, #164]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d028      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c82:	4b24      	ldr	r3, [pc, #144]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	0e1b      	lsrs	r3, r3, #24
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c90:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	0c1b      	lsrs	r3, r3, #16
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	019a      	lsls	r2, r3, #6
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	041b      	lsls	r3, r3, #16
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	061b      	lsls	r3, r3, #24
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	071b      	lsls	r3, r3, #28
 8003cb6:	4917      	ldr	r1, [pc, #92]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cbe:	4b15      	ldr	r3, [pc, #84]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	4911      	ldr	r1, [pc, #68]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0e      	ldr	r2, [pc, #56]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce0:	f7fe f806 	bl	8001cf0 <HAL_GetTick>
 8003ce4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ce8:	f7fe f802 	bl	8001cf0 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	; 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e007      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d06:	d1ef      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800

08003d18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e09d      	b.n	8003e66 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d108      	bne.n	8003d44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d3a:	d009      	beq.n	8003d50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	61da      	str	r2, [r3, #28]
 8003d42:	e005      	b.n	8003d50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fd fa50 	bl	8001210 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d90:	d902      	bls.n	8003d98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	e002      	b.n	8003d9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003da6:	d007      	beq.n	8003db8 <HAL_SPI_Init+0xa0>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003db0:	d002      	beq.n	8003db8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfa:	ea42 0103 	orr.w	r1, r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e02:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	0c1b      	lsrs	r3, r3, #16
 8003e14:	f003 0204 	and.w	r2, r3, #4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e34:	ea42 0103 	orr.w	r1, r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d110      	bne.n	8003eac <HAL_SPI_Receive_DMA+0x3c>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e92:	d10b      	bne.n	8003eac <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2204      	movs	r2, #4
 8003e98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f908 	bl	80040b8 <HAL_SPI_TransmitReceive_DMA>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	e0fb      	b.n	80040a4 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_SPI_Receive_DMA+0x4a>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e0f4      	b.n	80040a4 <HAL_SPI_Receive_DMA+0x234>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d002      	beq.n	8003ed4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ed2:	e0e2      	b.n	800409a <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_SPI_Receive_DMA+0x70>
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d102      	bne.n	8003ee6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ee4:	e0d9      	b.n	800409a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2204      	movs	r2, #4
 8003eea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	88fa      	ldrh	r2, [r7, #6]
 8003efe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	88fa      	ldrh	r2, [r7, #6]
 8003f06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2a:	d10f      	bne.n	8003f4c <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f5a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f64:	d908      	bls.n	8003f78 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	e042      	b.n	8003ffe <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f86:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f92:	d134      	bne.n	8003ffe <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fa2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d111      	bne.n	8003fd8 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003fd6:	e012      	b.n	8003ffe <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fe6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	085b      	lsrs	r3, r3, #1
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004002:	4a2a      	ldr	r2, [pc, #168]	; (80040ac <HAL_SPI_Receive_DMA+0x23c>)
 8004004:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	4a29      	ldr	r2, [pc, #164]	; (80040b0 <HAL_SPI_Receive_DMA+0x240>)
 800400c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004012:	4a28      	ldr	r2, [pc, #160]	; (80040b4 <HAL_SPI_Receive_DMA+0x244>)
 8004014:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401a:	2200      	movs	r2, #0
 800401c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	330c      	adds	r3, #12
 8004028:	4619      	mov	r1, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004036:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004038:	f7fe f84a 	bl	80020d0 <HAL_DMA_Start_IT>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00c      	beq.n	800405c <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004046:	f043 0210 	orr.w	r2, r3, #16
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800405a:	e01e      	b.n	800409a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004066:	2b40      	cmp	r3, #64	; 0x40
 8004068:	d007      	beq.n	800407a <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004078:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f042 0220 	orr.w	r2, r2, #32
 8004088:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	0800475d 	.word	0x0800475d
 80040b0:	08004621 	.word	0x08004621
 80040b4:	08004795 	.word	0x08004795

080040b8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e16c      	b.n	80043b2 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040e6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80040ee:	7dbb      	ldrb	r3, [r7, #22]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d00d      	beq.n	8004110 <HAL_SPI_TransmitReceive_DMA+0x58>
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fa:	d106      	bne.n	800410a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d102      	bne.n	800410a <HAL_SPI_TransmitReceive_DMA+0x52>
 8004104:	7dbb      	ldrb	r3, [r7, #22]
 8004106:	2b04      	cmp	r3, #4
 8004108:	d002      	beq.n	8004110 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800410a:	2302      	movs	r3, #2
 800410c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800410e:	e14b      	b.n	80043a8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800411c:	887b      	ldrh	r3, [r7, #2]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d102      	bne.n	8004128 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004126:	e13f      	b.n	80043a8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b04      	cmp	r3, #4
 8004132:	d003      	beq.n	800413c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2205      	movs	r2, #5
 8004138:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	887a      	ldrh	r2, [r7, #2]
 800414c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	887a      	ldrh	r2, [r7, #2]
 8004152:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	887a      	ldrh	r2, [r7, #2]
 800415e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	887a      	ldrh	r2, [r7, #2]
 8004166:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004184:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800418e:	d908      	bls.n	80041a2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	e06f      	b.n	8004282 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041b0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041bc:	d126      	bne.n	800420c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10f      	bne.n	80041ea <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041d8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041de:	b29b      	uxth	r3, r3
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041e8:	e010      	b.n	800420c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041f8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	b29b      	uxth	r3, r3
 8004204:	3301      	adds	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004216:	d134      	bne.n	8004282 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004226:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800422e:	b29b      	uxth	r3, r3
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d111      	bne.n	800425c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004246:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800424e:	b29b      	uxth	r3, r3
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800425a:	e012      	b.n	8004282 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800426a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004272:	b29b      	uxth	r3, r3
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	b29b      	uxth	r3, r3
 8004278:	3301      	adds	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b04      	cmp	r3, #4
 800428c:	d108      	bne.n	80042a0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	4a4a      	ldr	r2, [pc, #296]	; (80043bc <HAL_SPI_TransmitReceive_DMA+0x304>)
 8004294:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429a:	4a49      	ldr	r2, [pc, #292]	; (80043c0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800429c:	63da      	str	r2, [r3, #60]	; 0x3c
 800429e:	e007      	b.n	80042b0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a4:	4a47      	ldr	r2, [pc, #284]	; (80043c4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	4a46      	ldr	r2, [pc, #280]	; (80043c8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80042ae:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b4:	4a45      	ldr	r2, [pc, #276]	; (80043cc <HAL_SPI_TransmitReceive_DMA+0x314>)
 80042b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042bc:	2200      	movs	r2, #0
 80042be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	4619      	mov	r1, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042d8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80042da:	f7fd fef9 	bl	80020d0 <HAL_DMA_Start_IT>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00c      	beq.n	80042fe <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e8:	f043 0210 	orr.w	r2, r3, #16
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80042fc:	e054      	b.n	80043a8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	2200      	movs	r2, #0
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431a:	2200      	movs	r2, #0
 800431c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	2200      	movs	r2, #0
 8004324:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	2200      	movs	r2, #0
 800432c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004336:	4619      	mov	r1, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004344:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004346:	f7fd fec3 	bl	80020d0 <HAL_DMA_Start_IT>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00c      	beq.n	800436a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004354:	f043 0210 	orr.w	r2, r3, #16
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004368:	e01e      	b.n	80043a8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	d007      	beq.n	8004388 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004386:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0220 	orr.w	r2, r2, #32
 8004396:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0202 	orr.w	r2, r2, #2
 80043a6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80043b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	0800475d 	.word	0x0800475d
 80043c0:	08004621 	.word	0x08004621
 80043c4:	08004779 	.word	0x08004779
 80043c8:	080046cb 	.word	0x080046cb
 80043cc:	08004795 	.word	0x08004795

080043d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	099b      	lsrs	r3, r3, #6
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10f      	bne.n	8004414 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	099b      	lsrs	r3, r3, #6
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d004      	beq.n	8004414 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4798      	blx	r3
    return;
 8004412:	e0d7      	b.n	80045c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00a      	beq.n	8004436 <HAL_SPI_IRQHandler+0x66>
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	09db      	lsrs	r3, r3, #7
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	4798      	blx	r3
    return;
 8004434:	e0c6      	b.n	80045c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10c      	bne.n	800445c <HAL_SPI_IRQHandler+0x8c>
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	099b      	lsrs	r3, r3, #6
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	0a1b      	lsrs	r3, r3, #8
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 80b4 	beq.w	80045c4 <HAL_SPI_IRQHandler+0x1f4>
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80ad 	beq.w	80045c4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	099b      	lsrs	r3, r3, #6
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d023      	beq.n	80044be <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b03      	cmp	r3, #3
 8004480:	d011      	beq.n	80044a6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004486:	f043 0204 	orr.w	r2, r3, #4
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	e00b      	b.n	80044be <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	693b      	ldr	r3, [r7, #16]
        return;
 80044bc:	e082      	b.n	80045c4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	095b      	lsrs	r3, r3, #5
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d014      	beq.n	80044f4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ce:	f043 0201 	orr.w	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	0a1b      	lsrs	r3, r3, #8
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00c      	beq.n	800451a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004504:	f043 0208 	orr.w	r2, r3, #8
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800450c:	2300      	movs	r3, #0
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	60bb      	str	r3, [r7, #8]
 8004518:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451e:	2b00      	cmp	r3, #0
 8004520:	d04f      	beq.n	80045c2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004530:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d104      	bne.n	800454e <HAL_SPI_IRQHandler+0x17e>
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d034      	beq.n	80045b8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0203 	bic.w	r2, r2, #3
 800455c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004562:	2b00      	cmp	r3, #0
 8004564:	d011      	beq.n	800458a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456a:	4a18      	ldr	r2, [pc, #96]	; (80045cc <HAL_SPI_IRQHandler+0x1fc>)
 800456c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd fe7c 	bl	8002270 <HAL_DMA_Abort_IT>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004582:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	2b00      	cmp	r3, #0
 8004590:	d016      	beq.n	80045c0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	4a0d      	ldr	r2, [pc, #52]	; (80045cc <HAL_SPI_IRQHandler+0x1fc>)
 8004598:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fd fe66 	bl	8002270 <HAL_DMA_Abort_IT>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80045b6:	e003      	b.n	80045c0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f827 	bl	800460c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80045be:	e000      	b.n	80045c2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80045c0:	bf00      	nop
    return;
 80045c2:	bf00      	nop
  }
}
 80045c4:	3720      	adds	r7, #32
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	080047d5 	.word	0x080047d5

080045d0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800462e:	f7fd fb5f 	bl	8001cf0 <HAL_GetTick>
 8004632:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004642:	d03c      	beq.n	80046be <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0220 	bic.w	r2, r2, #32
 8004652:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10d      	bne.n	8004678 <SPI_DMAReceiveCplt+0x58>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004664:	d108      	bne.n	8004678 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0203 	bic.w	r2, r2, #3
 8004674:	605a      	str	r2, [r3, #4]
 8004676:	e007      	b.n	8004688 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0201 	bic.w	r2, r2, #1
 8004686:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	2164      	movs	r1, #100	; 0x64
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f9d1 	bl	8004a34 <SPI_EndRxTransaction>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7ff ffa8 	bl	800460c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80046bc:	e002      	b.n	80046c4 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7fc fa7e 	bl	8000bc0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046d8:	f7fd fb0a 	bl	8001cf0 <HAL_GetTick>
 80046dc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ec:	d030      	beq.n	8004750 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0220 	bic.w	r2, r2, #32
 80046fc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	2164      	movs	r1, #100	; 0x64
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f9ee 	bl	8004ae4 <SPI_EndRxTxTransaction>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004712:	f043 0220 	orr.w	r2, r3, #32
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0203 	bic.w	r2, r2, #3
 8004728:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f7ff ff5f 	bl	800460c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800474e:	e002      	b.n	8004756 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f7ff ff3d 	bl	80045d0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f7ff ff3a 	bl	80045e4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f7ff ff36 	bl	80045f8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0203 	bic.w	r2, r2, #3
 80047b0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b6:	f043 0210 	orr.w	r2, r3, #16
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7ff ff20 	bl	800460c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f7ff ff0b 	bl	800460c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	4613      	mov	r3, r2
 800480e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004810:	f7fd fa6e 	bl	8001cf0 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	4413      	add	r3, r2
 800481e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004820:	f7fd fa66 	bl	8001cf0 <HAL_GetTick>
 8004824:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004826:	4b39      	ldr	r3, [pc, #228]	; (800490c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	015b      	lsls	r3, r3, #5
 800482c:	0d1b      	lsrs	r3, r3, #20
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	fb02 f303 	mul.w	r3, r2, r3
 8004834:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004836:	e054      	b.n	80048e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	d050      	beq.n	80048e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004840:	f7fd fa56 	bl	8001cf0 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	69fa      	ldr	r2, [r7, #28]
 800484c:	429a      	cmp	r2, r3
 800484e:	d902      	bls.n	8004856 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d13d      	bne.n	80048d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004864:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800486e:	d111      	bne.n	8004894 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004878:	d004      	beq.n	8004884 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004882:	d107      	bne.n	8004894 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004892:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489c:	d10f      	bne.n	80048be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e017      	b.n	8004902 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	3b01      	subs	r3, #1
 80048e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4013      	ands	r3, r2
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	bf0c      	ite	eq
 80048f2:	2301      	moveq	r3, #1
 80048f4:	2300      	movne	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d19b      	bne.n	8004838 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000000 	.word	0x20000000

08004910 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800491e:	f7fd f9e7 	bl	8001cf0 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	4413      	add	r3, r2
 800492c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800492e:	f7fd f9df 	bl	8001cf0 <HAL_GetTick>
 8004932:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004934:	4b3e      	ldr	r3, [pc, #248]	; (8004a30 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	00da      	lsls	r2, r3, #3
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	0d1b      	lsrs	r3, r3, #20
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	fb02 f303 	mul.w	r3, r2, r3
 800494a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800494c:	e062      	b.n	8004a14 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004954:	d109      	bne.n	800496a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d106      	bne.n	800496a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8004968:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004970:	d050      	beq.n	8004a14 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004972:	f7fd f9bd 	bl	8001cf0 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	429a      	cmp	r2, r3
 8004980:	d902      	bls.n	8004988 <SPI_WaitFifoStateUntilTimeout+0x78>
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d13d      	bne.n	8004a04 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004996:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049a0:	d111      	bne.n	80049c6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049aa:	d004      	beq.n	80049b6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b4:	d107      	bne.n	80049c6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ce:	d10f      	bne.n	80049f0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e010      	b.n	8004a26 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d194      	bne.n	800494e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20000000 	.word	0x20000000

08004a34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a48:	d111      	bne.n	8004a6e <SPI_EndRxTransaction+0x3a>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a52:	d004      	beq.n	8004a5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5c:	d107      	bne.n	8004a6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2200      	movs	r2, #0
 8004a76:	2180      	movs	r1, #128	; 0x80
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff fec1 	bl	8004800 <SPI_WaitFlagStateUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d007      	beq.n	8004a94 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a88:	f043 0220 	orr.w	r2, r3, #32
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e023      	b.n	8004adc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9c:	d11d      	bne.n	8004ada <SPI_EndRxTransaction+0xa6>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa6:	d004      	beq.n	8004ab2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab0:	d113      	bne.n	8004ada <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f7ff ff26 	bl	8004910 <SPI_WaitFifoStateUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ace:	f043 0220 	orr.w	r2, r3, #32
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e000      	b.n	8004adc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7ff ff07 	bl	8004910 <SPI_WaitFifoStateUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b0c:	f043 0220 	orr.w	r2, r3, #32
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e027      	b.n	8004b68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2180      	movs	r1, #128	; 0x80
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f7ff fe6c 	bl	8004800 <SPI_WaitFlagStateUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b32:	f043 0220 	orr.w	r2, r3, #32
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e014      	b.n	8004b68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f7ff fee0 	bl	8004910 <SPI_WaitFifoStateUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b5a:	f043 0220 	orr.w	r2, r3, #32
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e000      	b.n	8004b68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e040      	b.n	8004c04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fc fc76 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2224      	movs	r2, #36	; 0x24
 8004b9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0201 	bic.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fb64 	bl	800527c <UART_SetConfig>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e022      	b.n	8004c04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fdba 	bl	8005740 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fe41 	bl	8005884 <UART_CheckIdleState>
 8004c02:	4603      	mov	r3, r0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	f040 8081 	bne.w	8004d28 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <HAL_UART_Transmit+0x26>
 8004c2c:	88fb      	ldrh	r3, [r7, #6]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e079      	b.n	8004d2a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_UART_Transmit+0x38>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e072      	b.n	8004d2a <HAL_UART_Transmit+0x11e>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2221      	movs	r2, #33	; 0x21
 8004c58:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c5a:	f7fd f849 	bl	8001cf0 <HAL_GetTick>
 8004c5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	88fa      	ldrh	r2, [r7, #6]
 8004c6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c78:	d108      	bne.n	8004c8c <HAL_UART_Transmit+0x80>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	e003      	b.n	8004c94 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c9c:	e02c      	b.n	8004cf8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2180      	movs	r1, #128	; 0x80
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 fe34 	bl	8005916 <UART_WaitOnFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e038      	b.n	8004d2a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10b      	bne.n	8004cd6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ccc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	3302      	adds	r3, #2
 8004cd2:	61bb      	str	r3, [r7, #24]
 8004cd4:	e007      	b.n	8004ce6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1cc      	bne.n	8004c9e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2140      	movs	r1, #64	; 0x40
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 fe01 	bl	8005916 <UART_WaitOnFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e005      	b.n	8004d2a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2220      	movs	r2, #32
 8004d22:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	e000      	b.n	8004d2a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004d28:	2302      	movs	r3, #2
  }
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d12c      	bne.n	8004da2 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_UART_Receive_IT+0x22>
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e025      	b.n	8004da4 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_UART_Receive_IT+0x34>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e01e      	b.n	8004da4 <HAL_UART_Receive_IT+0x72>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004d90:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	461a      	mov	r2, r3
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 fe39 	bl	8005a10 <UART_Start_Receive_IT>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	e000      	b.n	8004da4 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004da2:	2302      	movs	r3, #2
  }
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	4613      	mov	r3, r2
 8004db8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d12c      	bne.n	8004e1c <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_UART_Receive_DMA+0x22>
 8004dc8:	88fb      	ldrh	r3, [r7, #6]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e025      	b.n	8004e1e <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_UART_Receive_DMA+0x34>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e01e      	b.n	8004e1e <HAL_UART_Receive_DMA+0x72>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d007      	beq.n	8004e0c <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004e0a:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004e0c:	88fb      	ldrh	r3, [r7, #6]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fe84 	bl	8005b20 <UART_Start_Receive_DMA>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	e000      	b.n	8004e1e <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004e1c:	2302      	movs	r3, #2
  }
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e4e:	4013      	ands	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d113      	bne.n	8004e80 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00e      	beq.n	8004e80 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 81cc 	beq.w	800520e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	4798      	blx	r3
      }
      return;
 8004e7e:	e1c6      	b.n	800520e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 80e3 	beq.w	800504e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d105      	bne.n	8004e9e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4ba5      	ldr	r3, [pc, #660]	; (800512c <HAL_UART_IRQHandler+0x304>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80d8 	beq.w	800504e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d010      	beq.n	8004eca <HAL_UART_IRQHandler+0xa2>
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ec0:	f043 0201 	orr.w	r2, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d010      	beq.n	8004ef6 <HAL_UART_IRQHandler+0xce>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00b      	beq.n	8004ef6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eec:	f043 0204 	orr.w	r2, r3, #4
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d010      	beq.n	8004f22 <HAL_UART_IRQHandler+0xfa>
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00b      	beq.n	8004f22 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2204      	movs	r2, #4
 8004f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f18:	f043 0202 	orr.w	r2, r3, #2
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d015      	beq.n	8004f58 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d104      	bne.n	8004f40 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00b      	beq.n	8004f58 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2208      	movs	r2, #8
 8004f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f4e:	f043 0208 	orr.w	r2, r3, #8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d011      	beq.n	8004f86 <HAL_UART_IRQHandler+0x15e>
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00c      	beq.n	8004f86 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 8140 	beq.w	8005212 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00c      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fbc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc8:	2b40      	cmp	r3, #64	; 0x40
 8004fca:	d004      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d031      	beq.n	800503a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fe23 	bl	8005c22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe6:	2b40      	cmp	r3, #64	; 0x40
 8004fe8:	d123      	bne.n	8005032 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d013      	beq.n	800502a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	4a4a      	ldr	r2, [pc, #296]	; (8005130 <HAL_UART_IRQHandler+0x308>)
 8005008:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500e:	4618      	mov	r0, r3
 8005010:	f7fd f92e 	bl	8002270 <HAL_DMA_Abort_IT>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d017      	beq.n	800504a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005024:	4610      	mov	r0, r2
 8005026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005028:	e00f      	b.n	800504a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f906 	bl	800523c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005030:	e00b      	b.n	800504a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f902 	bl	800523c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005038:	e007      	b.n	800504a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f8fe 	bl	800523c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005048:	e0e3      	b.n	8005212 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504a:	bf00      	nop
    return;
 800504c:	e0e1      	b.n	8005212 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005052:	2b01      	cmp	r3, #1
 8005054:	f040 80a7 	bne.w	80051a6 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f003 0310 	and.w	r3, r3, #16
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 80a1 	beq.w	80051a6 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	f003 0310 	and.w	r3, r3, #16
 800506a:	2b00      	cmp	r3, #0
 800506c:	f000 809b 	beq.w	80051a6 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2210      	movs	r2, #16
 8005076:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	2b40      	cmp	r3, #64	; 0x40
 8005084:	d156      	bne.n	8005134 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005090:	893b      	ldrh	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 80bf 	beq.w	8005216 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800509e:	893a      	ldrh	r2, [r7, #8]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	f080 80b8 	bcs.w	8005216 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	893a      	ldrh	r2, [r7, #8]
 80050aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b8:	d02a      	beq.n	8005110 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0210 	bic.w	r2, r2, #16
 8005104:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	4618      	mov	r0, r3
 800510c:	f7fd f840 	bl	8002190 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800511c:	b29b      	uxth	r3, r3
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	b29b      	uxth	r3, r3
 8005122:	4619      	mov	r1, r3
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f893 	bl	8005250 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800512a:	e074      	b.n	8005216 <HAL_UART_IRQHandler+0x3ee>
 800512c:	04000120 	.word	0x04000120
 8005130:	08005dc9 	.word	0x08005dc9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005140:	b29b      	uxth	r3, r3
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d063      	beq.n	800521a <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8005152:	897b      	ldrh	r3, [r7, #10]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d060      	beq.n	800521a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005166:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0210 	bic.w	r2, r2, #16
 8005198:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800519a:	897b      	ldrh	r3, [r7, #10]
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f856 	bl	8005250 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051a4:	e039      	b.n	800521a <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00d      	beq.n	80051cc <HAL_UART_IRQHandler+0x3a4>
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d008      	beq.n	80051cc <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f84f 	bl	8005268 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051ca:	e029      	b.n	8005220 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00d      	beq.n	80051f2 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d01a      	beq.n	800521e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	4798      	blx	r3
    }
    return;
 80051f0:	e015      	b.n	800521e <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d011      	beq.n	8005220 <HAL_UART_IRQHandler+0x3f8>
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00c      	beq.n	8005220 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fdf4 	bl	8005df4 <UART_EndTransmit_IT>
    return;
 800520c:	e008      	b.n	8005220 <HAL_UART_IRQHandler+0x3f8>
      return;
 800520e:	bf00      	nop
 8005210:	e006      	b.n	8005220 <HAL_UART_IRQHandler+0x3f8>
    return;
 8005212:	bf00      	nop
 8005214:	e004      	b.n	8005220 <HAL_UART_IRQHandler+0x3f8>
      return;
 8005216:	bf00      	nop
 8005218:	e002      	b.n	8005220 <HAL_UART_IRQHandler+0x3f8>
      return;
 800521a:	bf00      	nop
 800521c:	e000      	b.n	8005220 <HAL_UART_IRQHandler+0x3f8>
    return;
 800521e:	bf00      	nop
  }

}
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop

08005228 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005284:	2300      	movs	r3, #0
 8005286:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69db      	ldr	r3, [r3, #28]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4ba7      	ldr	r3, [pc, #668]	; (8005544 <UART_SetConfig+0x2c8>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6812      	ldr	r2, [r2, #0]
 80052ae:	6979      	ldr	r1, [r7, #20]
 80052b0:	430b      	orrs	r3, r1
 80052b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a95      	ldr	r2, [pc, #596]	; (8005548 <UART_SetConfig+0x2cc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d120      	bne.n	800533a <UART_SetConfig+0xbe>
 80052f8:	4b94      	ldr	r3, [pc, #592]	; (800554c <UART_SetConfig+0x2d0>)
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	2b03      	cmp	r3, #3
 8005304:	d816      	bhi.n	8005334 <UART_SetConfig+0xb8>
 8005306:	a201      	add	r2, pc, #4	; (adr r2, 800530c <UART_SetConfig+0x90>)
 8005308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530c:	0800531d 	.word	0x0800531d
 8005310:	08005329 	.word	0x08005329
 8005314:	08005323 	.word	0x08005323
 8005318:	0800532f 	.word	0x0800532f
 800531c:	2301      	movs	r3, #1
 800531e:	77fb      	strb	r3, [r7, #31]
 8005320:	e14f      	b.n	80055c2 <UART_SetConfig+0x346>
 8005322:	2302      	movs	r3, #2
 8005324:	77fb      	strb	r3, [r7, #31]
 8005326:	e14c      	b.n	80055c2 <UART_SetConfig+0x346>
 8005328:	2304      	movs	r3, #4
 800532a:	77fb      	strb	r3, [r7, #31]
 800532c:	e149      	b.n	80055c2 <UART_SetConfig+0x346>
 800532e:	2308      	movs	r3, #8
 8005330:	77fb      	strb	r3, [r7, #31]
 8005332:	e146      	b.n	80055c2 <UART_SetConfig+0x346>
 8005334:	2310      	movs	r3, #16
 8005336:	77fb      	strb	r3, [r7, #31]
 8005338:	e143      	b.n	80055c2 <UART_SetConfig+0x346>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a84      	ldr	r2, [pc, #528]	; (8005550 <UART_SetConfig+0x2d4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d132      	bne.n	80053aa <UART_SetConfig+0x12e>
 8005344:	4b81      	ldr	r3, [pc, #516]	; (800554c <UART_SetConfig+0x2d0>)
 8005346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534a:	f003 030c 	and.w	r3, r3, #12
 800534e:	2b0c      	cmp	r3, #12
 8005350:	d828      	bhi.n	80053a4 <UART_SetConfig+0x128>
 8005352:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <UART_SetConfig+0xdc>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	0800538d 	.word	0x0800538d
 800535c:	080053a5 	.word	0x080053a5
 8005360:	080053a5 	.word	0x080053a5
 8005364:	080053a5 	.word	0x080053a5
 8005368:	08005399 	.word	0x08005399
 800536c:	080053a5 	.word	0x080053a5
 8005370:	080053a5 	.word	0x080053a5
 8005374:	080053a5 	.word	0x080053a5
 8005378:	08005393 	.word	0x08005393
 800537c:	080053a5 	.word	0x080053a5
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053a5 	.word	0x080053a5
 8005388:	0800539f 	.word	0x0800539f
 800538c:	2300      	movs	r3, #0
 800538e:	77fb      	strb	r3, [r7, #31]
 8005390:	e117      	b.n	80055c2 <UART_SetConfig+0x346>
 8005392:	2302      	movs	r3, #2
 8005394:	77fb      	strb	r3, [r7, #31]
 8005396:	e114      	b.n	80055c2 <UART_SetConfig+0x346>
 8005398:	2304      	movs	r3, #4
 800539a:	77fb      	strb	r3, [r7, #31]
 800539c:	e111      	b.n	80055c2 <UART_SetConfig+0x346>
 800539e:	2308      	movs	r3, #8
 80053a0:	77fb      	strb	r3, [r7, #31]
 80053a2:	e10e      	b.n	80055c2 <UART_SetConfig+0x346>
 80053a4:	2310      	movs	r3, #16
 80053a6:	77fb      	strb	r3, [r7, #31]
 80053a8:	e10b      	b.n	80055c2 <UART_SetConfig+0x346>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a69      	ldr	r2, [pc, #420]	; (8005554 <UART_SetConfig+0x2d8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d120      	bne.n	80053f6 <UART_SetConfig+0x17a>
 80053b4:	4b65      	ldr	r3, [pc, #404]	; (800554c <UART_SetConfig+0x2d0>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053be:	2b30      	cmp	r3, #48	; 0x30
 80053c0:	d013      	beq.n	80053ea <UART_SetConfig+0x16e>
 80053c2:	2b30      	cmp	r3, #48	; 0x30
 80053c4:	d814      	bhi.n	80053f0 <UART_SetConfig+0x174>
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d009      	beq.n	80053de <UART_SetConfig+0x162>
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d810      	bhi.n	80053f0 <UART_SetConfig+0x174>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <UART_SetConfig+0x15c>
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d006      	beq.n	80053e4 <UART_SetConfig+0x168>
 80053d6:	e00b      	b.n	80053f0 <UART_SetConfig+0x174>
 80053d8:	2300      	movs	r3, #0
 80053da:	77fb      	strb	r3, [r7, #31]
 80053dc:	e0f1      	b.n	80055c2 <UART_SetConfig+0x346>
 80053de:	2302      	movs	r3, #2
 80053e0:	77fb      	strb	r3, [r7, #31]
 80053e2:	e0ee      	b.n	80055c2 <UART_SetConfig+0x346>
 80053e4:	2304      	movs	r3, #4
 80053e6:	77fb      	strb	r3, [r7, #31]
 80053e8:	e0eb      	b.n	80055c2 <UART_SetConfig+0x346>
 80053ea:	2308      	movs	r3, #8
 80053ec:	77fb      	strb	r3, [r7, #31]
 80053ee:	e0e8      	b.n	80055c2 <UART_SetConfig+0x346>
 80053f0:	2310      	movs	r3, #16
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e0e5      	b.n	80055c2 <UART_SetConfig+0x346>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a57      	ldr	r2, [pc, #348]	; (8005558 <UART_SetConfig+0x2dc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d120      	bne.n	8005442 <UART_SetConfig+0x1c6>
 8005400:	4b52      	ldr	r3, [pc, #328]	; (800554c <UART_SetConfig+0x2d0>)
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005406:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800540a:	2bc0      	cmp	r3, #192	; 0xc0
 800540c:	d013      	beq.n	8005436 <UART_SetConfig+0x1ba>
 800540e:	2bc0      	cmp	r3, #192	; 0xc0
 8005410:	d814      	bhi.n	800543c <UART_SetConfig+0x1c0>
 8005412:	2b80      	cmp	r3, #128	; 0x80
 8005414:	d009      	beq.n	800542a <UART_SetConfig+0x1ae>
 8005416:	2b80      	cmp	r3, #128	; 0x80
 8005418:	d810      	bhi.n	800543c <UART_SetConfig+0x1c0>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <UART_SetConfig+0x1a8>
 800541e:	2b40      	cmp	r3, #64	; 0x40
 8005420:	d006      	beq.n	8005430 <UART_SetConfig+0x1b4>
 8005422:	e00b      	b.n	800543c <UART_SetConfig+0x1c0>
 8005424:	2300      	movs	r3, #0
 8005426:	77fb      	strb	r3, [r7, #31]
 8005428:	e0cb      	b.n	80055c2 <UART_SetConfig+0x346>
 800542a:	2302      	movs	r3, #2
 800542c:	77fb      	strb	r3, [r7, #31]
 800542e:	e0c8      	b.n	80055c2 <UART_SetConfig+0x346>
 8005430:	2304      	movs	r3, #4
 8005432:	77fb      	strb	r3, [r7, #31]
 8005434:	e0c5      	b.n	80055c2 <UART_SetConfig+0x346>
 8005436:	2308      	movs	r3, #8
 8005438:	77fb      	strb	r3, [r7, #31]
 800543a:	e0c2      	b.n	80055c2 <UART_SetConfig+0x346>
 800543c:	2310      	movs	r3, #16
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e0bf      	b.n	80055c2 <UART_SetConfig+0x346>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a45      	ldr	r2, [pc, #276]	; (800555c <UART_SetConfig+0x2e0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d125      	bne.n	8005498 <UART_SetConfig+0x21c>
 800544c:	4b3f      	ldr	r3, [pc, #252]	; (800554c <UART_SetConfig+0x2d0>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800545a:	d017      	beq.n	800548c <UART_SetConfig+0x210>
 800545c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005460:	d817      	bhi.n	8005492 <UART_SetConfig+0x216>
 8005462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005466:	d00b      	beq.n	8005480 <UART_SetConfig+0x204>
 8005468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800546c:	d811      	bhi.n	8005492 <UART_SetConfig+0x216>
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <UART_SetConfig+0x1fe>
 8005472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005476:	d006      	beq.n	8005486 <UART_SetConfig+0x20a>
 8005478:	e00b      	b.n	8005492 <UART_SetConfig+0x216>
 800547a:	2300      	movs	r3, #0
 800547c:	77fb      	strb	r3, [r7, #31]
 800547e:	e0a0      	b.n	80055c2 <UART_SetConfig+0x346>
 8005480:	2302      	movs	r3, #2
 8005482:	77fb      	strb	r3, [r7, #31]
 8005484:	e09d      	b.n	80055c2 <UART_SetConfig+0x346>
 8005486:	2304      	movs	r3, #4
 8005488:	77fb      	strb	r3, [r7, #31]
 800548a:	e09a      	b.n	80055c2 <UART_SetConfig+0x346>
 800548c:	2308      	movs	r3, #8
 800548e:	77fb      	strb	r3, [r7, #31]
 8005490:	e097      	b.n	80055c2 <UART_SetConfig+0x346>
 8005492:	2310      	movs	r3, #16
 8005494:	77fb      	strb	r3, [r7, #31]
 8005496:	e094      	b.n	80055c2 <UART_SetConfig+0x346>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a30      	ldr	r2, [pc, #192]	; (8005560 <UART_SetConfig+0x2e4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d125      	bne.n	80054ee <UART_SetConfig+0x272>
 80054a2:	4b2a      	ldr	r3, [pc, #168]	; (800554c <UART_SetConfig+0x2d0>)
 80054a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054b0:	d017      	beq.n	80054e2 <UART_SetConfig+0x266>
 80054b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054b6:	d817      	bhi.n	80054e8 <UART_SetConfig+0x26c>
 80054b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054bc:	d00b      	beq.n	80054d6 <UART_SetConfig+0x25a>
 80054be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c2:	d811      	bhi.n	80054e8 <UART_SetConfig+0x26c>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <UART_SetConfig+0x254>
 80054c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054cc:	d006      	beq.n	80054dc <UART_SetConfig+0x260>
 80054ce:	e00b      	b.n	80054e8 <UART_SetConfig+0x26c>
 80054d0:	2301      	movs	r3, #1
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e075      	b.n	80055c2 <UART_SetConfig+0x346>
 80054d6:	2302      	movs	r3, #2
 80054d8:	77fb      	strb	r3, [r7, #31]
 80054da:	e072      	b.n	80055c2 <UART_SetConfig+0x346>
 80054dc:	2304      	movs	r3, #4
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	e06f      	b.n	80055c2 <UART_SetConfig+0x346>
 80054e2:	2308      	movs	r3, #8
 80054e4:	77fb      	strb	r3, [r7, #31]
 80054e6:	e06c      	b.n	80055c2 <UART_SetConfig+0x346>
 80054e8:	2310      	movs	r3, #16
 80054ea:	77fb      	strb	r3, [r7, #31]
 80054ec:	e069      	b.n	80055c2 <UART_SetConfig+0x346>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <UART_SetConfig+0x2e8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d137      	bne.n	8005568 <UART_SetConfig+0x2ec>
 80054f8:	4b14      	ldr	r3, [pc, #80]	; (800554c <UART_SetConfig+0x2d0>)
 80054fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005502:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005506:	d017      	beq.n	8005538 <UART_SetConfig+0x2bc>
 8005508:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800550c:	d817      	bhi.n	800553e <UART_SetConfig+0x2c2>
 800550e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005512:	d00b      	beq.n	800552c <UART_SetConfig+0x2b0>
 8005514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005518:	d811      	bhi.n	800553e <UART_SetConfig+0x2c2>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <UART_SetConfig+0x2aa>
 800551e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005522:	d006      	beq.n	8005532 <UART_SetConfig+0x2b6>
 8005524:	e00b      	b.n	800553e <UART_SetConfig+0x2c2>
 8005526:	2300      	movs	r3, #0
 8005528:	77fb      	strb	r3, [r7, #31]
 800552a:	e04a      	b.n	80055c2 <UART_SetConfig+0x346>
 800552c:	2302      	movs	r3, #2
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e047      	b.n	80055c2 <UART_SetConfig+0x346>
 8005532:	2304      	movs	r3, #4
 8005534:	77fb      	strb	r3, [r7, #31]
 8005536:	e044      	b.n	80055c2 <UART_SetConfig+0x346>
 8005538:	2308      	movs	r3, #8
 800553a:	77fb      	strb	r3, [r7, #31]
 800553c:	e041      	b.n	80055c2 <UART_SetConfig+0x346>
 800553e:	2310      	movs	r3, #16
 8005540:	77fb      	strb	r3, [r7, #31]
 8005542:	e03e      	b.n	80055c2 <UART_SetConfig+0x346>
 8005544:	efff69f3 	.word	0xefff69f3
 8005548:	40011000 	.word	0x40011000
 800554c:	40023800 	.word	0x40023800
 8005550:	40004400 	.word	0x40004400
 8005554:	40004800 	.word	0x40004800
 8005558:	40004c00 	.word	0x40004c00
 800555c:	40005000 	.word	0x40005000
 8005560:	40011400 	.word	0x40011400
 8005564:	40007800 	.word	0x40007800
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a71      	ldr	r2, [pc, #452]	; (8005734 <UART_SetConfig+0x4b8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d125      	bne.n	80055be <UART_SetConfig+0x342>
 8005572:	4b71      	ldr	r3, [pc, #452]	; (8005738 <UART_SetConfig+0x4bc>)
 8005574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800557c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005580:	d017      	beq.n	80055b2 <UART_SetConfig+0x336>
 8005582:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005586:	d817      	bhi.n	80055b8 <UART_SetConfig+0x33c>
 8005588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800558c:	d00b      	beq.n	80055a6 <UART_SetConfig+0x32a>
 800558e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005592:	d811      	bhi.n	80055b8 <UART_SetConfig+0x33c>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <UART_SetConfig+0x324>
 8005598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800559c:	d006      	beq.n	80055ac <UART_SetConfig+0x330>
 800559e:	e00b      	b.n	80055b8 <UART_SetConfig+0x33c>
 80055a0:	2300      	movs	r3, #0
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e00d      	b.n	80055c2 <UART_SetConfig+0x346>
 80055a6:	2302      	movs	r3, #2
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e00a      	b.n	80055c2 <UART_SetConfig+0x346>
 80055ac:	2304      	movs	r3, #4
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e007      	b.n	80055c2 <UART_SetConfig+0x346>
 80055b2:	2308      	movs	r3, #8
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e004      	b.n	80055c2 <UART_SetConfig+0x346>
 80055b8:	2310      	movs	r3, #16
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e001      	b.n	80055c2 <UART_SetConfig+0x346>
 80055be:	2310      	movs	r3, #16
 80055c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ca:	d15b      	bne.n	8005684 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80055cc:	7ffb      	ldrb	r3, [r7, #31]
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d827      	bhi.n	8005622 <UART_SetConfig+0x3a6>
 80055d2:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <UART_SetConfig+0x35c>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	080055fd 	.word	0x080055fd
 80055dc:	08005605 	.word	0x08005605
 80055e0:	0800560d 	.word	0x0800560d
 80055e4:	08005623 	.word	0x08005623
 80055e8:	08005613 	.word	0x08005613
 80055ec:	08005623 	.word	0x08005623
 80055f0:	08005623 	.word	0x08005623
 80055f4:	08005623 	.word	0x08005623
 80055f8:	0800561b 	.word	0x0800561b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055fc:	f7fd ff3c 	bl	8003478 <HAL_RCC_GetPCLK1Freq>
 8005600:	61b8      	str	r0, [r7, #24]
        break;
 8005602:	e013      	b.n	800562c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005604:	f7fd ff4c 	bl	80034a0 <HAL_RCC_GetPCLK2Freq>
 8005608:	61b8      	str	r0, [r7, #24]
        break;
 800560a:	e00f      	b.n	800562c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800560c:	4b4b      	ldr	r3, [pc, #300]	; (800573c <UART_SetConfig+0x4c0>)
 800560e:	61bb      	str	r3, [r7, #24]
        break;
 8005610:	e00c      	b.n	800562c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005612:	f7fd fe43 	bl	800329c <HAL_RCC_GetSysClockFreq>
 8005616:	61b8      	str	r0, [r7, #24]
        break;
 8005618:	e008      	b.n	800562c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800561e:	61bb      	str	r3, [r7, #24]
        break;
 8005620:	e004      	b.n	800562c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	77bb      	strb	r3, [r7, #30]
        break;
 800562a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d074      	beq.n	800571c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	005a      	lsls	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	085b      	lsrs	r3, r3, #1
 800563c:	441a      	add	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	fbb2 f3f3 	udiv	r3, r2, r3
 8005646:	b29b      	uxth	r3, r3
 8005648:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b0f      	cmp	r3, #15
 800564e:	d916      	bls.n	800567e <UART_SetConfig+0x402>
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005656:	d212      	bcs.n	800567e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f023 030f 	bic.w	r3, r3, #15
 8005660:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	085b      	lsrs	r3, r3, #1
 8005666:	b29b      	uxth	r3, r3
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	b29a      	uxth	r2, r3
 800566e:	89fb      	ldrh	r3, [r7, #14]
 8005670:	4313      	orrs	r3, r2
 8005672:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	89fa      	ldrh	r2, [r7, #14]
 800567a:	60da      	str	r2, [r3, #12]
 800567c:	e04e      	b.n	800571c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	77bb      	strb	r3, [r7, #30]
 8005682:	e04b      	b.n	800571c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005684:	7ffb      	ldrb	r3, [r7, #31]
 8005686:	2b08      	cmp	r3, #8
 8005688:	d827      	bhi.n	80056da <UART_SetConfig+0x45e>
 800568a:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <UART_SetConfig+0x414>)
 800568c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005690:	080056b5 	.word	0x080056b5
 8005694:	080056bd 	.word	0x080056bd
 8005698:	080056c5 	.word	0x080056c5
 800569c:	080056db 	.word	0x080056db
 80056a0:	080056cb 	.word	0x080056cb
 80056a4:	080056db 	.word	0x080056db
 80056a8:	080056db 	.word	0x080056db
 80056ac:	080056db 	.word	0x080056db
 80056b0:	080056d3 	.word	0x080056d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b4:	f7fd fee0 	bl	8003478 <HAL_RCC_GetPCLK1Freq>
 80056b8:	61b8      	str	r0, [r7, #24]
        break;
 80056ba:	e013      	b.n	80056e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056bc:	f7fd fef0 	bl	80034a0 <HAL_RCC_GetPCLK2Freq>
 80056c0:	61b8      	str	r0, [r7, #24]
        break;
 80056c2:	e00f      	b.n	80056e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c4:	4b1d      	ldr	r3, [pc, #116]	; (800573c <UART_SetConfig+0x4c0>)
 80056c6:	61bb      	str	r3, [r7, #24]
        break;
 80056c8:	e00c      	b.n	80056e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ca:	f7fd fde7 	bl	800329c <HAL_RCC_GetSysClockFreq>
 80056ce:	61b8      	str	r0, [r7, #24]
        break;
 80056d0:	e008      	b.n	80056e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d6:	61bb      	str	r3, [r7, #24]
        break;
 80056d8:	e004      	b.n	80056e4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80056da:	2300      	movs	r3, #0
 80056dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	77bb      	strb	r3, [r7, #30]
        break;
 80056e2:	bf00      	nop
    }

    if (pclk != 0U)
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d018      	beq.n	800571c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	085a      	lsrs	r2, r3, #1
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	441a      	add	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b0f      	cmp	r3, #15
 8005704:	d908      	bls.n	8005718 <UART_SetConfig+0x49c>
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570c:	d204      	bcs.n	8005718 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	e001      	b.n	800571c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005728:	7fbb      	ldrb	r3, [r7, #30]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40007c00 	.word	0x40007c00
 8005738:	40023800 	.word	0x40023800
 800573c:	00f42400 	.word	0x00f42400

08005740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	f003 0310 	and.w	r3, r3, #16
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	f003 0320 	and.w	r3, r3, #32
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01a      	beq.n	8005856 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800583e:	d10a      	bne.n	8005856 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	605a      	str	r2, [r3, #4]
  }
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af02      	add	r7, sp, #8
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005894:	f7fc fa2c 	bl	8001cf0 <HAL_GetTick>
 8005898:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d10e      	bne.n	80058c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f82d 	bl	8005916 <UART_WaitOnFlagUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e023      	b.n	800590e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d10e      	bne.n	80058f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f817 	bl	8005916 <UART_WaitOnFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e00d      	b.n	800590e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2220      	movs	r2, #32
 80058f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	60f8      	str	r0, [r7, #12]
 800591e:	60b9      	str	r1, [r7, #8]
 8005920:	603b      	str	r3, [r7, #0]
 8005922:	4613      	mov	r3, r2
 8005924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005926:	e05e      	b.n	80059e6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592e:	d05a      	beq.n	80059e6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005930:	f7fc f9de 	bl	8001cf0 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	429a      	cmp	r2, r3
 800593e:	d302      	bcc.n	8005946 <UART_WaitOnFlagUntilTimeout+0x30>
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d11b      	bne.n	800597e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005954:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0201 	bic.w	r2, r2, #1
 8005964:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2220      	movs	r2, #32
 800596a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e043      	b.n	8005a06 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	d02c      	beq.n	80059e6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599a:	d124      	bne.n	80059e6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0201 	bic.w	r2, r2, #1
 80059c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2220      	movs	r2, #32
 80059ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e00f      	b.n	8005a06 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69da      	ldr	r2, [r3, #28]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4013      	ands	r3, r2
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	bf0c      	ite	eq
 80059f6:	2301      	moveq	r3, #1
 80059f8:	2300      	movne	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d091      	beq.n	8005928 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	88fa      	ldrh	r2, [r7, #6]
 8005a28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	88fa      	ldrh	r2, [r7, #6]
 8005a30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a42:	d10e      	bne.n	8005a62 <UART_Start_Receive_IT+0x52>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d105      	bne.n	8005a58 <UART_Start_Receive_IT+0x48>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a56:	e02d      	b.n	8005ab4 <UART_Start_Receive_IT+0xa4>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	22ff      	movs	r2, #255	; 0xff
 8005a5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a60:	e028      	b.n	8005ab4 <UART_Start_Receive_IT+0xa4>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10d      	bne.n	8005a86 <UART_Start_Receive_IT+0x76>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d104      	bne.n	8005a7c <UART_Start_Receive_IT+0x6c>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	22ff      	movs	r2, #255	; 0xff
 8005a76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a7a:	e01b      	b.n	8005ab4 <UART_Start_Receive_IT+0xa4>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	227f      	movs	r2, #127	; 0x7f
 8005a80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a84:	e016      	b.n	8005ab4 <UART_Start_Receive_IT+0xa4>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a8e:	d10d      	bne.n	8005aac <UART_Start_Receive_IT+0x9c>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d104      	bne.n	8005aa2 <UART_Start_Receive_IT+0x92>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	227f      	movs	r2, #127	; 0x7f
 8005a9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aa0:	e008      	b.n	8005ab4 <UART_Start_Receive_IT+0xa4>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	223f      	movs	r2, #63	; 0x3f
 8005aa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aaa:	e003      	b.n	8005ab4 <UART_Start_Receive_IT+0xa4>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2222      	movs	r2, #34	; 0x22
 8005ac0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0201 	orr.w	r2, r2, #1
 8005ad0:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ada:	d107      	bne.n	8005aec <UART_Start_Receive_IT+0xdc>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d103      	bne.n	8005aec <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4a0c      	ldr	r2, [pc, #48]	; (8005b18 <UART_Start_Receive_IT+0x108>)
 8005ae8:	665a      	str	r2, [r3, #100]	; 0x64
 8005aea:	e002      	b.n	8005af2 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a0b      	ldr	r2, [pc, #44]	; (8005b1c <UART_Start_Receive_IT+0x10c>)
 8005af0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005b08:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	08005efb 	.word	0x08005efb
 8005b1c:	08005e27 	.word	0x08005e27

08005b20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	88fa      	ldrh	r2, [r7, #6]
 8005b38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2222      	movs	r2, #34	; 0x22
 8005b48:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d02b      	beq.n	8005baa <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b56:	4a25      	ldr	r2, [pc, #148]	; (8005bec <UART_Start_Receive_DMA+0xcc>)
 8005b58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	4a24      	ldr	r2, [pc, #144]	; (8005bf0 <UART_Start_Receive_DMA+0xd0>)
 8005b60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b66:	4a23      	ldr	r2, [pc, #140]	; (8005bf4 <UART_Start_Receive_DMA+0xd4>)
 8005b68:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6e:	2200      	movs	r2, #0
 8005b70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3324      	adds	r3, #36	; 0x24
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b82:	461a      	mov	r2, r3
 8005b84:	88fb      	ldrh	r3, [r7, #6]
 8005b86:	f7fc faa3 	bl	80020d0 <HAL_DMA_Start_IT>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00c      	beq.n	8005baa <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2210      	movs	r2, #16
 8005b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e01c      	b.n	8005be4 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc0:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0201 	orr.w	r2, r2, #1
 8005bd0:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005be0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	08005c81 	.word	0x08005c81
 8005bf0:	08005d15 	.word	0x08005d15
 8005bf4:	08005d4d 	.word	0x08005d4d

08005bf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005c0e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	679a      	str	r2, [r3, #120]	; 0x78
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c38:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0201 	bic.w	r2, r2, #1
 8005c48:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d107      	bne.n	8005c62 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0210 	bic.w	r2, r2, #16
 8005c60:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c96:	d02a      	beq.n	8005cee <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cae:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0201 	bic.w	r2, r2, #1
 8005cbe:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cce:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d107      	bne.n	8005cee <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0210 	bic.w	r2, r2, #16
 8005cec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d107      	bne.n	8005d06 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f7ff faa6 	bl	8005250 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d04:	e002      	b.n	8005d0c <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f7fb fe5a 	bl	80019c0 <HAL_UART_RxCpltCallback>
}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d109      	bne.n	8005d3e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	4619      	mov	r1, r3
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f7ff fa8a 	bl	8005250 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d3c:	e002      	b.n	8005d44 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f7fb fe2e 	bl	80019a0 <HAL_UART_RxHalfCpltCallback>
}
 8005d44:	bf00      	nop
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d5e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d64:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d70:	2b80      	cmp	r3, #128	; 0x80
 8005d72:	d109      	bne.n	8005d88 <UART_DMAError+0x3c>
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	2b21      	cmp	r3, #33	; 0x21
 8005d78:	d106      	bne.n	8005d88 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8005d82:	6978      	ldr	r0, [r7, #20]
 8005d84:	f7ff ff38 	bl	8005bf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d92:	2b40      	cmp	r3, #64	; 0x40
 8005d94:	d109      	bne.n	8005daa <UART_DMAError+0x5e>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b22      	cmp	r3, #34	; 0x22
 8005d9a:	d106      	bne.n	8005daa <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005da4:	6978      	ldr	r0, [r7, #20]
 8005da6:	f7ff ff3c 	bl	8005c22 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005db0:	f043 0210 	orr.w	r2, r3, #16
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dba:	6978      	ldr	r0, [r7, #20]
 8005dbc:	f7ff fa3e 	bl	800523c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dc0:	bf00      	nop
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f7ff fa28 	bl	800523c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dec:	bf00      	nop
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e0a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff fa05 	bl	8005228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e1e:	bf00      	nop
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e34:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e3a:	2b22      	cmp	r3, #34	; 0x22
 8005e3c:	d151      	bne.n	8005ee2 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005e46:	89bb      	ldrh	r3, [r7, #12]
 8005e48:	b2d9      	uxtb	r1, r3
 8005e4a:	89fb      	ldrh	r3, [r7, #14]
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	400a      	ands	r2, r1
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d138      	bne.n	8005ef2 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e8e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d10f      	bne.n	8005ed4 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0210 	bic.w	r2, r2, #16
 8005ec2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005eca:	4619      	mov	r1, r3
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff f9bf 	bl	8005250 <HAL_UARTEx_RxEventCallback>
 8005ed2:	e002      	b.n	8005eda <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7fb fd73 	bl	80019c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ee0:	e007      	b.n	8005ef2 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	699a      	ldr	r2, [r3, #24]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 0208 	orr.w	r2, r2, #8
 8005ef0:	619a      	str	r2, [r3, #24]
}
 8005ef2:	bf00      	nop
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f08:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f0e:	2b22      	cmp	r3, #34	; 0x22
 8005f10:	d151      	bne.n	8005fb6 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f18:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005f20:	89ba      	ldrh	r2, [r7, #12]
 8005f22:	89fb      	ldrh	r3, [r7, #14]
 8005f24:	4013      	ands	r3, r2
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f30:	1c9a      	adds	r2, r3, #2
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d138      	bne.n	8005fc6 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f62:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0201 	bic.w	r2, r2, #1
 8005f72:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d10f      	bne.n	8005fa8 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0210 	bic.w	r2, r2, #16
 8005f96:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff f955 	bl	8005250 <HAL_UARTEx_RxEventCallback>
 8005fa6:	e002      	b.n	8005fae <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7fb fd09 	bl	80019c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005fb4:	e007      	b.n	8005fc6 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	699a      	ldr	r2, [r3, #24]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f042 0208 	orr.w	r2, r2, #8
 8005fc4:	619a      	str	r2, [r3, #24]
}
 8005fc6:	bf00      	nop
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <__errno>:
 8005fd0:	4b01      	ldr	r3, [pc, #4]	; (8005fd8 <__errno+0x8>)
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	2000001c 	.word	0x2000001c

08005fdc <__libc_init_array>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	4d0d      	ldr	r5, [pc, #52]	; (8006014 <__libc_init_array+0x38>)
 8005fe0:	4c0d      	ldr	r4, [pc, #52]	; (8006018 <__libc_init_array+0x3c>)
 8005fe2:	1b64      	subs	r4, r4, r5
 8005fe4:	10a4      	asrs	r4, r4, #2
 8005fe6:	2600      	movs	r6, #0
 8005fe8:	42a6      	cmp	r6, r4
 8005fea:	d109      	bne.n	8006000 <__libc_init_array+0x24>
 8005fec:	4d0b      	ldr	r5, [pc, #44]	; (800601c <__libc_init_array+0x40>)
 8005fee:	4c0c      	ldr	r4, [pc, #48]	; (8006020 <__libc_init_array+0x44>)
 8005ff0:	f004 fb76 	bl	800a6e0 <_init>
 8005ff4:	1b64      	subs	r4, r4, r5
 8005ff6:	10a4      	asrs	r4, r4, #2
 8005ff8:	2600      	movs	r6, #0
 8005ffa:	42a6      	cmp	r6, r4
 8005ffc:	d105      	bne.n	800600a <__libc_init_array+0x2e>
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	f855 3b04 	ldr.w	r3, [r5], #4
 8006004:	4798      	blx	r3
 8006006:	3601      	adds	r6, #1
 8006008:	e7ee      	b.n	8005fe8 <__libc_init_array+0xc>
 800600a:	f855 3b04 	ldr.w	r3, [r5], #4
 800600e:	4798      	blx	r3
 8006010:	3601      	adds	r6, #1
 8006012:	e7f2      	b.n	8005ffa <__libc_init_array+0x1e>
 8006014:	0800abd4 	.word	0x0800abd4
 8006018:	0800abd4 	.word	0x0800abd4
 800601c:	0800abd4 	.word	0x0800abd4
 8006020:	0800abd8 	.word	0x0800abd8

08006024 <memset>:
 8006024:	4402      	add	r2, r0
 8006026:	4603      	mov	r3, r0
 8006028:	4293      	cmp	r3, r2
 800602a:	d100      	bne.n	800602e <memset+0xa>
 800602c:	4770      	bx	lr
 800602e:	f803 1b01 	strb.w	r1, [r3], #1
 8006032:	e7f9      	b.n	8006028 <memset+0x4>

08006034 <__cvt>:
 8006034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006036:	ed2d 8b02 	vpush	{d8}
 800603a:	eeb0 8b40 	vmov.f64	d8, d0
 800603e:	b085      	sub	sp, #20
 8006040:	4617      	mov	r7, r2
 8006042:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006044:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006046:	ee18 2a90 	vmov	r2, s17
 800604a:	f025 0520 	bic.w	r5, r5, #32
 800604e:	2a00      	cmp	r2, #0
 8006050:	bfb6      	itet	lt
 8006052:	222d      	movlt	r2, #45	; 0x2d
 8006054:	2200      	movge	r2, #0
 8006056:	eeb1 8b40 	vneglt.f64	d8, d0
 800605a:	2d46      	cmp	r5, #70	; 0x46
 800605c:	460c      	mov	r4, r1
 800605e:	701a      	strb	r2, [r3, #0]
 8006060:	d004      	beq.n	800606c <__cvt+0x38>
 8006062:	2d45      	cmp	r5, #69	; 0x45
 8006064:	d100      	bne.n	8006068 <__cvt+0x34>
 8006066:	3401      	adds	r4, #1
 8006068:	2102      	movs	r1, #2
 800606a:	e000      	b.n	800606e <__cvt+0x3a>
 800606c:	2103      	movs	r1, #3
 800606e:	ab03      	add	r3, sp, #12
 8006070:	9301      	str	r3, [sp, #4]
 8006072:	ab02      	add	r3, sp, #8
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	4622      	mov	r2, r4
 8006078:	4633      	mov	r3, r6
 800607a:	eeb0 0b48 	vmov.f64	d0, d8
 800607e:	f001 fd53 	bl	8007b28 <_dtoa_r>
 8006082:	2d47      	cmp	r5, #71	; 0x47
 8006084:	d109      	bne.n	800609a <__cvt+0x66>
 8006086:	07fb      	lsls	r3, r7, #31
 8006088:	d407      	bmi.n	800609a <__cvt+0x66>
 800608a:	9b03      	ldr	r3, [sp, #12]
 800608c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800608e:	1a1b      	subs	r3, r3, r0
 8006090:	6013      	str	r3, [r2, #0]
 8006092:	b005      	add	sp, #20
 8006094:	ecbd 8b02 	vpop	{d8}
 8006098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800609a:	2d46      	cmp	r5, #70	; 0x46
 800609c:	eb00 0204 	add.w	r2, r0, r4
 80060a0:	d10c      	bne.n	80060bc <__cvt+0x88>
 80060a2:	7803      	ldrb	r3, [r0, #0]
 80060a4:	2b30      	cmp	r3, #48	; 0x30
 80060a6:	d107      	bne.n	80060b8 <__cvt+0x84>
 80060a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80060ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060b0:	bf1c      	itt	ne
 80060b2:	f1c4 0401 	rsbne	r4, r4, #1
 80060b6:	6034      	strne	r4, [r6, #0]
 80060b8:	6833      	ldr	r3, [r6, #0]
 80060ba:	441a      	add	r2, r3
 80060bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80060c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060c4:	bf08      	it	eq
 80060c6:	9203      	streq	r2, [sp, #12]
 80060c8:	2130      	movs	r1, #48	; 0x30
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d2dc      	bcs.n	800608a <__cvt+0x56>
 80060d0:	1c5c      	adds	r4, r3, #1
 80060d2:	9403      	str	r4, [sp, #12]
 80060d4:	7019      	strb	r1, [r3, #0]
 80060d6:	e7f8      	b.n	80060ca <__cvt+0x96>

080060d8 <__exponent>:
 80060d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060da:	4603      	mov	r3, r0
 80060dc:	2900      	cmp	r1, #0
 80060de:	bfb8      	it	lt
 80060e0:	4249      	neglt	r1, r1
 80060e2:	f803 2b02 	strb.w	r2, [r3], #2
 80060e6:	bfb4      	ite	lt
 80060e8:	222d      	movlt	r2, #45	; 0x2d
 80060ea:	222b      	movge	r2, #43	; 0x2b
 80060ec:	2909      	cmp	r1, #9
 80060ee:	7042      	strb	r2, [r0, #1]
 80060f0:	dd2a      	ble.n	8006148 <__exponent+0x70>
 80060f2:	f10d 0407 	add.w	r4, sp, #7
 80060f6:	46a4      	mov	ip, r4
 80060f8:	270a      	movs	r7, #10
 80060fa:	46a6      	mov	lr, r4
 80060fc:	460a      	mov	r2, r1
 80060fe:	fb91 f6f7 	sdiv	r6, r1, r7
 8006102:	fb07 1516 	mls	r5, r7, r6, r1
 8006106:	3530      	adds	r5, #48	; 0x30
 8006108:	2a63      	cmp	r2, #99	; 0x63
 800610a:	f104 34ff 	add.w	r4, r4, #4294967295
 800610e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006112:	4631      	mov	r1, r6
 8006114:	dcf1      	bgt.n	80060fa <__exponent+0x22>
 8006116:	3130      	adds	r1, #48	; 0x30
 8006118:	f1ae 0502 	sub.w	r5, lr, #2
 800611c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006120:	1c44      	adds	r4, r0, #1
 8006122:	4629      	mov	r1, r5
 8006124:	4561      	cmp	r1, ip
 8006126:	d30a      	bcc.n	800613e <__exponent+0x66>
 8006128:	f10d 0209 	add.w	r2, sp, #9
 800612c:	eba2 020e 	sub.w	r2, r2, lr
 8006130:	4565      	cmp	r5, ip
 8006132:	bf88      	it	hi
 8006134:	2200      	movhi	r2, #0
 8006136:	4413      	add	r3, r2
 8006138:	1a18      	subs	r0, r3, r0
 800613a:	b003      	add	sp, #12
 800613c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800613e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006142:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006146:	e7ed      	b.n	8006124 <__exponent+0x4c>
 8006148:	2330      	movs	r3, #48	; 0x30
 800614a:	3130      	adds	r1, #48	; 0x30
 800614c:	7083      	strb	r3, [r0, #2]
 800614e:	70c1      	strb	r1, [r0, #3]
 8006150:	1d03      	adds	r3, r0, #4
 8006152:	e7f1      	b.n	8006138 <__exponent+0x60>
 8006154:	0000      	movs	r0, r0
	...

08006158 <_printf_float>:
 8006158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615c:	b08b      	sub	sp, #44	; 0x2c
 800615e:	460c      	mov	r4, r1
 8006160:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006164:	4616      	mov	r6, r2
 8006166:	461f      	mov	r7, r3
 8006168:	4605      	mov	r5, r0
 800616a:	f002 fdcf 	bl	8008d0c <_localeconv_r>
 800616e:	f8d0 b000 	ldr.w	fp, [r0]
 8006172:	4658      	mov	r0, fp
 8006174:	f7fa f864 	bl	8000240 <strlen>
 8006178:	2300      	movs	r3, #0
 800617a:	9308      	str	r3, [sp, #32]
 800617c:	f8d8 3000 	ldr.w	r3, [r8]
 8006180:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006184:	6822      	ldr	r2, [r4, #0]
 8006186:	3307      	adds	r3, #7
 8006188:	f023 0307 	bic.w	r3, r3, #7
 800618c:	f103 0108 	add.w	r1, r3, #8
 8006190:	f8c8 1000 	str.w	r1, [r8]
 8006194:	4682      	mov	sl, r0
 8006196:	e9d3 0100 	ldrd	r0, r1, [r3]
 800619a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800619e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006400 <_printf_float+0x2a8>
 80061a2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80061a6:	eeb0 6bc0 	vabs.f64	d6, d0
 80061aa:	eeb4 6b47 	vcmp.f64	d6, d7
 80061ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061b2:	dd24      	ble.n	80061fe <_printf_float+0xa6>
 80061b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80061b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061bc:	d502      	bpl.n	80061c4 <_printf_float+0x6c>
 80061be:	232d      	movs	r3, #45	; 0x2d
 80061c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c4:	4b90      	ldr	r3, [pc, #576]	; (8006408 <_printf_float+0x2b0>)
 80061c6:	4891      	ldr	r0, [pc, #580]	; (800640c <_printf_float+0x2b4>)
 80061c8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80061cc:	bf94      	ite	ls
 80061ce:	4698      	movls	r8, r3
 80061d0:	4680      	movhi	r8, r0
 80061d2:	2303      	movs	r3, #3
 80061d4:	6123      	str	r3, [r4, #16]
 80061d6:	f022 0204 	bic.w	r2, r2, #4
 80061da:	2300      	movs	r3, #0
 80061dc:	6022      	str	r2, [r4, #0]
 80061de:	9304      	str	r3, [sp, #16]
 80061e0:	9700      	str	r7, [sp, #0]
 80061e2:	4633      	mov	r3, r6
 80061e4:	aa09      	add	r2, sp, #36	; 0x24
 80061e6:	4621      	mov	r1, r4
 80061e8:	4628      	mov	r0, r5
 80061ea:	f000 f9d3 	bl	8006594 <_printf_common>
 80061ee:	3001      	adds	r0, #1
 80061f0:	f040 808a 	bne.w	8006308 <_printf_float+0x1b0>
 80061f4:	f04f 30ff 	mov.w	r0, #4294967295
 80061f8:	b00b      	add	sp, #44	; 0x2c
 80061fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fe:	eeb4 0b40 	vcmp.f64	d0, d0
 8006202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006206:	d709      	bvc.n	800621c <_printf_float+0xc4>
 8006208:	ee10 3a90 	vmov	r3, s1
 800620c:	2b00      	cmp	r3, #0
 800620e:	bfbc      	itt	lt
 8006210:	232d      	movlt	r3, #45	; 0x2d
 8006212:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006216:	487e      	ldr	r0, [pc, #504]	; (8006410 <_printf_float+0x2b8>)
 8006218:	4b7e      	ldr	r3, [pc, #504]	; (8006414 <_printf_float+0x2bc>)
 800621a:	e7d5      	b.n	80061c8 <_printf_float+0x70>
 800621c:	6863      	ldr	r3, [r4, #4]
 800621e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006222:	9104      	str	r1, [sp, #16]
 8006224:	1c59      	adds	r1, r3, #1
 8006226:	d13c      	bne.n	80062a2 <_printf_float+0x14a>
 8006228:	2306      	movs	r3, #6
 800622a:	6063      	str	r3, [r4, #4]
 800622c:	2300      	movs	r3, #0
 800622e:	9303      	str	r3, [sp, #12]
 8006230:	ab08      	add	r3, sp, #32
 8006232:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006236:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800623a:	ab07      	add	r3, sp, #28
 800623c:	6861      	ldr	r1, [r4, #4]
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	6022      	str	r2, [r4, #0]
 8006242:	f10d 031b 	add.w	r3, sp, #27
 8006246:	4628      	mov	r0, r5
 8006248:	f7ff fef4 	bl	8006034 <__cvt>
 800624c:	9b04      	ldr	r3, [sp, #16]
 800624e:	9907      	ldr	r1, [sp, #28]
 8006250:	2b47      	cmp	r3, #71	; 0x47
 8006252:	4680      	mov	r8, r0
 8006254:	d108      	bne.n	8006268 <_printf_float+0x110>
 8006256:	1cc8      	adds	r0, r1, #3
 8006258:	db02      	blt.n	8006260 <_printf_float+0x108>
 800625a:	6863      	ldr	r3, [r4, #4]
 800625c:	4299      	cmp	r1, r3
 800625e:	dd41      	ble.n	80062e4 <_printf_float+0x18c>
 8006260:	f1a9 0902 	sub.w	r9, r9, #2
 8006264:	fa5f f989 	uxtb.w	r9, r9
 8006268:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800626c:	d820      	bhi.n	80062b0 <_printf_float+0x158>
 800626e:	3901      	subs	r1, #1
 8006270:	464a      	mov	r2, r9
 8006272:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006276:	9107      	str	r1, [sp, #28]
 8006278:	f7ff ff2e 	bl	80060d8 <__exponent>
 800627c:	9a08      	ldr	r2, [sp, #32]
 800627e:	9004      	str	r0, [sp, #16]
 8006280:	1813      	adds	r3, r2, r0
 8006282:	2a01      	cmp	r2, #1
 8006284:	6123      	str	r3, [r4, #16]
 8006286:	dc02      	bgt.n	800628e <_printf_float+0x136>
 8006288:	6822      	ldr	r2, [r4, #0]
 800628a:	07d2      	lsls	r2, r2, #31
 800628c:	d501      	bpl.n	8006292 <_printf_float+0x13a>
 800628e:	3301      	adds	r3, #1
 8006290:	6123      	str	r3, [r4, #16]
 8006292:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0a2      	beq.n	80061e0 <_printf_float+0x88>
 800629a:	232d      	movs	r3, #45	; 0x2d
 800629c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a0:	e79e      	b.n	80061e0 <_printf_float+0x88>
 80062a2:	9904      	ldr	r1, [sp, #16]
 80062a4:	2947      	cmp	r1, #71	; 0x47
 80062a6:	d1c1      	bne.n	800622c <_printf_float+0xd4>
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1bf      	bne.n	800622c <_printf_float+0xd4>
 80062ac:	2301      	movs	r3, #1
 80062ae:	e7bc      	b.n	800622a <_printf_float+0xd2>
 80062b0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80062b4:	d118      	bne.n	80062e8 <_printf_float+0x190>
 80062b6:	2900      	cmp	r1, #0
 80062b8:	6863      	ldr	r3, [r4, #4]
 80062ba:	dd0b      	ble.n	80062d4 <_printf_float+0x17c>
 80062bc:	6121      	str	r1, [r4, #16]
 80062be:	b913      	cbnz	r3, 80062c6 <_printf_float+0x16e>
 80062c0:	6822      	ldr	r2, [r4, #0]
 80062c2:	07d0      	lsls	r0, r2, #31
 80062c4:	d502      	bpl.n	80062cc <_printf_float+0x174>
 80062c6:	3301      	adds	r3, #1
 80062c8:	440b      	add	r3, r1
 80062ca:	6123      	str	r3, [r4, #16]
 80062cc:	2300      	movs	r3, #0
 80062ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80062d0:	9304      	str	r3, [sp, #16]
 80062d2:	e7de      	b.n	8006292 <_printf_float+0x13a>
 80062d4:	b913      	cbnz	r3, 80062dc <_printf_float+0x184>
 80062d6:	6822      	ldr	r2, [r4, #0]
 80062d8:	07d2      	lsls	r2, r2, #31
 80062da:	d501      	bpl.n	80062e0 <_printf_float+0x188>
 80062dc:	3302      	adds	r3, #2
 80062de:	e7f4      	b.n	80062ca <_printf_float+0x172>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e7f2      	b.n	80062ca <_printf_float+0x172>
 80062e4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80062e8:	9b08      	ldr	r3, [sp, #32]
 80062ea:	4299      	cmp	r1, r3
 80062ec:	db05      	blt.n	80062fa <_printf_float+0x1a2>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	6121      	str	r1, [r4, #16]
 80062f2:	07d8      	lsls	r0, r3, #31
 80062f4:	d5ea      	bpl.n	80062cc <_printf_float+0x174>
 80062f6:	1c4b      	adds	r3, r1, #1
 80062f8:	e7e7      	b.n	80062ca <_printf_float+0x172>
 80062fa:	2900      	cmp	r1, #0
 80062fc:	bfd4      	ite	le
 80062fe:	f1c1 0202 	rsble	r2, r1, #2
 8006302:	2201      	movgt	r2, #1
 8006304:	4413      	add	r3, r2
 8006306:	e7e0      	b.n	80062ca <_printf_float+0x172>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	055a      	lsls	r2, r3, #21
 800630c:	d407      	bmi.n	800631e <_printf_float+0x1c6>
 800630e:	6923      	ldr	r3, [r4, #16]
 8006310:	4642      	mov	r2, r8
 8006312:	4631      	mov	r1, r6
 8006314:	4628      	mov	r0, r5
 8006316:	47b8      	blx	r7
 8006318:	3001      	adds	r0, #1
 800631a:	d12a      	bne.n	8006372 <_printf_float+0x21a>
 800631c:	e76a      	b.n	80061f4 <_printf_float+0x9c>
 800631e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006322:	f240 80e2 	bls.w	80064ea <_printf_float+0x392>
 8006326:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800632a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800632e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006332:	d133      	bne.n	800639c <_printf_float+0x244>
 8006334:	4a38      	ldr	r2, [pc, #224]	; (8006418 <_printf_float+0x2c0>)
 8006336:	2301      	movs	r3, #1
 8006338:	4631      	mov	r1, r6
 800633a:	4628      	mov	r0, r5
 800633c:	47b8      	blx	r7
 800633e:	3001      	adds	r0, #1
 8006340:	f43f af58 	beq.w	80061f4 <_printf_float+0x9c>
 8006344:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006348:	429a      	cmp	r2, r3
 800634a:	db02      	blt.n	8006352 <_printf_float+0x1fa>
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	07d8      	lsls	r0, r3, #31
 8006350:	d50f      	bpl.n	8006372 <_printf_float+0x21a>
 8006352:	4653      	mov	r3, sl
 8006354:	465a      	mov	r2, fp
 8006356:	4631      	mov	r1, r6
 8006358:	4628      	mov	r0, r5
 800635a:	47b8      	blx	r7
 800635c:	3001      	adds	r0, #1
 800635e:	f43f af49 	beq.w	80061f4 <_printf_float+0x9c>
 8006362:	f04f 0800 	mov.w	r8, #0
 8006366:	f104 091a 	add.w	r9, r4, #26
 800636a:	9b08      	ldr	r3, [sp, #32]
 800636c:	3b01      	subs	r3, #1
 800636e:	4543      	cmp	r3, r8
 8006370:	dc09      	bgt.n	8006386 <_printf_float+0x22e>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	079b      	lsls	r3, r3, #30
 8006376:	f100 8108 	bmi.w	800658a <_printf_float+0x432>
 800637a:	68e0      	ldr	r0, [r4, #12]
 800637c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800637e:	4298      	cmp	r0, r3
 8006380:	bfb8      	it	lt
 8006382:	4618      	movlt	r0, r3
 8006384:	e738      	b.n	80061f8 <_printf_float+0xa0>
 8006386:	2301      	movs	r3, #1
 8006388:	464a      	mov	r2, r9
 800638a:	4631      	mov	r1, r6
 800638c:	4628      	mov	r0, r5
 800638e:	47b8      	blx	r7
 8006390:	3001      	adds	r0, #1
 8006392:	f43f af2f 	beq.w	80061f4 <_printf_float+0x9c>
 8006396:	f108 0801 	add.w	r8, r8, #1
 800639a:	e7e6      	b.n	800636a <_printf_float+0x212>
 800639c:	9b07      	ldr	r3, [sp, #28]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	dc3c      	bgt.n	800641c <_printf_float+0x2c4>
 80063a2:	4a1d      	ldr	r2, [pc, #116]	; (8006418 <_printf_float+0x2c0>)
 80063a4:	2301      	movs	r3, #1
 80063a6:	4631      	mov	r1, r6
 80063a8:	4628      	mov	r0, r5
 80063aa:	47b8      	blx	r7
 80063ac:	3001      	adds	r0, #1
 80063ae:	f43f af21 	beq.w	80061f4 <_printf_float+0x9c>
 80063b2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	d102      	bne.n	80063c0 <_printf_float+0x268>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	07d9      	lsls	r1, r3, #31
 80063be:	d5d8      	bpl.n	8006372 <_printf_float+0x21a>
 80063c0:	4653      	mov	r3, sl
 80063c2:	465a      	mov	r2, fp
 80063c4:	4631      	mov	r1, r6
 80063c6:	4628      	mov	r0, r5
 80063c8:	47b8      	blx	r7
 80063ca:	3001      	adds	r0, #1
 80063cc:	f43f af12 	beq.w	80061f4 <_printf_float+0x9c>
 80063d0:	f04f 0900 	mov.w	r9, #0
 80063d4:	f104 0a1a 	add.w	sl, r4, #26
 80063d8:	9b07      	ldr	r3, [sp, #28]
 80063da:	425b      	negs	r3, r3
 80063dc:	454b      	cmp	r3, r9
 80063de:	dc01      	bgt.n	80063e4 <_printf_float+0x28c>
 80063e0:	9b08      	ldr	r3, [sp, #32]
 80063e2:	e795      	b.n	8006310 <_printf_float+0x1b8>
 80063e4:	2301      	movs	r3, #1
 80063e6:	4652      	mov	r2, sl
 80063e8:	4631      	mov	r1, r6
 80063ea:	4628      	mov	r0, r5
 80063ec:	47b8      	blx	r7
 80063ee:	3001      	adds	r0, #1
 80063f0:	f43f af00 	beq.w	80061f4 <_printf_float+0x9c>
 80063f4:	f109 0901 	add.w	r9, r9, #1
 80063f8:	e7ee      	b.n	80063d8 <_printf_float+0x280>
 80063fa:	bf00      	nop
 80063fc:	f3af 8000 	nop.w
 8006400:	ffffffff 	.word	0xffffffff
 8006404:	7fefffff 	.word	0x7fefffff
 8006408:	0800a71c 	.word	0x0800a71c
 800640c:	0800a720 	.word	0x0800a720
 8006410:	0800a728 	.word	0x0800a728
 8006414:	0800a724 	.word	0x0800a724
 8006418:	0800a72c 	.word	0x0800a72c
 800641c:	9a08      	ldr	r2, [sp, #32]
 800641e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006420:	429a      	cmp	r2, r3
 8006422:	bfa8      	it	ge
 8006424:	461a      	movge	r2, r3
 8006426:	2a00      	cmp	r2, #0
 8006428:	4691      	mov	r9, r2
 800642a:	dc38      	bgt.n	800649e <_printf_float+0x346>
 800642c:	2300      	movs	r3, #0
 800642e:	9305      	str	r3, [sp, #20]
 8006430:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006434:	f104 021a 	add.w	r2, r4, #26
 8006438:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800643a:	9905      	ldr	r1, [sp, #20]
 800643c:	9304      	str	r3, [sp, #16]
 800643e:	eba3 0309 	sub.w	r3, r3, r9
 8006442:	428b      	cmp	r3, r1
 8006444:	dc33      	bgt.n	80064ae <_printf_float+0x356>
 8006446:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800644a:	429a      	cmp	r2, r3
 800644c:	db3c      	blt.n	80064c8 <_printf_float+0x370>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	07da      	lsls	r2, r3, #31
 8006452:	d439      	bmi.n	80064c8 <_printf_float+0x370>
 8006454:	9a08      	ldr	r2, [sp, #32]
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	9907      	ldr	r1, [sp, #28]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	eba2 0901 	sub.w	r9, r2, r1
 8006460:	4599      	cmp	r9, r3
 8006462:	bfa8      	it	ge
 8006464:	4699      	movge	r9, r3
 8006466:	f1b9 0f00 	cmp.w	r9, #0
 800646a:	dc35      	bgt.n	80064d8 <_printf_float+0x380>
 800646c:	f04f 0800 	mov.w	r8, #0
 8006470:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006474:	f104 0a1a 	add.w	sl, r4, #26
 8006478:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	eba3 0309 	sub.w	r3, r3, r9
 8006482:	4543      	cmp	r3, r8
 8006484:	f77f af75 	ble.w	8006372 <_printf_float+0x21a>
 8006488:	2301      	movs	r3, #1
 800648a:	4652      	mov	r2, sl
 800648c:	4631      	mov	r1, r6
 800648e:	4628      	mov	r0, r5
 8006490:	47b8      	blx	r7
 8006492:	3001      	adds	r0, #1
 8006494:	f43f aeae 	beq.w	80061f4 <_printf_float+0x9c>
 8006498:	f108 0801 	add.w	r8, r8, #1
 800649c:	e7ec      	b.n	8006478 <_printf_float+0x320>
 800649e:	4613      	mov	r3, r2
 80064a0:	4631      	mov	r1, r6
 80064a2:	4642      	mov	r2, r8
 80064a4:	4628      	mov	r0, r5
 80064a6:	47b8      	blx	r7
 80064a8:	3001      	adds	r0, #1
 80064aa:	d1bf      	bne.n	800642c <_printf_float+0x2d4>
 80064ac:	e6a2      	b.n	80061f4 <_printf_float+0x9c>
 80064ae:	2301      	movs	r3, #1
 80064b0:	4631      	mov	r1, r6
 80064b2:	4628      	mov	r0, r5
 80064b4:	9204      	str	r2, [sp, #16]
 80064b6:	47b8      	blx	r7
 80064b8:	3001      	adds	r0, #1
 80064ba:	f43f ae9b 	beq.w	80061f4 <_printf_float+0x9c>
 80064be:	9b05      	ldr	r3, [sp, #20]
 80064c0:	9a04      	ldr	r2, [sp, #16]
 80064c2:	3301      	adds	r3, #1
 80064c4:	9305      	str	r3, [sp, #20]
 80064c6:	e7b7      	b.n	8006438 <_printf_float+0x2e0>
 80064c8:	4653      	mov	r3, sl
 80064ca:	465a      	mov	r2, fp
 80064cc:	4631      	mov	r1, r6
 80064ce:	4628      	mov	r0, r5
 80064d0:	47b8      	blx	r7
 80064d2:	3001      	adds	r0, #1
 80064d4:	d1be      	bne.n	8006454 <_printf_float+0x2fc>
 80064d6:	e68d      	b.n	80061f4 <_printf_float+0x9c>
 80064d8:	9a04      	ldr	r2, [sp, #16]
 80064da:	464b      	mov	r3, r9
 80064dc:	4442      	add	r2, r8
 80064de:	4631      	mov	r1, r6
 80064e0:	4628      	mov	r0, r5
 80064e2:	47b8      	blx	r7
 80064e4:	3001      	adds	r0, #1
 80064e6:	d1c1      	bne.n	800646c <_printf_float+0x314>
 80064e8:	e684      	b.n	80061f4 <_printf_float+0x9c>
 80064ea:	9a08      	ldr	r2, [sp, #32]
 80064ec:	2a01      	cmp	r2, #1
 80064ee:	dc01      	bgt.n	80064f4 <_printf_float+0x39c>
 80064f0:	07db      	lsls	r3, r3, #31
 80064f2:	d537      	bpl.n	8006564 <_printf_float+0x40c>
 80064f4:	2301      	movs	r3, #1
 80064f6:	4642      	mov	r2, r8
 80064f8:	4631      	mov	r1, r6
 80064fa:	4628      	mov	r0, r5
 80064fc:	47b8      	blx	r7
 80064fe:	3001      	adds	r0, #1
 8006500:	f43f ae78 	beq.w	80061f4 <_printf_float+0x9c>
 8006504:	4653      	mov	r3, sl
 8006506:	465a      	mov	r2, fp
 8006508:	4631      	mov	r1, r6
 800650a:	4628      	mov	r0, r5
 800650c:	47b8      	blx	r7
 800650e:	3001      	adds	r0, #1
 8006510:	f43f ae70 	beq.w	80061f4 <_printf_float+0x9c>
 8006514:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006518:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800651c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006520:	d01b      	beq.n	800655a <_printf_float+0x402>
 8006522:	9b08      	ldr	r3, [sp, #32]
 8006524:	f108 0201 	add.w	r2, r8, #1
 8006528:	3b01      	subs	r3, #1
 800652a:	4631      	mov	r1, r6
 800652c:	4628      	mov	r0, r5
 800652e:	47b8      	blx	r7
 8006530:	3001      	adds	r0, #1
 8006532:	d10e      	bne.n	8006552 <_printf_float+0x3fa>
 8006534:	e65e      	b.n	80061f4 <_printf_float+0x9c>
 8006536:	2301      	movs	r3, #1
 8006538:	464a      	mov	r2, r9
 800653a:	4631      	mov	r1, r6
 800653c:	4628      	mov	r0, r5
 800653e:	47b8      	blx	r7
 8006540:	3001      	adds	r0, #1
 8006542:	f43f ae57 	beq.w	80061f4 <_printf_float+0x9c>
 8006546:	f108 0801 	add.w	r8, r8, #1
 800654a:	9b08      	ldr	r3, [sp, #32]
 800654c:	3b01      	subs	r3, #1
 800654e:	4543      	cmp	r3, r8
 8006550:	dcf1      	bgt.n	8006536 <_printf_float+0x3de>
 8006552:	9b04      	ldr	r3, [sp, #16]
 8006554:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006558:	e6db      	b.n	8006312 <_printf_float+0x1ba>
 800655a:	f04f 0800 	mov.w	r8, #0
 800655e:	f104 091a 	add.w	r9, r4, #26
 8006562:	e7f2      	b.n	800654a <_printf_float+0x3f2>
 8006564:	2301      	movs	r3, #1
 8006566:	4642      	mov	r2, r8
 8006568:	e7df      	b.n	800652a <_printf_float+0x3d2>
 800656a:	2301      	movs	r3, #1
 800656c:	464a      	mov	r2, r9
 800656e:	4631      	mov	r1, r6
 8006570:	4628      	mov	r0, r5
 8006572:	47b8      	blx	r7
 8006574:	3001      	adds	r0, #1
 8006576:	f43f ae3d 	beq.w	80061f4 <_printf_float+0x9c>
 800657a:	f108 0801 	add.w	r8, r8, #1
 800657e:	68e3      	ldr	r3, [r4, #12]
 8006580:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006582:	1a5b      	subs	r3, r3, r1
 8006584:	4543      	cmp	r3, r8
 8006586:	dcf0      	bgt.n	800656a <_printf_float+0x412>
 8006588:	e6f7      	b.n	800637a <_printf_float+0x222>
 800658a:	f04f 0800 	mov.w	r8, #0
 800658e:	f104 0919 	add.w	r9, r4, #25
 8006592:	e7f4      	b.n	800657e <_printf_float+0x426>

08006594 <_printf_common>:
 8006594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006598:	4616      	mov	r6, r2
 800659a:	4699      	mov	r9, r3
 800659c:	688a      	ldr	r2, [r1, #8]
 800659e:	690b      	ldr	r3, [r1, #16]
 80065a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065a4:	4293      	cmp	r3, r2
 80065a6:	bfb8      	it	lt
 80065a8:	4613      	movlt	r3, r2
 80065aa:	6033      	str	r3, [r6, #0]
 80065ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065b0:	4607      	mov	r7, r0
 80065b2:	460c      	mov	r4, r1
 80065b4:	b10a      	cbz	r2, 80065ba <_printf_common+0x26>
 80065b6:	3301      	adds	r3, #1
 80065b8:	6033      	str	r3, [r6, #0]
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	0699      	lsls	r1, r3, #26
 80065be:	bf42      	ittt	mi
 80065c0:	6833      	ldrmi	r3, [r6, #0]
 80065c2:	3302      	addmi	r3, #2
 80065c4:	6033      	strmi	r3, [r6, #0]
 80065c6:	6825      	ldr	r5, [r4, #0]
 80065c8:	f015 0506 	ands.w	r5, r5, #6
 80065cc:	d106      	bne.n	80065dc <_printf_common+0x48>
 80065ce:	f104 0a19 	add.w	sl, r4, #25
 80065d2:	68e3      	ldr	r3, [r4, #12]
 80065d4:	6832      	ldr	r2, [r6, #0]
 80065d6:	1a9b      	subs	r3, r3, r2
 80065d8:	42ab      	cmp	r3, r5
 80065da:	dc26      	bgt.n	800662a <_printf_common+0x96>
 80065dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065e0:	1e13      	subs	r3, r2, #0
 80065e2:	6822      	ldr	r2, [r4, #0]
 80065e4:	bf18      	it	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	0692      	lsls	r2, r2, #26
 80065ea:	d42b      	bmi.n	8006644 <_printf_common+0xb0>
 80065ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065f0:	4649      	mov	r1, r9
 80065f2:	4638      	mov	r0, r7
 80065f4:	47c0      	blx	r8
 80065f6:	3001      	adds	r0, #1
 80065f8:	d01e      	beq.n	8006638 <_printf_common+0xa4>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	68e5      	ldr	r5, [r4, #12]
 80065fe:	6832      	ldr	r2, [r6, #0]
 8006600:	f003 0306 	and.w	r3, r3, #6
 8006604:	2b04      	cmp	r3, #4
 8006606:	bf08      	it	eq
 8006608:	1aad      	subeq	r5, r5, r2
 800660a:	68a3      	ldr	r3, [r4, #8]
 800660c:	6922      	ldr	r2, [r4, #16]
 800660e:	bf0c      	ite	eq
 8006610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006614:	2500      	movne	r5, #0
 8006616:	4293      	cmp	r3, r2
 8006618:	bfc4      	itt	gt
 800661a:	1a9b      	subgt	r3, r3, r2
 800661c:	18ed      	addgt	r5, r5, r3
 800661e:	2600      	movs	r6, #0
 8006620:	341a      	adds	r4, #26
 8006622:	42b5      	cmp	r5, r6
 8006624:	d11a      	bne.n	800665c <_printf_common+0xc8>
 8006626:	2000      	movs	r0, #0
 8006628:	e008      	b.n	800663c <_printf_common+0xa8>
 800662a:	2301      	movs	r3, #1
 800662c:	4652      	mov	r2, sl
 800662e:	4649      	mov	r1, r9
 8006630:	4638      	mov	r0, r7
 8006632:	47c0      	blx	r8
 8006634:	3001      	adds	r0, #1
 8006636:	d103      	bne.n	8006640 <_printf_common+0xac>
 8006638:	f04f 30ff 	mov.w	r0, #4294967295
 800663c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006640:	3501      	adds	r5, #1
 8006642:	e7c6      	b.n	80065d2 <_printf_common+0x3e>
 8006644:	18e1      	adds	r1, r4, r3
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	2030      	movs	r0, #48	; 0x30
 800664a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800664e:	4422      	add	r2, r4
 8006650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006658:	3302      	adds	r3, #2
 800665a:	e7c7      	b.n	80065ec <_printf_common+0x58>
 800665c:	2301      	movs	r3, #1
 800665e:	4622      	mov	r2, r4
 8006660:	4649      	mov	r1, r9
 8006662:	4638      	mov	r0, r7
 8006664:	47c0      	blx	r8
 8006666:	3001      	adds	r0, #1
 8006668:	d0e6      	beq.n	8006638 <_printf_common+0xa4>
 800666a:	3601      	adds	r6, #1
 800666c:	e7d9      	b.n	8006622 <_printf_common+0x8e>
	...

08006670 <_printf_i>:
 8006670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006674:	460c      	mov	r4, r1
 8006676:	4691      	mov	r9, r2
 8006678:	7e27      	ldrb	r7, [r4, #24]
 800667a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800667c:	2f78      	cmp	r7, #120	; 0x78
 800667e:	4680      	mov	r8, r0
 8006680:	469a      	mov	sl, r3
 8006682:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006686:	d807      	bhi.n	8006698 <_printf_i+0x28>
 8006688:	2f62      	cmp	r7, #98	; 0x62
 800668a:	d80a      	bhi.n	80066a2 <_printf_i+0x32>
 800668c:	2f00      	cmp	r7, #0
 800668e:	f000 80d8 	beq.w	8006842 <_printf_i+0x1d2>
 8006692:	2f58      	cmp	r7, #88	; 0x58
 8006694:	f000 80a3 	beq.w	80067de <_printf_i+0x16e>
 8006698:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800669c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066a0:	e03a      	b.n	8006718 <_printf_i+0xa8>
 80066a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066a6:	2b15      	cmp	r3, #21
 80066a8:	d8f6      	bhi.n	8006698 <_printf_i+0x28>
 80066aa:	a001      	add	r0, pc, #4	; (adr r0, 80066b0 <_printf_i+0x40>)
 80066ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80066b0:	08006709 	.word	0x08006709
 80066b4:	0800671d 	.word	0x0800671d
 80066b8:	08006699 	.word	0x08006699
 80066bc:	08006699 	.word	0x08006699
 80066c0:	08006699 	.word	0x08006699
 80066c4:	08006699 	.word	0x08006699
 80066c8:	0800671d 	.word	0x0800671d
 80066cc:	08006699 	.word	0x08006699
 80066d0:	08006699 	.word	0x08006699
 80066d4:	08006699 	.word	0x08006699
 80066d8:	08006699 	.word	0x08006699
 80066dc:	08006829 	.word	0x08006829
 80066e0:	0800674d 	.word	0x0800674d
 80066e4:	0800680b 	.word	0x0800680b
 80066e8:	08006699 	.word	0x08006699
 80066ec:	08006699 	.word	0x08006699
 80066f0:	0800684b 	.word	0x0800684b
 80066f4:	08006699 	.word	0x08006699
 80066f8:	0800674d 	.word	0x0800674d
 80066fc:	08006699 	.word	0x08006699
 8006700:	08006699 	.word	0x08006699
 8006704:	08006813 	.word	0x08006813
 8006708:	680b      	ldr	r3, [r1, #0]
 800670a:	1d1a      	adds	r2, r3, #4
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	600a      	str	r2, [r1, #0]
 8006710:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006718:	2301      	movs	r3, #1
 800671a:	e0a3      	b.n	8006864 <_printf_i+0x1f4>
 800671c:	6825      	ldr	r5, [r4, #0]
 800671e:	6808      	ldr	r0, [r1, #0]
 8006720:	062e      	lsls	r6, r5, #24
 8006722:	f100 0304 	add.w	r3, r0, #4
 8006726:	d50a      	bpl.n	800673e <_printf_i+0xce>
 8006728:	6805      	ldr	r5, [r0, #0]
 800672a:	600b      	str	r3, [r1, #0]
 800672c:	2d00      	cmp	r5, #0
 800672e:	da03      	bge.n	8006738 <_printf_i+0xc8>
 8006730:	232d      	movs	r3, #45	; 0x2d
 8006732:	426d      	negs	r5, r5
 8006734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006738:	485e      	ldr	r0, [pc, #376]	; (80068b4 <_printf_i+0x244>)
 800673a:	230a      	movs	r3, #10
 800673c:	e019      	b.n	8006772 <_printf_i+0x102>
 800673e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006742:	6805      	ldr	r5, [r0, #0]
 8006744:	600b      	str	r3, [r1, #0]
 8006746:	bf18      	it	ne
 8006748:	b22d      	sxthne	r5, r5
 800674a:	e7ef      	b.n	800672c <_printf_i+0xbc>
 800674c:	680b      	ldr	r3, [r1, #0]
 800674e:	6825      	ldr	r5, [r4, #0]
 8006750:	1d18      	adds	r0, r3, #4
 8006752:	6008      	str	r0, [r1, #0]
 8006754:	0628      	lsls	r0, r5, #24
 8006756:	d501      	bpl.n	800675c <_printf_i+0xec>
 8006758:	681d      	ldr	r5, [r3, #0]
 800675a:	e002      	b.n	8006762 <_printf_i+0xf2>
 800675c:	0669      	lsls	r1, r5, #25
 800675e:	d5fb      	bpl.n	8006758 <_printf_i+0xe8>
 8006760:	881d      	ldrh	r5, [r3, #0]
 8006762:	4854      	ldr	r0, [pc, #336]	; (80068b4 <_printf_i+0x244>)
 8006764:	2f6f      	cmp	r7, #111	; 0x6f
 8006766:	bf0c      	ite	eq
 8006768:	2308      	moveq	r3, #8
 800676a:	230a      	movne	r3, #10
 800676c:	2100      	movs	r1, #0
 800676e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006772:	6866      	ldr	r6, [r4, #4]
 8006774:	60a6      	str	r6, [r4, #8]
 8006776:	2e00      	cmp	r6, #0
 8006778:	bfa2      	ittt	ge
 800677a:	6821      	ldrge	r1, [r4, #0]
 800677c:	f021 0104 	bicge.w	r1, r1, #4
 8006780:	6021      	strge	r1, [r4, #0]
 8006782:	b90d      	cbnz	r5, 8006788 <_printf_i+0x118>
 8006784:	2e00      	cmp	r6, #0
 8006786:	d04d      	beq.n	8006824 <_printf_i+0x1b4>
 8006788:	4616      	mov	r6, r2
 800678a:	fbb5 f1f3 	udiv	r1, r5, r3
 800678e:	fb03 5711 	mls	r7, r3, r1, r5
 8006792:	5dc7      	ldrb	r7, [r0, r7]
 8006794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006798:	462f      	mov	r7, r5
 800679a:	42bb      	cmp	r3, r7
 800679c:	460d      	mov	r5, r1
 800679e:	d9f4      	bls.n	800678a <_printf_i+0x11a>
 80067a0:	2b08      	cmp	r3, #8
 80067a2:	d10b      	bne.n	80067bc <_printf_i+0x14c>
 80067a4:	6823      	ldr	r3, [r4, #0]
 80067a6:	07df      	lsls	r7, r3, #31
 80067a8:	d508      	bpl.n	80067bc <_printf_i+0x14c>
 80067aa:	6923      	ldr	r3, [r4, #16]
 80067ac:	6861      	ldr	r1, [r4, #4]
 80067ae:	4299      	cmp	r1, r3
 80067b0:	bfde      	ittt	le
 80067b2:	2330      	movle	r3, #48	; 0x30
 80067b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067bc:	1b92      	subs	r2, r2, r6
 80067be:	6122      	str	r2, [r4, #16]
 80067c0:	f8cd a000 	str.w	sl, [sp]
 80067c4:	464b      	mov	r3, r9
 80067c6:	aa03      	add	r2, sp, #12
 80067c8:	4621      	mov	r1, r4
 80067ca:	4640      	mov	r0, r8
 80067cc:	f7ff fee2 	bl	8006594 <_printf_common>
 80067d0:	3001      	adds	r0, #1
 80067d2:	d14c      	bne.n	800686e <_printf_i+0x1fe>
 80067d4:	f04f 30ff 	mov.w	r0, #4294967295
 80067d8:	b004      	add	sp, #16
 80067da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067de:	4835      	ldr	r0, [pc, #212]	; (80068b4 <_printf_i+0x244>)
 80067e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	680e      	ldr	r6, [r1, #0]
 80067e8:	061f      	lsls	r7, r3, #24
 80067ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80067ee:	600e      	str	r6, [r1, #0]
 80067f0:	d514      	bpl.n	800681c <_printf_i+0x1ac>
 80067f2:	07d9      	lsls	r1, r3, #31
 80067f4:	bf44      	itt	mi
 80067f6:	f043 0320 	orrmi.w	r3, r3, #32
 80067fa:	6023      	strmi	r3, [r4, #0]
 80067fc:	b91d      	cbnz	r5, 8006806 <_printf_i+0x196>
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	f023 0320 	bic.w	r3, r3, #32
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	2310      	movs	r3, #16
 8006808:	e7b0      	b.n	800676c <_printf_i+0xfc>
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	f043 0320 	orr.w	r3, r3, #32
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	2378      	movs	r3, #120	; 0x78
 8006814:	4828      	ldr	r0, [pc, #160]	; (80068b8 <_printf_i+0x248>)
 8006816:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800681a:	e7e3      	b.n	80067e4 <_printf_i+0x174>
 800681c:	065e      	lsls	r6, r3, #25
 800681e:	bf48      	it	mi
 8006820:	b2ad      	uxthmi	r5, r5
 8006822:	e7e6      	b.n	80067f2 <_printf_i+0x182>
 8006824:	4616      	mov	r6, r2
 8006826:	e7bb      	b.n	80067a0 <_printf_i+0x130>
 8006828:	680b      	ldr	r3, [r1, #0]
 800682a:	6826      	ldr	r6, [r4, #0]
 800682c:	6960      	ldr	r0, [r4, #20]
 800682e:	1d1d      	adds	r5, r3, #4
 8006830:	600d      	str	r5, [r1, #0]
 8006832:	0635      	lsls	r5, r6, #24
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	d501      	bpl.n	800683c <_printf_i+0x1cc>
 8006838:	6018      	str	r0, [r3, #0]
 800683a:	e002      	b.n	8006842 <_printf_i+0x1d2>
 800683c:	0671      	lsls	r1, r6, #25
 800683e:	d5fb      	bpl.n	8006838 <_printf_i+0x1c8>
 8006840:	8018      	strh	r0, [r3, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	6123      	str	r3, [r4, #16]
 8006846:	4616      	mov	r6, r2
 8006848:	e7ba      	b.n	80067c0 <_printf_i+0x150>
 800684a:	680b      	ldr	r3, [r1, #0]
 800684c:	1d1a      	adds	r2, r3, #4
 800684e:	600a      	str	r2, [r1, #0]
 8006850:	681e      	ldr	r6, [r3, #0]
 8006852:	6862      	ldr	r2, [r4, #4]
 8006854:	2100      	movs	r1, #0
 8006856:	4630      	mov	r0, r6
 8006858:	f7f9 fcfa 	bl	8000250 <memchr>
 800685c:	b108      	cbz	r0, 8006862 <_printf_i+0x1f2>
 800685e:	1b80      	subs	r0, r0, r6
 8006860:	6060      	str	r0, [r4, #4]
 8006862:	6863      	ldr	r3, [r4, #4]
 8006864:	6123      	str	r3, [r4, #16]
 8006866:	2300      	movs	r3, #0
 8006868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800686c:	e7a8      	b.n	80067c0 <_printf_i+0x150>
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	4632      	mov	r2, r6
 8006872:	4649      	mov	r1, r9
 8006874:	4640      	mov	r0, r8
 8006876:	47d0      	blx	sl
 8006878:	3001      	adds	r0, #1
 800687a:	d0ab      	beq.n	80067d4 <_printf_i+0x164>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	079b      	lsls	r3, r3, #30
 8006880:	d413      	bmi.n	80068aa <_printf_i+0x23a>
 8006882:	68e0      	ldr	r0, [r4, #12]
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	4298      	cmp	r0, r3
 8006888:	bfb8      	it	lt
 800688a:	4618      	movlt	r0, r3
 800688c:	e7a4      	b.n	80067d8 <_printf_i+0x168>
 800688e:	2301      	movs	r3, #1
 8006890:	4632      	mov	r2, r6
 8006892:	4649      	mov	r1, r9
 8006894:	4640      	mov	r0, r8
 8006896:	47d0      	blx	sl
 8006898:	3001      	adds	r0, #1
 800689a:	d09b      	beq.n	80067d4 <_printf_i+0x164>
 800689c:	3501      	adds	r5, #1
 800689e:	68e3      	ldr	r3, [r4, #12]
 80068a0:	9903      	ldr	r1, [sp, #12]
 80068a2:	1a5b      	subs	r3, r3, r1
 80068a4:	42ab      	cmp	r3, r5
 80068a6:	dcf2      	bgt.n	800688e <_printf_i+0x21e>
 80068a8:	e7eb      	b.n	8006882 <_printf_i+0x212>
 80068aa:	2500      	movs	r5, #0
 80068ac:	f104 0619 	add.w	r6, r4, #25
 80068b0:	e7f5      	b.n	800689e <_printf_i+0x22e>
 80068b2:	bf00      	nop
 80068b4:	0800a72e 	.word	0x0800a72e
 80068b8:	0800a73f 	.word	0x0800a73f

080068bc <_scanf_float>:
 80068bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c0:	b087      	sub	sp, #28
 80068c2:	4617      	mov	r7, r2
 80068c4:	9303      	str	r3, [sp, #12]
 80068c6:	688b      	ldr	r3, [r1, #8]
 80068c8:	1e5a      	subs	r2, r3, #1
 80068ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80068ce:	bf83      	ittte	hi
 80068d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80068d4:	195b      	addhi	r3, r3, r5
 80068d6:	9302      	strhi	r3, [sp, #8]
 80068d8:	2300      	movls	r3, #0
 80068da:	bf86      	itte	hi
 80068dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80068e0:	608b      	strhi	r3, [r1, #8]
 80068e2:	9302      	strls	r3, [sp, #8]
 80068e4:	680b      	ldr	r3, [r1, #0]
 80068e6:	468b      	mov	fp, r1
 80068e8:	2500      	movs	r5, #0
 80068ea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80068ee:	f84b 3b1c 	str.w	r3, [fp], #28
 80068f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80068f6:	4680      	mov	r8, r0
 80068f8:	460c      	mov	r4, r1
 80068fa:	465e      	mov	r6, fp
 80068fc:	46aa      	mov	sl, r5
 80068fe:	46a9      	mov	r9, r5
 8006900:	9501      	str	r5, [sp, #4]
 8006902:	68a2      	ldr	r2, [r4, #8]
 8006904:	b152      	cbz	r2, 800691c <_scanf_float+0x60>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b4e      	cmp	r3, #78	; 0x4e
 800690c:	d864      	bhi.n	80069d8 <_scanf_float+0x11c>
 800690e:	2b40      	cmp	r3, #64	; 0x40
 8006910:	d83c      	bhi.n	800698c <_scanf_float+0xd0>
 8006912:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006916:	b2c8      	uxtb	r0, r1
 8006918:	280e      	cmp	r0, #14
 800691a:	d93a      	bls.n	8006992 <_scanf_float+0xd6>
 800691c:	f1b9 0f00 	cmp.w	r9, #0
 8006920:	d003      	beq.n	800692a <_scanf_float+0x6e>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800692e:	f1ba 0f01 	cmp.w	sl, #1
 8006932:	f200 8113 	bhi.w	8006b5c <_scanf_float+0x2a0>
 8006936:	455e      	cmp	r6, fp
 8006938:	f200 8105 	bhi.w	8006b46 <_scanf_float+0x28a>
 800693c:	2501      	movs	r5, #1
 800693e:	4628      	mov	r0, r5
 8006940:	b007      	add	sp, #28
 8006942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006946:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800694a:	2a0d      	cmp	r2, #13
 800694c:	d8e6      	bhi.n	800691c <_scanf_float+0x60>
 800694e:	a101      	add	r1, pc, #4	; (adr r1, 8006954 <_scanf_float+0x98>)
 8006950:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006954:	08006a93 	.word	0x08006a93
 8006958:	0800691d 	.word	0x0800691d
 800695c:	0800691d 	.word	0x0800691d
 8006960:	0800691d 	.word	0x0800691d
 8006964:	08006af3 	.word	0x08006af3
 8006968:	08006acb 	.word	0x08006acb
 800696c:	0800691d 	.word	0x0800691d
 8006970:	0800691d 	.word	0x0800691d
 8006974:	08006aa1 	.word	0x08006aa1
 8006978:	0800691d 	.word	0x0800691d
 800697c:	0800691d 	.word	0x0800691d
 8006980:	0800691d 	.word	0x0800691d
 8006984:	0800691d 	.word	0x0800691d
 8006988:	08006a59 	.word	0x08006a59
 800698c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006990:	e7db      	b.n	800694a <_scanf_float+0x8e>
 8006992:	290e      	cmp	r1, #14
 8006994:	d8c2      	bhi.n	800691c <_scanf_float+0x60>
 8006996:	a001      	add	r0, pc, #4	; (adr r0, 800699c <_scanf_float+0xe0>)
 8006998:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800699c:	08006a4b 	.word	0x08006a4b
 80069a0:	0800691d 	.word	0x0800691d
 80069a4:	08006a4b 	.word	0x08006a4b
 80069a8:	08006adf 	.word	0x08006adf
 80069ac:	0800691d 	.word	0x0800691d
 80069b0:	080069f9 	.word	0x080069f9
 80069b4:	08006a35 	.word	0x08006a35
 80069b8:	08006a35 	.word	0x08006a35
 80069bc:	08006a35 	.word	0x08006a35
 80069c0:	08006a35 	.word	0x08006a35
 80069c4:	08006a35 	.word	0x08006a35
 80069c8:	08006a35 	.word	0x08006a35
 80069cc:	08006a35 	.word	0x08006a35
 80069d0:	08006a35 	.word	0x08006a35
 80069d4:	08006a35 	.word	0x08006a35
 80069d8:	2b6e      	cmp	r3, #110	; 0x6e
 80069da:	d809      	bhi.n	80069f0 <_scanf_float+0x134>
 80069dc:	2b60      	cmp	r3, #96	; 0x60
 80069de:	d8b2      	bhi.n	8006946 <_scanf_float+0x8a>
 80069e0:	2b54      	cmp	r3, #84	; 0x54
 80069e2:	d077      	beq.n	8006ad4 <_scanf_float+0x218>
 80069e4:	2b59      	cmp	r3, #89	; 0x59
 80069e6:	d199      	bne.n	800691c <_scanf_float+0x60>
 80069e8:	2d07      	cmp	r5, #7
 80069ea:	d197      	bne.n	800691c <_scanf_float+0x60>
 80069ec:	2508      	movs	r5, #8
 80069ee:	e029      	b.n	8006a44 <_scanf_float+0x188>
 80069f0:	2b74      	cmp	r3, #116	; 0x74
 80069f2:	d06f      	beq.n	8006ad4 <_scanf_float+0x218>
 80069f4:	2b79      	cmp	r3, #121	; 0x79
 80069f6:	e7f6      	b.n	80069e6 <_scanf_float+0x12a>
 80069f8:	6821      	ldr	r1, [r4, #0]
 80069fa:	05c8      	lsls	r0, r1, #23
 80069fc:	d51a      	bpl.n	8006a34 <_scanf_float+0x178>
 80069fe:	9b02      	ldr	r3, [sp, #8]
 8006a00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006a04:	6021      	str	r1, [r4, #0]
 8006a06:	f109 0901 	add.w	r9, r9, #1
 8006a0a:	b11b      	cbz	r3, 8006a14 <_scanf_float+0x158>
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	3201      	adds	r2, #1
 8006a10:	9302      	str	r3, [sp, #8]
 8006a12:	60a2      	str	r2, [r4, #8]
 8006a14:	68a3      	ldr	r3, [r4, #8]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	60a3      	str	r3, [r4, #8]
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	6123      	str	r3, [r4, #16]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	607b      	str	r3, [r7, #4]
 8006a28:	f340 8084 	ble.w	8006b34 <_scanf_float+0x278>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	603b      	str	r3, [r7, #0]
 8006a32:	e766      	b.n	8006902 <_scanf_float+0x46>
 8006a34:	eb1a 0f05 	cmn.w	sl, r5
 8006a38:	f47f af70 	bne.w	800691c <_scanf_float+0x60>
 8006a3c:	6822      	ldr	r2, [r4, #0]
 8006a3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006a42:	6022      	str	r2, [r4, #0]
 8006a44:	f806 3b01 	strb.w	r3, [r6], #1
 8006a48:	e7e4      	b.n	8006a14 <_scanf_float+0x158>
 8006a4a:	6822      	ldr	r2, [r4, #0]
 8006a4c:	0610      	lsls	r0, r2, #24
 8006a4e:	f57f af65 	bpl.w	800691c <_scanf_float+0x60>
 8006a52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a56:	e7f4      	b.n	8006a42 <_scanf_float+0x186>
 8006a58:	f1ba 0f00 	cmp.w	sl, #0
 8006a5c:	d10e      	bne.n	8006a7c <_scanf_float+0x1c0>
 8006a5e:	f1b9 0f00 	cmp.w	r9, #0
 8006a62:	d10e      	bne.n	8006a82 <_scanf_float+0x1c6>
 8006a64:	6822      	ldr	r2, [r4, #0]
 8006a66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a6e:	d108      	bne.n	8006a82 <_scanf_float+0x1c6>
 8006a70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a74:	6022      	str	r2, [r4, #0]
 8006a76:	f04f 0a01 	mov.w	sl, #1
 8006a7a:	e7e3      	b.n	8006a44 <_scanf_float+0x188>
 8006a7c:	f1ba 0f02 	cmp.w	sl, #2
 8006a80:	d055      	beq.n	8006b2e <_scanf_float+0x272>
 8006a82:	2d01      	cmp	r5, #1
 8006a84:	d002      	beq.n	8006a8c <_scanf_float+0x1d0>
 8006a86:	2d04      	cmp	r5, #4
 8006a88:	f47f af48 	bne.w	800691c <_scanf_float+0x60>
 8006a8c:	3501      	adds	r5, #1
 8006a8e:	b2ed      	uxtb	r5, r5
 8006a90:	e7d8      	b.n	8006a44 <_scanf_float+0x188>
 8006a92:	f1ba 0f01 	cmp.w	sl, #1
 8006a96:	f47f af41 	bne.w	800691c <_scanf_float+0x60>
 8006a9a:	f04f 0a02 	mov.w	sl, #2
 8006a9e:	e7d1      	b.n	8006a44 <_scanf_float+0x188>
 8006aa0:	b97d      	cbnz	r5, 8006ac2 <_scanf_float+0x206>
 8006aa2:	f1b9 0f00 	cmp.w	r9, #0
 8006aa6:	f47f af3c 	bne.w	8006922 <_scanf_float+0x66>
 8006aaa:	6822      	ldr	r2, [r4, #0]
 8006aac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006ab0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006ab4:	f47f af39 	bne.w	800692a <_scanf_float+0x6e>
 8006ab8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006abc:	6022      	str	r2, [r4, #0]
 8006abe:	2501      	movs	r5, #1
 8006ac0:	e7c0      	b.n	8006a44 <_scanf_float+0x188>
 8006ac2:	2d03      	cmp	r5, #3
 8006ac4:	d0e2      	beq.n	8006a8c <_scanf_float+0x1d0>
 8006ac6:	2d05      	cmp	r5, #5
 8006ac8:	e7de      	b.n	8006a88 <_scanf_float+0x1cc>
 8006aca:	2d02      	cmp	r5, #2
 8006acc:	f47f af26 	bne.w	800691c <_scanf_float+0x60>
 8006ad0:	2503      	movs	r5, #3
 8006ad2:	e7b7      	b.n	8006a44 <_scanf_float+0x188>
 8006ad4:	2d06      	cmp	r5, #6
 8006ad6:	f47f af21 	bne.w	800691c <_scanf_float+0x60>
 8006ada:	2507      	movs	r5, #7
 8006adc:	e7b2      	b.n	8006a44 <_scanf_float+0x188>
 8006ade:	6822      	ldr	r2, [r4, #0]
 8006ae0:	0591      	lsls	r1, r2, #22
 8006ae2:	f57f af1b 	bpl.w	800691c <_scanf_float+0x60>
 8006ae6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006aea:	6022      	str	r2, [r4, #0]
 8006aec:	f8cd 9004 	str.w	r9, [sp, #4]
 8006af0:	e7a8      	b.n	8006a44 <_scanf_float+0x188>
 8006af2:	6822      	ldr	r2, [r4, #0]
 8006af4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006af8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006afc:	d006      	beq.n	8006b0c <_scanf_float+0x250>
 8006afe:	0550      	lsls	r0, r2, #21
 8006b00:	f57f af0c 	bpl.w	800691c <_scanf_float+0x60>
 8006b04:	f1b9 0f00 	cmp.w	r9, #0
 8006b08:	f43f af0f 	beq.w	800692a <_scanf_float+0x6e>
 8006b0c:	0591      	lsls	r1, r2, #22
 8006b0e:	bf58      	it	pl
 8006b10:	9901      	ldrpl	r1, [sp, #4]
 8006b12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b16:	bf58      	it	pl
 8006b18:	eba9 0101 	subpl.w	r1, r9, r1
 8006b1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006b20:	bf58      	it	pl
 8006b22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006b26:	6022      	str	r2, [r4, #0]
 8006b28:	f04f 0900 	mov.w	r9, #0
 8006b2c:	e78a      	b.n	8006a44 <_scanf_float+0x188>
 8006b2e:	f04f 0a03 	mov.w	sl, #3
 8006b32:	e787      	b.n	8006a44 <_scanf_float+0x188>
 8006b34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b38:	4639      	mov	r1, r7
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	4798      	blx	r3
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	f43f aedf 	beq.w	8006902 <_scanf_float+0x46>
 8006b44:	e6ea      	b.n	800691c <_scanf_float+0x60>
 8006b46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b4e:	463a      	mov	r2, r7
 8006b50:	4640      	mov	r0, r8
 8006b52:	4798      	blx	r3
 8006b54:	6923      	ldr	r3, [r4, #16]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	6123      	str	r3, [r4, #16]
 8006b5a:	e6ec      	b.n	8006936 <_scanf_float+0x7a>
 8006b5c:	1e6b      	subs	r3, r5, #1
 8006b5e:	2b06      	cmp	r3, #6
 8006b60:	d825      	bhi.n	8006bae <_scanf_float+0x2f2>
 8006b62:	2d02      	cmp	r5, #2
 8006b64:	d836      	bhi.n	8006bd4 <_scanf_float+0x318>
 8006b66:	455e      	cmp	r6, fp
 8006b68:	f67f aee8 	bls.w	800693c <_scanf_float+0x80>
 8006b6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b74:	463a      	mov	r2, r7
 8006b76:	4640      	mov	r0, r8
 8006b78:	4798      	blx	r3
 8006b7a:	6923      	ldr	r3, [r4, #16]
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	6123      	str	r3, [r4, #16]
 8006b80:	e7f1      	b.n	8006b66 <_scanf_float+0x2aa>
 8006b82:	9802      	ldr	r0, [sp, #8]
 8006b84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006b8c:	9002      	str	r0, [sp, #8]
 8006b8e:	463a      	mov	r2, r7
 8006b90:	4640      	mov	r0, r8
 8006b92:	4798      	blx	r3
 8006b94:	6923      	ldr	r3, [r4, #16]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	6123      	str	r3, [r4, #16]
 8006b9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b9e:	fa5f fa8a 	uxtb.w	sl, sl
 8006ba2:	f1ba 0f02 	cmp.w	sl, #2
 8006ba6:	d1ec      	bne.n	8006b82 <_scanf_float+0x2c6>
 8006ba8:	3d03      	subs	r5, #3
 8006baa:	b2ed      	uxtb	r5, r5
 8006bac:	1b76      	subs	r6, r6, r5
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	05da      	lsls	r2, r3, #23
 8006bb2:	d52f      	bpl.n	8006c14 <_scanf_float+0x358>
 8006bb4:	055b      	lsls	r3, r3, #21
 8006bb6:	d510      	bpl.n	8006bda <_scanf_float+0x31e>
 8006bb8:	455e      	cmp	r6, fp
 8006bba:	f67f aebf 	bls.w	800693c <_scanf_float+0x80>
 8006bbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bc6:	463a      	mov	r2, r7
 8006bc8:	4640      	mov	r0, r8
 8006bca:	4798      	blx	r3
 8006bcc:	6923      	ldr	r3, [r4, #16]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	6123      	str	r3, [r4, #16]
 8006bd2:	e7f1      	b.n	8006bb8 <_scanf_float+0x2fc>
 8006bd4:	46aa      	mov	sl, r5
 8006bd6:	9602      	str	r6, [sp, #8]
 8006bd8:	e7df      	b.n	8006b9a <_scanf_float+0x2de>
 8006bda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006bde:	6923      	ldr	r3, [r4, #16]
 8006be0:	2965      	cmp	r1, #101	; 0x65
 8006be2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006be6:	f106 35ff 	add.w	r5, r6, #4294967295
 8006bea:	6123      	str	r3, [r4, #16]
 8006bec:	d00c      	beq.n	8006c08 <_scanf_float+0x34c>
 8006bee:	2945      	cmp	r1, #69	; 0x45
 8006bf0:	d00a      	beq.n	8006c08 <_scanf_float+0x34c>
 8006bf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006bf6:	463a      	mov	r2, r7
 8006bf8:	4640      	mov	r0, r8
 8006bfa:	4798      	blx	r3
 8006bfc:	6923      	ldr	r3, [r4, #16]
 8006bfe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	1eb5      	subs	r5, r6, #2
 8006c06:	6123      	str	r3, [r4, #16]
 8006c08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c0c:	463a      	mov	r2, r7
 8006c0e:	4640      	mov	r0, r8
 8006c10:	4798      	blx	r3
 8006c12:	462e      	mov	r6, r5
 8006c14:	6825      	ldr	r5, [r4, #0]
 8006c16:	f015 0510 	ands.w	r5, r5, #16
 8006c1a:	d14d      	bne.n	8006cb8 <_scanf_float+0x3fc>
 8006c1c:	7035      	strb	r5, [r6, #0]
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c28:	d11a      	bne.n	8006c60 <_scanf_float+0x3a4>
 8006c2a:	9b01      	ldr	r3, [sp, #4]
 8006c2c:	454b      	cmp	r3, r9
 8006c2e:	eba3 0209 	sub.w	r2, r3, r9
 8006c32:	d122      	bne.n	8006c7a <_scanf_float+0x3be>
 8006c34:	2200      	movs	r2, #0
 8006c36:	4659      	mov	r1, fp
 8006c38:	4640      	mov	r0, r8
 8006c3a:	f000 fe5b 	bl	80078f4 <_strtod_r>
 8006c3e:	9b03      	ldr	r3, [sp, #12]
 8006c40:	6821      	ldr	r1, [r4, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f011 0f02 	tst.w	r1, #2
 8006c48:	f103 0204 	add.w	r2, r3, #4
 8006c4c:	d020      	beq.n	8006c90 <_scanf_float+0x3d4>
 8006c4e:	9903      	ldr	r1, [sp, #12]
 8006c50:	600a      	str	r2, [r1, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	ed83 0b00 	vstr	d0, [r3]
 8006c58:	68e3      	ldr	r3, [r4, #12]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	60e3      	str	r3, [r4, #12]
 8006c5e:	e66e      	b.n	800693e <_scanf_float+0x82>
 8006c60:	9b04      	ldr	r3, [sp, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0e6      	beq.n	8006c34 <_scanf_float+0x378>
 8006c66:	9905      	ldr	r1, [sp, #20]
 8006c68:	230a      	movs	r3, #10
 8006c6a:	462a      	mov	r2, r5
 8006c6c:	3101      	adds	r1, #1
 8006c6e:	4640      	mov	r0, r8
 8006c70:	f000 feca 	bl	8007a08 <_strtol_r>
 8006c74:	9b04      	ldr	r3, [sp, #16]
 8006c76:	9e05      	ldr	r6, [sp, #20]
 8006c78:	1ac2      	subs	r2, r0, r3
 8006c7a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006c7e:	429e      	cmp	r6, r3
 8006c80:	bf28      	it	cs
 8006c82:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006c86:	490d      	ldr	r1, [pc, #52]	; (8006cbc <_scanf_float+0x400>)
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f000 f821 	bl	8006cd0 <siprintf>
 8006c8e:	e7d1      	b.n	8006c34 <_scanf_float+0x378>
 8006c90:	f011 0f04 	tst.w	r1, #4
 8006c94:	9903      	ldr	r1, [sp, #12]
 8006c96:	600a      	str	r2, [r1, #0]
 8006c98:	d1db      	bne.n	8006c52 <_scanf_float+0x396>
 8006c9a:	eeb4 0b40 	vcmp.f64	d0, d0
 8006c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca2:	681e      	ldr	r6, [r3, #0]
 8006ca4:	d705      	bvc.n	8006cb2 <_scanf_float+0x3f6>
 8006ca6:	4806      	ldr	r0, [pc, #24]	; (8006cc0 <_scanf_float+0x404>)
 8006ca8:	f000 f80c 	bl	8006cc4 <nanf>
 8006cac:	ed86 0a00 	vstr	s0, [r6]
 8006cb0:	e7d2      	b.n	8006c58 <_scanf_float+0x39c>
 8006cb2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006cb6:	e7f9      	b.n	8006cac <_scanf_float+0x3f0>
 8006cb8:	2500      	movs	r5, #0
 8006cba:	e640      	b.n	800693e <_scanf_float+0x82>
 8006cbc:	0800a750 	.word	0x0800a750
 8006cc0:	0800ab68 	.word	0x0800ab68

08006cc4 <nanf>:
 8006cc4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006ccc <nanf+0x8>
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	7fc00000 	.word	0x7fc00000

08006cd0 <siprintf>:
 8006cd0:	b40e      	push	{r1, r2, r3}
 8006cd2:	b500      	push	{lr}
 8006cd4:	b09c      	sub	sp, #112	; 0x70
 8006cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8006cd8:	9002      	str	r0, [sp, #8]
 8006cda:	9006      	str	r0, [sp, #24]
 8006cdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ce0:	4809      	ldr	r0, [pc, #36]	; (8006d08 <siprintf+0x38>)
 8006ce2:	9107      	str	r1, [sp, #28]
 8006ce4:	9104      	str	r1, [sp, #16]
 8006ce6:	4909      	ldr	r1, [pc, #36]	; (8006d0c <siprintf+0x3c>)
 8006ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cec:	9105      	str	r1, [sp, #20]
 8006cee:	6800      	ldr	r0, [r0, #0]
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	a902      	add	r1, sp, #8
 8006cf4:	f002 fe08 	bl	8009908 <_svfiprintf_r>
 8006cf8:	9b02      	ldr	r3, [sp, #8]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	b01c      	add	sp, #112	; 0x70
 8006d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d04:	b003      	add	sp, #12
 8006d06:	4770      	bx	lr
 8006d08:	2000001c 	.word	0x2000001c
 8006d0c:	ffff0208 	.word	0xffff0208

08006d10 <sulp>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	4604      	mov	r4, r0
 8006d14:	460d      	mov	r5, r1
 8006d16:	4616      	mov	r6, r2
 8006d18:	ec45 4b10 	vmov	d0, r4, r5
 8006d1c:	f002 fb8e 	bl	800943c <__ulp>
 8006d20:	b17e      	cbz	r6, 8006d42 <sulp+0x32>
 8006d22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006d26:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	dd09      	ble.n	8006d42 <sulp+0x32>
 8006d2e:	051b      	lsls	r3, r3, #20
 8006d30:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8006d34:	2000      	movs	r0, #0
 8006d36:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8006d3a:	ec41 0b17 	vmov	d7, r0, r1
 8006d3e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006d42:	bd70      	pop	{r4, r5, r6, pc}
 8006d44:	0000      	movs	r0, r0
	...

08006d48 <_strtod_l>:
 8006d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	ed2d 8b0c 	vpush	{d8-d13}
 8006d50:	b09d      	sub	sp, #116	; 0x74
 8006d52:	461f      	mov	r7, r3
 8006d54:	2300      	movs	r3, #0
 8006d56:	9318      	str	r3, [sp, #96]	; 0x60
 8006d58:	4ba6      	ldr	r3, [pc, #664]	; (8006ff4 <_strtod_l+0x2ac>)
 8006d5a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	9308      	str	r3, [sp, #32]
 8006d60:	4604      	mov	r4, r0
 8006d62:	4618      	mov	r0, r3
 8006d64:	468a      	mov	sl, r1
 8006d66:	f7f9 fa6b 	bl	8000240 <strlen>
 8006d6a:	f04f 0800 	mov.w	r8, #0
 8006d6e:	4605      	mov	r5, r0
 8006d70:	f04f 0900 	mov.w	r9, #0
 8006d74:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006d78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d7a:	781a      	ldrb	r2, [r3, #0]
 8006d7c:	2a2b      	cmp	r2, #43	; 0x2b
 8006d7e:	d04d      	beq.n	8006e1c <_strtod_l+0xd4>
 8006d80:	d83a      	bhi.n	8006df8 <_strtod_l+0xb0>
 8006d82:	2a0d      	cmp	r2, #13
 8006d84:	d833      	bhi.n	8006dee <_strtod_l+0xa6>
 8006d86:	2a08      	cmp	r2, #8
 8006d88:	d833      	bhi.n	8006df2 <_strtod_l+0xaa>
 8006d8a:	2a00      	cmp	r2, #0
 8006d8c:	d03d      	beq.n	8006e0a <_strtod_l+0xc2>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006d94:	7833      	ldrb	r3, [r6, #0]
 8006d96:	2b30      	cmp	r3, #48	; 0x30
 8006d98:	f040 80b6 	bne.w	8006f08 <_strtod_l+0x1c0>
 8006d9c:	7873      	ldrb	r3, [r6, #1]
 8006d9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006da2:	2b58      	cmp	r3, #88	; 0x58
 8006da4:	d16d      	bne.n	8006e82 <_strtod_l+0x13a>
 8006da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da8:	9301      	str	r3, [sp, #4]
 8006daa:	ab18      	add	r3, sp, #96	; 0x60
 8006dac:	9702      	str	r7, [sp, #8]
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	4a91      	ldr	r2, [pc, #580]	; (8006ff8 <_strtod_l+0x2b0>)
 8006db2:	ab19      	add	r3, sp, #100	; 0x64
 8006db4:	a917      	add	r1, sp, #92	; 0x5c
 8006db6:	4620      	mov	r0, r4
 8006db8:	f001 fca0 	bl	80086fc <__gethex>
 8006dbc:	f010 0507 	ands.w	r5, r0, #7
 8006dc0:	4607      	mov	r7, r0
 8006dc2:	d005      	beq.n	8006dd0 <_strtod_l+0x88>
 8006dc4:	2d06      	cmp	r5, #6
 8006dc6:	d12b      	bne.n	8006e20 <_strtod_l+0xd8>
 8006dc8:	3601      	adds	r6, #1
 8006dca:	2300      	movs	r3, #0
 8006dcc:	9617      	str	r6, [sp, #92]	; 0x5c
 8006dce:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f040 856e 	bne.w	80078b4 <_strtod_l+0xb6c>
 8006dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dda:	b1e3      	cbz	r3, 8006e16 <_strtod_l+0xce>
 8006ddc:	ec49 8b17 	vmov	d7, r8, r9
 8006de0:	eeb1 0b47 	vneg.f64	d0, d7
 8006de4:	b01d      	add	sp, #116	; 0x74
 8006de6:	ecbd 8b0c 	vpop	{d8-d13}
 8006dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dee:	2a20      	cmp	r2, #32
 8006df0:	d1cd      	bne.n	8006d8e <_strtod_l+0x46>
 8006df2:	3301      	adds	r3, #1
 8006df4:	9317      	str	r3, [sp, #92]	; 0x5c
 8006df6:	e7bf      	b.n	8006d78 <_strtod_l+0x30>
 8006df8:	2a2d      	cmp	r2, #45	; 0x2d
 8006dfa:	d1c8      	bne.n	8006d8e <_strtod_l+0x46>
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	920b      	str	r2, [sp, #44]	; 0x2c
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e04:	785b      	ldrb	r3, [r3, #1]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1c3      	bne.n	8006d92 <_strtod_l+0x4a>
 8006e0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e0c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f040 854d 	bne.w	80078b0 <_strtod_l+0xb68>
 8006e16:	ec49 8b10 	vmov	d0, r8, r9
 8006e1a:	e7e3      	b.n	8006de4 <_strtod_l+0x9c>
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	e7ee      	b.n	8006dfe <_strtod_l+0xb6>
 8006e20:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e22:	b13a      	cbz	r2, 8006e34 <_strtod_l+0xec>
 8006e24:	2135      	movs	r1, #53	; 0x35
 8006e26:	a81a      	add	r0, sp, #104	; 0x68
 8006e28:	f002 fc14 	bl	8009654 <__copybits>
 8006e2c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f001 ffd8 	bl	8008de4 <_Bfree>
 8006e34:	3d01      	subs	r5, #1
 8006e36:	2d05      	cmp	r5, #5
 8006e38:	d807      	bhi.n	8006e4a <_strtod_l+0x102>
 8006e3a:	e8df f005 	tbb	[pc, r5]
 8006e3e:	0b0e      	.short	0x0b0e
 8006e40:	030e1d18 	.word	0x030e1d18
 8006e44:	f04f 0900 	mov.w	r9, #0
 8006e48:	46c8      	mov	r8, r9
 8006e4a:	073b      	lsls	r3, r7, #28
 8006e4c:	d5c0      	bpl.n	8006dd0 <_strtod_l+0x88>
 8006e4e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006e52:	e7bd      	b.n	8006dd0 <_strtod_l+0x88>
 8006e54:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8006e58:	e7f7      	b.n	8006e4a <_strtod_l+0x102>
 8006e5a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8006e5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006e64:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006e68:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006e6c:	e7ed      	b.n	8006e4a <_strtod_l+0x102>
 8006e6e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8006ffc <_strtod_l+0x2b4>
 8006e72:	f04f 0800 	mov.w	r8, #0
 8006e76:	e7e8      	b.n	8006e4a <_strtod_l+0x102>
 8006e78:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006e7c:	f04f 38ff 	mov.w	r8, #4294967295
 8006e80:	e7e3      	b.n	8006e4a <_strtod_l+0x102>
 8006e82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	2b30      	cmp	r3, #48	; 0x30
 8006e8c:	d0f9      	beq.n	8006e82 <_strtod_l+0x13a>
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d09e      	beq.n	8006dd0 <_strtod_l+0x88>
 8006e92:	2301      	movs	r3, #1
 8006e94:	9306      	str	r3, [sp, #24]
 8006e96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e98:	930c      	str	r3, [sp, #48]	; 0x30
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9304      	str	r3, [sp, #16]
 8006e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006ea0:	461e      	mov	r6, r3
 8006ea2:	220a      	movs	r2, #10
 8006ea4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006ea6:	f890 b000 	ldrb.w	fp, [r0]
 8006eaa:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8006eae:	b2d9      	uxtb	r1, r3
 8006eb0:	2909      	cmp	r1, #9
 8006eb2:	d92b      	bls.n	8006f0c <_strtod_l+0x1c4>
 8006eb4:	9908      	ldr	r1, [sp, #32]
 8006eb6:	462a      	mov	r2, r5
 8006eb8:	f002 fe3e 	bl	8009b38 <strncmp>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d035      	beq.n	8006f2c <_strtod_l+0x1e4>
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	465a      	mov	r2, fp
 8006ec4:	4633      	mov	r3, r6
 8006ec6:	4683      	mov	fp, r0
 8006ec8:	4601      	mov	r1, r0
 8006eca:	2a65      	cmp	r2, #101	; 0x65
 8006ecc:	d001      	beq.n	8006ed2 <_strtod_l+0x18a>
 8006ece:	2a45      	cmp	r2, #69	; 0x45
 8006ed0:	d118      	bne.n	8006f04 <_strtod_l+0x1bc>
 8006ed2:	b91b      	cbnz	r3, 8006edc <_strtod_l+0x194>
 8006ed4:	9b06      	ldr	r3, [sp, #24]
 8006ed6:	4303      	orrs	r3, r0
 8006ed8:	d097      	beq.n	8006e0a <_strtod_l+0xc2>
 8006eda:	2300      	movs	r3, #0
 8006edc:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8006ee0:	f10a 0201 	add.w	r2, sl, #1
 8006ee4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ee6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8006eea:	2a2b      	cmp	r2, #43	; 0x2b
 8006eec:	d077      	beq.n	8006fde <_strtod_l+0x296>
 8006eee:	2a2d      	cmp	r2, #45	; 0x2d
 8006ef0:	d07d      	beq.n	8006fee <_strtod_l+0x2a6>
 8006ef2:	f04f 0e00 	mov.w	lr, #0
 8006ef6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006efa:	2d09      	cmp	r5, #9
 8006efc:	f240 8084 	bls.w	8007008 <_strtod_l+0x2c0>
 8006f00:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006f04:	2500      	movs	r5, #0
 8006f06:	e09f      	b.n	8007048 <_strtod_l+0x300>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e7c3      	b.n	8006e94 <_strtod_l+0x14c>
 8006f0c:	2e08      	cmp	r6, #8
 8006f0e:	bfd5      	itete	le
 8006f10:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006f12:	9904      	ldrgt	r1, [sp, #16]
 8006f14:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f18:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006f1c:	f100 0001 	add.w	r0, r0, #1
 8006f20:	bfd4      	ite	le
 8006f22:	930a      	strle	r3, [sp, #40]	; 0x28
 8006f24:	9304      	strgt	r3, [sp, #16]
 8006f26:	3601      	adds	r6, #1
 8006f28:	9017      	str	r0, [sp, #92]	; 0x5c
 8006f2a:	e7bb      	b.n	8006ea4 <_strtod_l+0x15c>
 8006f2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f2e:	195a      	adds	r2, r3, r5
 8006f30:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f32:	5d5a      	ldrb	r2, [r3, r5]
 8006f34:	b3ae      	cbz	r6, 8006fa2 <_strtod_l+0x25a>
 8006f36:	4683      	mov	fp, r0
 8006f38:	4633      	mov	r3, r6
 8006f3a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f3e:	2909      	cmp	r1, #9
 8006f40:	d912      	bls.n	8006f68 <_strtod_l+0x220>
 8006f42:	2101      	movs	r1, #1
 8006f44:	e7c1      	b.n	8006eca <_strtod_l+0x182>
 8006f46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f48:	1c5a      	adds	r2, r3, #1
 8006f4a:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f4c:	785a      	ldrb	r2, [r3, #1]
 8006f4e:	3001      	adds	r0, #1
 8006f50:	2a30      	cmp	r2, #48	; 0x30
 8006f52:	d0f8      	beq.n	8006f46 <_strtod_l+0x1fe>
 8006f54:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	f200 84b0 	bhi.w	80078be <_strtod_l+0xb76>
 8006f5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f60:	930c      	str	r3, [sp, #48]	; 0x30
 8006f62:	4683      	mov	fp, r0
 8006f64:	2000      	movs	r0, #0
 8006f66:	4603      	mov	r3, r0
 8006f68:	3a30      	subs	r2, #48	; 0x30
 8006f6a:	f100 0101 	add.w	r1, r0, #1
 8006f6e:	d012      	beq.n	8006f96 <_strtod_l+0x24e>
 8006f70:	448b      	add	fp, r1
 8006f72:	eb00 0c03 	add.w	ip, r0, r3
 8006f76:	4619      	mov	r1, r3
 8006f78:	250a      	movs	r5, #10
 8006f7a:	4561      	cmp	r1, ip
 8006f7c:	d113      	bne.n	8006fa6 <_strtod_l+0x25e>
 8006f7e:	1819      	adds	r1, r3, r0
 8006f80:	2908      	cmp	r1, #8
 8006f82:	f103 0301 	add.w	r3, r3, #1
 8006f86:	4403      	add	r3, r0
 8006f88:	dc1d      	bgt.n	8006fc6 <_strtod_l+0x27e>
 8006f8a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006f8c:	210a      	movs	r1, #10
 8006f8e:	fb01 2200 	mla	r2, r1, r0, r2
 8006f92:	920a      	str	r2, [sp, #40]	; 0x28
 8006f94:	2100      	movs	r1, #0
 8006f96:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f98:	1c50      	adds	r0, r2, #1
 8006f9a:	9017      	str	r0, [sp, #92]	; 0x5c
 8006f9c:	7852      	ldrb	r2, [r2, #1]
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	e7cb      	b.n	8006f3a <_strtod_l+0x1f2>
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	e7d4      	b.n	8006f50 <_strtod_l+0x208>
 8006fa6:	2908      	cmp	r1, #8
 8006fa8:	dc04      	bgt.n	8006fb4 <_strtod_l+0x26c>
 8006faa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006fac:	436f      	muls	r7, r5
 8006fae:	970a      	str	r7, [sp, #40]	; 0x28
 8006fb0:	3101      	adds	r1, #1
 8006fb2:	e7e2      	b.n	8006f7a <_strtod_l+0x232>
 8006fb4:	f101 0e01 	add.w	lr, r1, #1
 8006fb8:	f1be 0f10 	cmp.w	lr, #16
 8006fbc:	bfde      	ittt	le
 8006fbe:	9f04      	ldrle	r7, [sp, #16]
 8006fc0:	436f      	mulle	r7, r5
 8006fc2:	9704      	strle	r7, [sp, #16]
 8006fc4:	e7f4      	b.n	8006fb0 <_strtod_l+0x268>
 8006fc6:	2b10      	cmp	r3, #16
 8006fc8:	bfdf      	itttt	le
 8006fca:	9804      	ldrle	r0, [sp, #16]
 8006fcc:	210a      	movle	r1, #10
 8006fce:	fb01 2200 	mlale	r2, r1, r0, r2
 8006fd2:	9204      	strle	r2, [sp, #16]
 8006fd4:	e7de      	b.n	8006f94 <_strtod_l+0x24c>
 8006fd6:	f04f 0b00 	mov.w	fp, #0
 8006fda:	2101      	movs	r1, #1
 8006fdc:	e77a      	b.n	8006ed4 <_strtod_l+0x18c>
 8006fde:	f04f 0e00 	mov.w	lr, #0
 8006fe2:	f10a 0202 	add.w	r2, sl, #2
 8006fe6:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fe8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8006fec:	e783      	b.n	8006ef6 <_strtod_l+0x1ae>
 8006fee:	f04f 0e01 	mov.w	lr, #1
 8006ff2:	e7f6      	b.n	8006fe2 <_strtod_l+0x29a>
 8006ff4:	0800a9a8 	.word	0x0800a9a8
 8006ff8:	0800a758 	.word	0x0800a758
 8006ffc:	7ff00000 	.word	0x7ff00000
 8007000:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007002:	1c55      	adds	r5, r2, #1
 8007004:	9517      	str	r5, [sp, #92]	; 0x5c
 8007006:	7852      	ldrb	r2, [r2, #1]
 8007008:	2a30      	cmp	r2, #48	; 0x30
 800700a:	d0f9      	beq.n	8007000 <_strtod_l+0x2b8>
 800700c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8007010:	2d08      	cmp	r5, #8
 8007012:	f63f af77 	bhi.w	8006f04 <_strtod_l+0x1bc>
 8007016:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800701a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800701c:	9208      	str	r2, [sp, #32]
 800701e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007020:	1c55      	adds	r5, r2, #1
 8007022:	9517      	str	r5, [sp, #92]	; 0x5c
 8007024:	7852      	ldrb	r2, [r2, #1]
 8007026:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800702a:	2f09      	cmp	r7, #9
 800702c:	d937      	bls.n	800709e <_strtod_l+0x356>
 800702e:	9f08      	ldr	r7, [sp, #32]
 8007030:	1bed      	subs	r5, r5, r7
 8007032:	2d08      	cmp	r5, #8
 8007034:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007038:	dc02      	bgt.n	8007040 <_strtod_l+0x2f8>
 800703a:	4565      	cmp	r5, ip
 800703c:	bfa8      	it	ge
 800703e:	4665      	movge	r5, ip
 8007040:	f1be 0f00 	cmp.w	lr, #0
 8007044:	d000      	beq.n	8007048 <_strtod_l+0x300>
 8007046:	426d      	negs	r5, r5
 8007048:	2b00      	cmp	r3, #0
 800704a:	d14f      	bne.n	80070ec <_strtod_l+0x3a4>
 800704c:	9b06      	ldr	r3, [sp, #24]
 800704e:	4303      	orrs	r3, r0
 8007050:	f47f aebe 	bne.w	8006dd0 <_strtod_l+0x88>
 8007054:	2900      	cmp	r1, #0
 8007056:	f47f aed8 	bne.w	8006e0a <_strtod_l+0xc2>
 800705a:	2a69      	cmp	r2, #105	; 0x69
 800705c:	d027      	beq.n	80070ae <_strtod_l+0x366>
 800705e:	dc24      	bgt.n	80070aa <_strtod_l+0x362>
 8007060:	2a49      	cmp	r2, #73	; 0x49
 8007062:	d024      	beq.n	80070ae <_strtod_l+0x366>
 8007064:	2a4e      	cmp	r2, #78	; 0x4e
 8007066:	f47f aed0 	bne.w	8006e0a <_strtod_l+0xc2>
 800706a:	499b      	ldr	r1, [pc, #620]	; (80072d8 <_strtod_l+0x590>)
 800706c:	a817      	add	r0, sp, #92	; 0x5c
 800706e:	f001 fd9d 	bl	8008bac <__match>
 8007072:	2800      	cmp	r0, #0
 8007074:	f43f aec9 	beq.w	8006e0a <_strtod_l+0xc2>
 8007078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b28      	cmp	r3, #40	; 0x28
 800707e:	d12d      	bne.n	80070dc <_strtod_l+0x394>
 8007080:	4996      	ldr	r1, [pc, #600]	; (80072dc <_strtod_l+0x594>)
 8007082:	aa1a      	add	r2, sp, #104	; 0x68
 8007084:	a817      	add	r0, sp, #92	; 0x5c
 8007086:	f001 fda5 	bl	8008bd4 <__hexnan>
 800708a:	2805      	cmp	r0, #5
 800708c:	d126      	bne.n	80070dc <_strtod_l+0x394>
 800708e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007090:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007094:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007098:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800709c:	e698      	b.n	8006dd0 <_strtod_l+0x88>
 800709e:	250a      	movs	r5, #10
 80070a0:	fb05 250c 	mla	r5, r5, ip, r2
 80070a4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80070a8:	e7b9      	b.n	800701e <_strtod_l+0x2d6>
 80070aa:	2a6e      	cmp	r2, #110	; 0x6e
 80070ac:	e7db      	b.n	8007066 <_strtod_l+0x31e>
 80070ae:	498c      	ldr	r1, [pc, #560]	; (80072e0 <_strtod_l+0x598>)
 80070b0:	a817      	add	r0, sp, #92	; 0x5c
 80070b2:	f001 fd7b 	bl	8008bac <__match>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f43f aea7 	beq.w	8006e0a <_strtod_l+0xc2>
 80070bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070be:	4989      	ldr	r1, [pc, #548]	; (80072e4 <_strtod_l+0x59c>)
 80070c0:	3b01      	subs	r3, #1
 80070c2:	a817      	add	r0, sp, #92	; 0x5c
 80070c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80070c6:	f001 fd71 	bl	8008bac <__match>
 80070ca:	b910      	cbnz	r0, 80070d2 <_strtod_l+0x38a>
 80070cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070ce:	3301      	adds	r3, #1
 80070d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80070d2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80072f8 <_strtod_l+0x5b0>
 80070d6:	f04f 0800 	mov.w	r8, #0
 80070da:	e679      	b.n	8006dd0 <_strtod_l+0x88>
 80070dc:	4882      	ldr	r0, [pc, #520]	; (80072e8 <_strtod_l+0x5a0>)
 80070de:	f002 fd13 	bl	8009b08 <nan>
 80070e2:	ed8d 0b04 	vstr	d0, [sp, #16]
 80070e6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80070ea:	e671      	b.n	8006dd0 <_strtod_l+0x88>
 80070ec:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80070f0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80070f4:	eba5 020b 	sub.w	r2, r5, fp
 80070f8:	2e00      	cmp	r6, #0
 80070fa:	bf08      	it	eq
 80070fc:	461e      	moveq	r6, r3
 80070fe:	2b10      	cmp	r3, #16
 8007100:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007104:	9206      	str	r2, [sp, #24]
 8007106:	461a      	mov	r2, r3
 8007108:	bfa8      	it	ge
 800710a:	2210      	movge	r2, #16
 800710c:	2b09      	cmp	r3, #9
 800710e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8007112:	dd0e      	ble.n	8007132 <_strtod_l+0x3ea>
 8007114:	4975      	ldr	r1, [pc, #468]	; (80072ec <_strtod_l+0x5a4>)
 8007116:	eddd 7a04 	vldr	s15, [sp, #16]
 800711a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800711e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8007122:	ed9d 5b08 	vldr	d5, [sp, #32]
 8007126:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800712a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800712e:	ec59 8b17 	vmov	r8, r9, d7
 8007132:	2b0f      	cmp	r3, #15
 8007134:	dc37      	bgt.n	80071a6 <_strtod_l+0x45e>
 8007136:	9906      	ldr	r1, [sp, #24]
 8007138:	2900      	cmp	r1, #0
 800713a:	f43f ae49 	beq.w	8006dd0 <_strtod_l+0x88>
 800713e:	dd23      	ble.n	8007188 <_strtod_l+0x440>
 8007140:	2916      	cmp	r1, #22
 8007142:	dc0b      	bgt.n	800715c <_strtod_l+0x414>
 8007144:	4b69      	ldr	r3, [pc, #420]	; (80072ec <_strtod_l+0x5a4>)
 8007146:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800714a:	ed93 7b00 	vldr	d7, [r3]
 800714e:	ec49 8b16 	vmov	d6, r8, r9
 8007152:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007156:	ec59 8b17 	vmov	r8, r9, d7
 800715a:	e639      	b.n	8006dd0 <_strtod_l+0x88>
 800715c:	9806      	ldr	r0, [sp, #24]
 800715e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8007162:	4281      	cmp	r1, r0
 8007164:	db1f      	blt.n	80071a6 <_strtod_l+0x45e>
 8007166:	4a61      	ldr	r2, [pc, #388]	; (80072ec <_strtod_l+0x5a4>)
 8007168:	f1c3 030f 	rsb	r3, r3, #15
 800716c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007170:	ed91 7b00 	vldr	d7, [r1]
 8007174:	ec49 8b16 	vmov	d6, r8, r9
 8007178:	1ac3      	subs	r3, r0, r3
 800717a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800717e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007182:	ed92 6b00 	vldr	d6, [r2]
 8007186:	e7e4      	b.n	8007152 <_strtod_l+0x40a>
 8007188:	9906      	ldr	r1, [sp, #24]
 800718a:	3116      	adds	r1, #22
 800718c:	db0b      	blt.n	80071a6 <_strtod_l+0x45e>
 800718e:	4b57      	ldr	r3, [pc, #348]	; (80072ec <_strtod_l+0x5a4>)
 8007190:	ebab 0505 	sub.w	r5, fp, r5
 8007194:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007198:	ed95 7b00 	vldr	d7, [r5]
 800719c:	ec49 8b16 	vmov	d6, r8, r9
 80071a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80071a4:	e7d7      	b.n	8007156 <_strtod_l+0x40e>
 80071a6:	9906      	ldr	r1, [sp, #24]
 80071a8:	1a9a      	subs	r2, r3, r2
 80071aa:	440a      	add	r2, r1
 80071ac:	2a00      	cmp	r2, #0
 80071ae:	dd74      	ble.n	800729a <_strtod_l+0x552>
 80071b0:	f012 000f 	ands.w	r0, r2, #15
 80071b4:	d00a      	beq.n	80071cc <_strtod_l+0x484>
 80071b6:	494d      	ldr	r1, [pc, #308]	; (80072ec <_strtod_l+0x5a4>)
 80071b8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80071bc:	ed91 7b00 	vldr	d7, [r1]
 80071c0:	ec49 8b16 	vmov	d6, r8, r9
 80071c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071c8:	ec59 8b17 	vmov	r8, r9, d7
 80071cc:	f032 020f 	bics.w	r2, r2, #15
 80071d0:	d04f      	beq.n	8007272 <_strtod_l+0x52a>
 80071d2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80071d6:	dd22      	ble.n	800721e <_strtod_l+0x4d6>
 80071d8:	2500      	movs	r5, #0
 80071da:	462e      	mov	r6, r5
 80071dc:	950a      	str	r5, [sp, #40]	; 0x28
 80071de:	462f      	mov	r7, r5
 80071e0:	2322      	movs	r3, #34	; 0x22
 80071e2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80072f8 <_strtod_l+0x5b0>
 80071e6:	6023      	str	r3, [r4, #0]
 80071e8:	f04f 0800 	mov.w	r8, #0
 80071ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f43f adee 	beq.w	8006dd0 <_strtod_l+0x88>
 80071f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071f6:	4620      	mov	r0, r4
 80071f8:	f001 fdf4 	bl	8008de4 <_Bfree>
 80071fc:	4639      	mov	r1, r7
 80071fe:	4620      	mov	r0, r4
 8007200:	f001 fdf0 	bl	8008de4 <_Bfree>
 8007204:	4631      	mov	r1, r6
 8007206:	4620      	mov	r0, r4
 8007208:	f001 fdec 	bl	8008de4 <_Bfree>
 800720c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800720e:	4620      	mov	r0, r4
 8007210:	f001 fde8 	bl	8008de4 <_Bfree>
 8007214:	4629      	mov	r1, r5
 8007216:	4620      	mov	r0, r4
 8007218:	f001 fde4 	bl	8008de4 <_Bfree>
 800721c:	e5d8      	b.n	8006dd0 <_strtod_l+0x88>
 800721e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8007222:	2000      	movs	r0, #0
 8007224:	4f32      	ldr	r7, [pc, #200]	; (80072f0 <_strtod_l+0x5a8>)
 8007226:	1112      	asrs	r2, r2, #4
 8007228:	4601      	mov	r1, r0
 800722a:	2a01      	cmp	r2, #1
 800722c:	dc24      	bgt.n	8007278 <_strtod_l+0x530>
 800722e:	b108      	cbz	r0, 8007234 <_strtod_l+0x4ec>
 8007230:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007234:	4a2e      	ldr	r2, [pc, #184]	; (80072f0 <_strtod_l+0x5a8>)
 8007236:	482f      	ldr	r0, [pc, #188]	; (80072f4 <_strtod_l+0x5ac>)
 8007238:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800723c:	ed91 7b00 	vldr	d7, [r1]
 8007240:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007244:	ec49 8b16 	vmov	d6, r8, r9
 8007248:	ee27 7b06 	vmul.f64	d7, d7, d6
 800724c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007250:	9905      	ldr	r1, [sp, #20]
 8007252:	4a29      	ldr	r2, [pc, #164]	; (80072f8 <_strtod_l+0x5b0>)
 8007254:	400a      	ands	r2, r1
 8007256:	4282      	cmp	r2, r0
 8007258:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800725c:	d8bc      	bhi.n	80071d8 <_strtod_l+0x490>
 800725e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8007262:	4282      	cmp	r2, r0
 8007264:	bf86      	itte	hi
 8007266:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80072fc <_strtod_l+0x5b4>
 800726a:	f04f 38ff 	movhi.w	r8, #4294967295
 800726e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8007272:	2200      	movs	r2, #0
 8007274:	9204      	str	r2, [sp, #16]
 8007276:	e07f      	b.n	8007378 <_strtod_l+0x630>
 8007278:	f012 0f01 	tst.w	r2, #1
 800727c:	d00a      	beq.n	8007294 <_strtod_l+0x54c>
 800727e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8007282:	ed90 7b00 	vldr	d7, [r0]
 8007286:	ed9d 6b04 	vldr	d6, [sp, #16]
 800728a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800728e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007292:	2001      	movs	r0, #1
 8007294:	3101      	adds	r1, #1
 8007296:	1052      	asrs	r2, r2, #1
 8007298:	e7c7      	b.n	800722a <_strtod_l+0x4e2>
 800729a:	d0ea      	beq.n	8007272 <_strtod_l+0x52a>
 800729c:	4252      	negs	r2, r2
 800729e:	f012 000f 	ands.w	r0, r2, #15
 80072a2:	d00a      	beq.n	80072ba <_strtod_l+0x572>
 80072a4:	4911      	ldr	r1, [pc, #68]	; (80072ec <_strtod_l+0x5a4>)
 80072a6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80072aa:	ed91 7b00 	vldr	d7, [r1]
 80072ae:	ec49 8b16 	vmov	d6, r8, r9
 80072b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80072b6:	ec59 8b17 	vmov	r8, r9, d7
 80072ba:	1112      	asrs	r2, r2, #4
 80072bc:	d0d9      	beq.n	8007272 <_strtod_l+0x52a>
 80072be:	2a1f      	cmp	r2, #31
 80072c0:	dd1e      	ble.n	8007300 <_strtod_l+0x5b8>
 80072c2:	2500      	movs	r5, #0
 80072c4:	462e      	mov	r6, r5
 80072c6:	950a      	str	r5, [sp, #40]	; 0x28
 80072c8:	462f      	mov	r7, r5
 80072ca:	2322      	movs	r3, #34	; 0x22
 80072cc:	f04f 0800 	mov.w	r8, #0
 80072d0:	f04f 0900 	mov.w	r9, #0
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	e789      	b.n	80071ec <_strtod_l+0x4a4>
 80072d8:	0800a729 	.word	0x0800a729
 80072dc:	0800a76c 	.word	0x0800a76c
 80072e0:	0800a721 	.word	0x0800a721
 80072e4:	0800a8ac 	.word	0x0800a8ac
 80072e8:	0800ab68 	.word	0x0800ab68
 80072ec:	0800aa48 	.word	0x0800aa48
 80072f0:	0800aa20 	.word	0x0800aa20
 80072f4:	7ca00000 	.word	0x7ca00000
 80072f8:	7ff00000 	.word	0x7ff00000
 80072fc:	7fefffff 	.word	0x7fefffff
 8007300:	f012 0110 	ands.w	r1, r2, #16
 8007304:	bf18      	it	ne
 8007306:	216a      	movne	r1, #106	; 0x6a
 8007308:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800730c:	9104      	str	r1, [sp, #16]
 800730e:	49c0      	ldr	r1, [pc, #768]	; (8007610 <_strtod_l+0x8c8>)
 8007310:	2000      	movs	r0, #0
 8007312:	07d7      	lsls	r7, r2, #31
 8007314:	d508      	bpl.n	8007328 <_strtod_l+0x5e0>
 8007316:	ed9d 6b08 	vldr	d6, [sp, #32]
 800731a:	ed91 7b00 	vldr	d7, [r1]
 800731e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007322:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007326:	2001      	movs	r0, #1
 8007328:	1052      	asrs	r2, r2, #1
 800732a:	f101 0108 	add.w	r1, r1, #8
 800732e:	d1f0      	bne.n	8007312 <_strtod_l+0x5ca>
 8007330:	b108      	cbz	r0, 8007336 <_strtod_l+0x5ee>
 8007332:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8007336:	9a04      	ldr	r2, [sp, #16]
 8007338:	b1ba      	cbz	r2, 800736a <_strtod_l+0x622>
 800733a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800733e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8007342:	2a00      	cmp	r2, #0
 8007344:	4649      	mov	r1, r9
 8007346:	dd10      	ble.n	800736a <_strtod_l+0x622>
 8007348:	2a1f      	cmp	r2, #31
 800734a:	f340 8132 	ble.w	80075b2 <_strtod_l+0x86a>
 800734e:	2a34      	cmp	r2, #52	; 0x34
 8007350:	bfde      	ittt	le
 8007352:	3a20      	suble	r2, #32
 8007354:	f04f 30ff 	movle.w	r0, #4294967295
 8007358:	fa00 f202 	lslle.w	r2, r0, r2
 800735c:	f04f 0800 	mov.w	r8, #0
 8007360:	bfcc      	ite	gt
 8007362:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007366:	ea02 0901 	andle.w	r9, r2, r1
 800736a:	ec49 8b17 	vmov	d7, r8, r9
 800736e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007376:	d0a4      	beq.n	80072c2 <_strtod_l+0x57a>
 8007378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800737a:	9200      	str	r2, [sp, #0]
 800737c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800737e:	4632      	mov	r2, r6
 8007380:	4620      	mov	r0, r4
 8007382:	f001 fd9b 	bl	8008ebc <__s2b>
 8007386:	900a      	str	r0, [sp, #40]	; 0x28
 8007388:	2800      	cmp	r0, #0
 800738a:	f43f af25 	beq.w	80071d8 <_strtod_l+0x490>
 800738e:	9b06      	ldr	r3, [sp, #24]
 8007390:	ebab 0505 	sub.w	r5, fp, r5
 8007394:	2b00      	cmp	r3, #0
 8007396:	bfb4      	ite	lt
 8007398:	462b      	movlt	r3, r5
 800739a:	2300      	movge	r3, #0
 800739c:	930c      	str	r3, [sp, #48]	; 0x30
 800739e:	9b06      	ldr	r3, [sp, #24]
 80073a0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80075f8 <_strtod_l+0x8b0>
 80073a4:	ed9f ab96 	vldr	d10, [pc, #600]	; 8007600 <_strtod_l+0x8b8>
 80073a8:	ed9f bb97 	vldr	d11, [pc, #604]	; 8007608 <_strtod_l+0x8c0>
 80073ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073b0:	2500      	movs	r5, #0
 80073b2:	9312      	str	r3, [sp, #72]	; 0x48
 80073b4:	462e      	mov	r6, r5
 80073b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b8:	4620      	mov	r0, r4
 80073ba:	6859      	ldr	r1, [r3, #4]
 80073bc:	f001 fcd2 	bl	8008d64 <_Balloc>
 80073c0:	4607      	mov	r7, r0
 80073c2:	2800      	cmp	r0, #0
 80073c4:	f43f af0c 	beq.w	80071e0 <_strtod_l+0x498>
 80073c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ca:	691a      	ldr	r2, [r3, #16]
 80073cc:	3202      	adds	r2, #2
 80073ce:	f103 010c 	add.w	r1, r3, #12
 80073d2:	0092      	lsls	r2, r2, #2
 80073d4:	300c      	adds	r0, #12
 80073d6:	f001 fcb7 	bl	8008d48 <memcpy>
 80073da:	ec49 8b10 	vmov	d0, r8, r9
 80073de:	aa1a      	add	r2, sp, #104	; 0x68
 80073e0:	a919      	add	r1, sp, #100	; 0x64
 80073e2:	4620      	mov	r0, r4
 80073e4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80073e8:	f002 f8a4 	bl	8009534 <__d2b>
 80073ec:	9018      	str	r0, [sp, #96]	; 0x60
 80073ee:	2800      	cmp	r0, #0
 80073f0:	f43f aef6 	beq.w	80071e0 <_strtod_l+0x498>
 80073f4:	2101      	movs	r1, #1
 80073f6:	4620      	mov	r0, r4
 80073f8:	f001 fdfa 	bl	8008ff0 <__i2b>
 80073fc:	4606      	mov	r6, r0
 80073fe:	2800      	cmp	r0, #0
 8007400:	f43f aeee 	beq.w	80071e0 <_strtod_l+0x498>
 8007404:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007406:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007408:	2b00      	cmp	r3, #0
 800740a:	bfab      	itete	ge
 800740c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800740e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007410:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8007414:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8007418:	bfac      	ite	ge
 800741a:	eb03 0b02 	addge.w	fp, r3, r2
 800741e:	eba2 0a03 	sublt.w	sl, r2, r3
 8007422:	9a04      	ldr	r2, [sp, #16]
 8007424:	1a9b      	subs	r3, r3, r2
 8007426:	440b      	add	r3, r1
 8007428:	4a7a      	ldr	r2, [pc, #488]	; (8007614 <_strtod_l+0x8cc>)
 800742a:	3b01      	subs	r3, #1
 800742c:	4293      	cmp	r3, r2
 800742e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8007432:	f280 80d1 	bge.w	80075d8 <_strtod_l+0x890>
 8007436:	1ad2      	subs	r2, r2, r3
 8007438:	2a1f      	cmp	r2, #31
 800743a:	eba1 0102 	sub.w	r1, r1, r2
 800743e:	f04f 0001 	mov.w	r0, #1
 8007442:	f300 80bd 	bgt.w	80075c0 <_strtod_l+0x878>
 8007446:	fa00 f302 	lsl.w	r3, r0, r2
 800744a:	930e      	str	r3, [sp, #56]	; 0x38
 800744c:	2300      	movs	r3, #0
 800744e:	930d      	str	r3, [sp, #52]	; 0x34
 8007450:	eb0b 0301 	add.w	r3, fp, r1
 8007454:	9a04      	ldr	r2, [sp, #16]
 8007456:	459b      	cmp	fp, r3
 8007458:	448a      	add	sl, r1
 800745a:	4492      	add	sl, r2
 800745c:	465a      	mov	r2, fp
 800745e:	bfa8      	it	ge
 8007460:	461a      	movge	r2, r3
 8007462:	4552      	cmp	r2, sl
 8007464:	bfa8      	it	ge
 8007466:	4652      	movge	r2, sl
 8007468:	2a00      	cmp	r2, #0
 800746a:	bfc2      	ittt	gt
 800746c:	1a9b      	subgt	r3, r3, r2
 800746e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8007472:	ebab 0b02 	subgt.w	fp, fp, r2
 8007476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007478:	2a00      	cmp	r2, #0
 800747a:	dd18      	ble.n	80074ae <_strtod_l+0x766>
 800747c:	4631      	mov	r1, r6
 800747e:	4620      	mov	r0, r4
 8007480:	9315      	str	r3, [sp, #84]	; 0x54
 8007482:	f001 fe71 	bl	8009168 <__pow5mult>
 8007486:	4606      	mov	r6, r0
 8007488:	2800      	cmp	r0, #0
 800748a:	f43f aea9 	beq.w	80071e0 <_strtod_l+0x498>
 800748e:	4601      	mov	r1, r0
 8007490:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007492:	4620      	mov	r0, r4
 8007494:	f001 fdc2 	bl	800901c <__multiply>
 8007498:	9014      	str	r0, [sp, #80]	; 0x50
 800749a:	2800      	cmp	r0, #0
 800749c:	f43f aea0 	beq.w	80071e0 <_strtod_l+0x498>
 80074a0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074a2:	4620      	mov	r0, r4
 80074a4:	f001 fc9e 	bl	8008de4 <_Bfree>
 80074a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074ac:	9218      	str	r2, [sp, #96]	; 0x60
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f300 8097 	bgt.w	80075e2 <_strtod_l+0x89a>
 80074b4:	9b06      	ldr	r3, [sp, #24]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	dd08      	ble.n	80074cc <_strtod_l+0x784>
 80074ba:	4639      	mov	r1, r7
 80074bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074be:	4620      	mov	r0, r4
 80074c0:	f001 fe52 	bl	8009168 <__pow5mult>
 80074c4:	4607      	mov	r7, r0
 80074c6:	2800      	cmp	r0, #0
 80074c8:	f43f ae8a 	beq.w	80071e0 <_strtod_l+0x498>
 80074cc:	f1ba 0f00 	cmp.w	sl, #0
 80074d0:	dd08      	ble.n	80074e4 <_strtod_l+0x79c>
 80074d2:	4639      	mov	r1, r7
 80074d4:	4652      	mov	r2, sl
 80074d6:	4620      	mov	r0, r4
 80074d8:	f001 fea0 	bl	800921c <__lshift>
 80074dc:	4607      	mov	r7, r0
 80074de:	2800      	cmp	r0, #0
 80074e0:	f43f ae7e 	beq.w	80071e0 <_strtod_l+0x498>
 80074e4:	f1bb 0f00 	cmp.w	fp, #0
 80074e8:	dd08      	ble.n	80074fc <_strtod_l+0x7b4>
 80074ea:	4631      	mov	r1, r6
 80074ec:	465a      	mov	r2, fp
 80074ee:	4620      	mov	r0, r4
 80074f0:	f001 fe94 	bl	800921c <__lshift>
 80074f4:	4606      	mov	r6, r0
 80074f6:	2800      	cmp	r0, #0
 80074f8:	f43f ae72 	beq.w	80071e0 <_strtod_l+0x498>
 80074fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074fe:	463a      	mov	r2, r7
 8007500:	4620      	mov	r0, r4
 8007502:	f001 ff13 	bl	800932c <__mdiff>
 8007506:	4605      	mov	r5, r0
 8007508:	2800      	cmp	r0, #0
 800750a:	f43f ae69 	beq.w	80071e0 <_strtod_l+0x498>
 800750e:	2300      	movs	r3, #0
 8007510:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8007514:	60c3      	str	r3, [r0, #12]
 8007516:	4631      	mov	r1, r6
 8007518:	f001 feec 	bl	80092f4 <__mcmp>
 800751c:	2800      	cmp	r0, #0
 800751e:	da7f      	bge.n	8007620 <_strtod_l+0x8d8>
 8007520:	ea5a 0308 	orrs.w	r3, sl, r8
 8007524:	f040 80a5 	bne.w	8007672 <_strtod_l+0x92a>
 8007528:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800752c:	2b00      	cmp	r3, #0
 800752e:	f040 80a0 	bne.w	8007672 <_strtod_l+0x92a>
 8007532:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007536:	0d1b      	lsrs	r3, r3, #20
 8007538:	051b      	lsls	r3, r3, #20
 800753a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800753e:	f240 8098 	bls.w	8007672 <_strtod_l+0x92a>
 8007542:	696b      	ldr	r3, [r5, #20]
 8007544:	b91b      	cbnz	r3, 800754e <_strtod_l+0x806>
 8007546:	692b      	ldr	r3, [r5, #16]
 8007548:	2b01      	cmp	r3, #1
 800754a:	f340 8092 	ble.w	8007672 <_strtod_l+0x92a>
 800754e:	4629      	mov	r1, r5
 8007550:	2201      	movs	r2, #1
 8007552:	4620      	mov	r0, r4
 8007554:	f001 fe62 	bl	800921c <__lshift>
 8007558:	4631      	mov	r1, r6
 800755a:	4605      	mov	r5, r0
 800755c:	f001 feca 	bl	80092f4 <__mcmp>
 8007560:	2800      	cmp	r0, #0
 8007562:	f340 8086 	ble.w	8007672 <_strtod_l+0x92a>
 8007566:	9904      	ldr	r1, [sp, #16]
 8007568:	4a2b      	ldr	r2, [pc, #172]	; (8007618 <_strtod_l+0x8d0>)
 800756a:	464b      	mov	r3, r9
 800756c:	2900      	cmp	r1, #0
 800756e:	f000 80a1 	beq.w	80076b4 <_strtod_l+0x96c>
 8007572:	ea02 0109 	and.w	r1, r2, r9
 8007576:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800757a:	f300 809b 	bgt.w	80076b4 <_strtod_l+0x96c>
 800757e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007582:	f77f aea2 	ble.w	80072ca <_strtod_l+0x582>
 8007586:	4a25      	ldr	r2, [pc, #148]	; (800761c <_strtod_l+0x8d4>)
 8007588:	2300      	movs	r3, #0
 800758a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800758e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8007592:	ec49 8b17 	vmov	d7, r8, r9
 8007596:	ee27 7b06 	vmul.f64	d7, d7, d6
 800759a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800759e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	bf08      	it	eq
 80075a6:	2322      	moveq	r3, #34	; 0x22
 80075a8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80075ac:	bf08      	it	eq
 80075ae:	6023      	streq	r3, [r4, #0]
 80075b0:	e620      	b.n	80071f4 <_strtod_l+0x4ac>
 80075b2:	f04f 31ff 	mov.w	r1, #4294967295
 80075b6:	fa01 f202 	lsl.w	r2, r1, r2
 80075ba:	ea02 0808 	and.w	r8, r2, r8
 80075be:	e6d4      	b.n	800736a <_strtod_l+0x622>
 80075c0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80075c4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80075c8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80075cc:	33e2      	adds	r3, #226	; 0xe2
 80075ce:	fa00 f303 	lsl.w	r3, r0, r3
 80075d2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 80075d6:	e73b      	b.n	8007450 <_strtod_l+0x708>
 80075d8:	2000      	movs	r0, #0
 80075da:	2301      	movs	r3, #1
 80075dc:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 80075e0:	e736      	b.n	8007450 <_strtod_l+0x708>
 80075e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075e4:	461a      	mov	r2, r3
 80075e6:	4620      	mov	r0, r4
 80075e8:	f001 fe18 	bl	800921c <__lshift>
 80075ec:	9018      	str	r0, [sp, #96]	; 0x60
 80075ee:	2800      	cmp	r0, #0
 80075f0:	f47f af60 	bne.w	80074b4 <_strtod_l+0x76c>
 80075f4:	e5f4      	b.n	80071e0 <_strtod_l+0x498>
 80075f6:	bf00      	nop
 80075f8:	94a03595 	.word	0x94a03595
 80075fc:	3fcfffff 	.word	0x3fcfffff
 8007600:	94a03595 	.word	0x94a03595
 8007604:	3fdfffff 	.word	0x3fdfffff
 8007608:	35afe535 	.word	0x35afe535
 800760c:	3fe00000 	.word	0x3fe00000
 8007610:	0800a780 	.word	0x0800a780
 8007614:	fffffc02 	.word	0xfffffc02
 8007618:	7ff00000 	.word	0x7ff00000
 800761c:	39500000 	.word	0x39500000
 8007620:	46cb      	mov	fp, r9
 8007622:	d165      	bne.n	80076f0 <_strtod_l+0x9a8>
 8007624:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007628:	f1ba 0f00 	cmp.w	sl, #0
 800762c:	d02a      	beq.n	8007684 <_strtod_l+0x93c>
 800762e:	4aaa      	ldr	r2, [pc, #680]	; (80078d8 <_strtod_l+0xb90>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d12b      	bne.n	800768c <_strtod_l+0x944>
 8007634:	9b04      	ldr	r3, [sp, #16]
 8007636:	4641      	mov	r1, r8
 8007638:	b1fb      	cbz	r3, 800767a <_strtod_l+0x932>
 800763a:	4aa8      	ldr	r2, [pc, #672]	; (80078dc <_strtod_l+0xb94>)
 800763c:	ea09 0202 	and.w	r2, r9, r2
 8007640:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007644:	f04f 30ff 	mov.w	r0, #4294967295
 8007648:	d81a      	bhi.n	8007680 <_strtod_l+0x938>
 800764a:	0d12      	lsrs	r2, r2, #20
 800764c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007650:	fa00 f303 	lsl.w	r3, r0, r3
 8007654:	4299      	cmp	r1, r3
 8007656:	d119      	bne.n	800768c <_strtod_l+0x944>
 8007658:	4ba1      	ldr	r3, [pc, #644]	; (80078e0 <_strtod_l+0xb98>)
 800765a:	459b      	cmp	fp, r3
 800765c:	d102      	bne.n	8007664 <_strtod_l+0x91c>
 800765e:	3101      	adds	r1, #1
 8007660:	f43f adbe 	beq.w	80071e0 <_strtod_l+0x498>
 8007664:	4b9d      	ldr	r3, [pc, #628]	; (80078dc <_strtod_l+0xb94>)
 8007666:	ea0b 0303 	and.w	r3, fp, r3
 800766a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800766e:	f04f 0800 	mov.w	r8, #0
 8007672:	9b04      	ldr	r3, [sp, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d186      	bne.n	8007586 <_strtod_l+0x83e>
 8007678:	e5bc      	b.n	80071f4 <_strtod_l+0x4ac>
 800767a:	f04f 33ff 	mov.w	r3, #4294967295
 800767e:	e7e9      	b.n	8007654 <_strtod_l+0x90c>
 8007680:	4603      	mov	r3, r0
 8007682:	e7e7      	b.n	8007654 <_strtod_l+0x90c>
 8007684:	ea53 0308 	orrs.w	r3, r3, r8
 8007688:	f43f af6d 	beq.w	8007566 <_strtod_l+0x81e>
 800768c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800768e:	b1db      	cbz	r3, 80076c8 <_strtod_l+0x980>
 8007690:	ea13 0f0b 	tst.w	r3, fp
 8007694:	d0ed      	beq.n	8007672 <_strtod_l+0x92a>
 8007696:	9a04      	ldr	r2, [sp, #16]
 8007698:	4640      	mov	r0, r8
 800769a:	4649      	mov	r1, r9
 800769c:	f1ba 0f00 	cmp.w	sl, #0
 80076a0:	d016      	beq.n	80076d0 <_strtod_l+0x988>
 80076a2:	f7ff fb35 	bl	8006d10 <sulp>
 80076a6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80076aa:	ee37 7b00 	vadd.f64	d7, d7, d0
 80076ae:	ec59 8b17 	vmov	r8, r9, d7
 80076b2:	e7de      	b.n	8007672 <_strtod_l+0x92a>
 80076b4:	4013      	ands	r3, r2
 80076b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80076ba:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80076be:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80076c2:	f04f 38ff 	mov.w	r8, #4294967295
 80076c6:	e7d4      	b.n	8007672 <_strtod_l+0x92a>
 80076c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076ca:	ea13 0f08 	tst.w	r3, r8
 80076ce:	e7e1      	b.n	8007694 <_strtod_l+0x94c>
 80076d0:	f7ff fb1e 	bl	8006d10 <sulp>
 80076d4:	ed9d 7b08 	vldr	d7, [sp, #32]
 80076d8:	ee37 7b40 	vsub.f64	d7, d7, d0
 80076dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80076e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80076e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80076ec:	d1c1      	bne.n	8007672 <_strtod_l+0x92a>
 80076ee:	e5ec      	b.n	80072ca <_strtod_l+0x582>
 80076f0:	4631      	mov	r1, r6
 80076f2:	4628      	mov	r0, r5
 80076f4:	f001 ff7a 	bl	80095ec <__ratio>
 80076f8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80076fc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007704:	d867      	bhi.n	80077d6 <_strtod_l+0xa8e>
 8007706:	f1ba 0f00 	cmp.w	sl, #0
 800770a:	d044      	beq.n	8007796 <_strtod_l+0xa4e>
 800770c:	4b75      	ldr	r3, [pc, #468]	; (80078e4 <_strtod_l+0xb9c>)
 800770e:	2200      	movs	r2, #0
 8007710:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8007714:	4971      	ldr	r1, [pc, #452]	; (80078dc <_strtod_l+0xb94>)
 8007716:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80078f0 <_strtod_l+0xba8>
 800771a:	ea0b 0001 	and.w	r0, fp, r1
 800771e:	4560      	cmp	r0, ip
 8007720:	900d      	str	r0, [sp, #52]	; 0x34
 8007722:	f040 808b 	bne.w	800783c <_strtod_l+0xaf4>
 8007726:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800772a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800772e:	ec49 8b10 	vmov	d0, r8, r9
 8007732:	ec43 2b1c 	vmov	d12, r2, r3
 8007736:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800773a:	f001 fe7f 	bl	800943c <__ulp>
 800773e:	ec49 8b1d 	vmov	d13, r8, r9
 8007742:	eeac db00 	vfma.f64	d13, d12, d0
 8007746:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 800774a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800774c:	4963      	ldr	r1, [pc, #396]	; (80078dc <_strtod_l+0xb94>)
 800774e:	4a66      	ldr	r2, [pc, #408]	; (80078e8 <_strtod_l+0xba0>)
 8007750:	4019      	ands	r1, r3
 8007752:	4291      	cmp	r1, r2
 8007754:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8007758:	d947      	bls.n	80077ea <_strtod_l+0xaa2>
 800775a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800775c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007760:	4293      	cmp	r3, r2
 8007762:	d103      	bne.n	800776c <_strtod_l+0xa24>
 8007764:	9b08      	ldr	r3, [sp, #32]
 8007766:	3301      	adds	r3, #1
 8007768:	f43f ad3a 	beq.w	80071e0 <_strtod_l+0x498>
 800776c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80078e0 <_strtod_l+0xb98>
 8007770:	f04f 38ff 	mov.w	r8, #4294967295
 8007774:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007776:	4620      	mov	r0, r4
 8007778:	f001 fb34 	bl	8008de4 <_Bfree>
 800777c:	4639      	mov	r1, r7
 800777e:	4620      	mov	r0, r4
 8007780:	f001 fb30 	bl	8008de4 <_Bfree>
 8007784:	4631      	mov	r1, r6
 8007786:	4620      	mov	r0, r4
 8007788:	f001 fb2c 	bl	8008de4 <_Bfree>
 800778c:	4629      	mov	r1, r5
 800778e:	4620      	mov	r0, r4
 8007790:	f001 fb28 	bl	8008de4 <_Bfree>
 8007794:	e60f      	b.n	80073b6 <_strtod_l+0x66e>
 8007796:	f1b8 0f00 	cmp.w	r8, #0
 800779a:	d112      	bne.n	80077c2 <_strtod_l+0xa7a>
 800779c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077a0:	b9b3      	cbnz	r3, 80077d0 <_strtod_l+0xa88>
 80077a2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80077a6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80077aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ae:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80077b2:	d401      	bmi.n	80077b8 <_strtod_l+0xa70>
 80077b4:	ee20 8b08 	vmul.f64	d8, d0, d8
 80077b8:	eeb1 7b48 	vneg.f64	d7, d8
 80077bc:	ec53 2b17 	vmov	r2, r3, d7
 80077c0:	e7a8      	b.n	8007714 <_strtod_l+0x9cc>
 80077c2:	f1b8 0f01 	cmp.w	r8, #1
 80077c6:	d103      	bne.n	80077d0 <_strtod_l+0xa88>
 80077c8:	f1b9 0f00 	cmp.w	r9, #0
 80077cc:	f43f ad7d 	beq.w	80072ca <_strtod_l+0x582>
 80077d0:	4b46      	ldr	r3, [pc, #280]	; (80078ec <_strtod_l+0xba4>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	e79c      	b.n	8007710 <_strtod_l+0x9c8>
 80077d6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80077da:	ee20 8b08 	vmul.f64	d8, d0, d8
 80077de:	f1ba 0f00 	cmp.w	sl, #0
 80077e2:	d0e9      	beq.n	80077b8 <_strtod_l+0xa70>
 80077e4:	ec53 2b18 	vmov	r2, r3, d8
 80077e8:	e794      	b.n	8007714 <_strtod_l+0x9cc>
 80077ea:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80077ee:	9b04      	ldr	r3, [sp, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1bf      	bne.n	8007774 <_strtod_l+0xa2c>
 80077f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077fa:	0d1b      	lsrs	r3, r3, #20
 80077fc:	051b      	lsls	r3, r3, #20
 80077fe:	429a      	cmp	r2, r3
 8007800:	d1b8      	bne.n	8007774 <_strtod_l+0xa2c>
 8007802:	ec51 0b18 	vmov	r0, r1, d8
 8007806:	f7f8 ff47 	bl	8000698 <__aeabi_d2lz>
 800780a:	f7f8 feff 	bl	800060c <__aeabi_l2d>
 800780e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007812:	ec41 0b17 	vmov	d7, r0, r1
 8007816:	ea43 0308 	orr.w	r3, r3, r8
 800781a:	ea53 030a 	orrs.w	r3, r3, sl
 800781e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007822:	d03e      	beq.n	80078a2 <_strtod_l+0xb5a>
 8007824:	eeb4 8bca 	vcmpe.f64	d8, d10
 8007828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800782c:	f53f ace2 	bmi.w	80071f4 <_strtod_l+0x4ac>
 8007830:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8007834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007838:	dd9c      	ble.n	8007774 <_strtod_l+0xa2c>
 800783a:	e4db      	b.n	80071f4 <_strtod_l+0x4ac>
 800783c:	9904      	ldr	r1, [sp, #16]
 800783e:	b301      	cbz	r1, 8007882 <_strtod_l+0xb3a>
 8007840:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007842:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007846:	d81c      	bhi.n	8007882 <_strtod_l+0xb3a>
 8007848:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80078d0 <_strtod_l+0xb88>
 800784c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007854:	d811      	bhi.n	800787a <_strtod_l+0xb32>
 8007856:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800785a:	ee18 3a10 	vmov	r3, s16
 800785e:	2b01      	cmp	r3, #1
 8007860:	bf38      	it	cc
 8007862:	2301      	movcc	r3, #1
 8007864:	ee08 3a10 	vmov	s16, r3
 8007868:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800786c:	f1ba 0f00 	cmp.w	sl, #0
 8007870:	d114      	bne.n	800789c <_strtod_l+0xb54>
 8007872:	eeb1 7b48 	vneg.f64	d7, d8
 8007876:	ec53 2b17 	vmov	r2, r3, d7
 800787a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800787c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8007880:	1a0b      	subs	r3, r1, r0
 8007882:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007886:	ec43 2b1c 	vmov	d12, r2, r3
 800788a:	f001 fdd7 	bl	800943c <__ulp>
 800788e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007892:	eeac 7b00 	vfma.f64	d7, d12, d0
 8007896:	ec59 8b17 	vmov	r8, r9, d7
 800789a:	e7a8      	b.n	80077ee <_strtod_l+0xaa6>
 800789c:	ec53 2b18 	vmov	r2, r3, d8
 80078a0:	e7eb      	b.n	800787a <_strtod_l+0xb32>
 80078a2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80078a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078aa:	f57f af63 	bpl.w	8007774 <_strtod_l+0xa2c>
 80078ae:	e4a1      	b.n	80071f4 <_strtod_l+0x4ac>
 80078b0:	2300      	movs	r3, #0
 80078b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80078b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80078b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078b8:	6013      	str	r3, [r2, #0]
 80078ba:	f7ff ba8d 	b.w	8006dd8 <_strtod_l+0x90>
 80078be:	2a65      	cmp	r2, #101	; 0x65
 80078c0:	f43f ab89 	beq.w	8006fd6 <_strtod_l+0x28e>
 80078c4:	2a45      	cmp	r2, #69	; 0x45
 80078c6:	f43f ab86 	beq.w	8006fd6 <_strtod_l+0x28e>
 80078ca:	2101      	movs	r1, #1
 80078cc:	f7ff bbbe 	b.w	800704c <_strtod_l+0x304>
 80078d0:	ffc00000 	.word	0xffc00000
 80078d4:	41dfffff 	.word	0x41dfffff
 80078d8:	000fffff 	.word	0x000fffff
 80078dc:	7ff00000 	.word	0x7ff00000
 80078e0:	7fefffff 	.word	0x7fefffff
 80078e4:	3ff00000 	.word	0x3ff00000
 80078e8:	7c9fffff 	.word	0x7c9fffff
 80078ec:	bff00000 	.word	0xbff00000
 80078f0:	7fe00000 	.word	0x7fe00000

080078f4 <_strtod_r>:
 80078f4:	4b01      	ldr	r3, [pc, #4]	; (80078fc <_strtod_r+0x8>)
 80078f6:	f7ff ba27 	b.w	8006d48 <_strtod_l>
 80078fa:	bf00      	nop
 80078fc:	20000084 	.word	0x20000084

08007900 <_strtol_l.isra.0>:
 8007900:	2b01      	cmp	r3, #1
 8007902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007906:	d001      	beq.n	800790c <_strtol_l.isra.0+0xc>
 8007908:	2b24      	cmp	r3, #36	; 0x24
 800790a:	d906      	bls.n	800791a <_strtol_l.isra.0+0x1a>
 800790c:	f7fe fb60 	bl	8005fd0 <__errno>
 8007910:	2316      	movs	r3, #22
 8007912:	6003      	str	r3, [r0, #0]
 8007914:	2000      	movs	r0, #0
 8007916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800791a:	4f3a      	ldr	r7, [pc, #232]	; (8007a04 <_strtol_l.isra.0+0x104>)
 800791c:	468e      	mov	lr, r1
 800791e:	4676      	mov	r6, lr
 8007920:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007924:	5de5      	ldrb	r5, [r4, r7]
 8007926:	f015 0508 	ands.w	r5, r5, #8
 800792a:	d1f8      	bne.n	800791e <_strtol_l.isra.0+0x1e>
 800792c:	2c2d      	cmp	r4, #45	; 0x2d
 800792e:	d134      	bne.n	800799a <_strtol_l.isra.0+0x9a>
 8007930:	f89e 4000 	ldrb.w	r4, [lr]
 8007934:	f04f 0801 	mov.w	r8, #1
 8007938:	f106 0e02 	add.w	lr, r6, #2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d05c      	beq.n	80079fa <_strtol_l.isra.0+0xfa>
 8007940:	2b10      	cmp	r3, #16
 8007942:	d10c      	bne.n	800795e <_strtol_l.isra.0+0x5e>
 8007944:	2c30      	cmp	r4, #48	; 0x30
 8007946:	d10a      	bne.n	800795e <_strtol_l.isra.0+0x5e>
 8007948:	f89e 4000 	ldrb.w	r4, [lr]
 800794c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007950:	2c58      	cmp	r4, #88	; 0x58
 8007952:	d14d      	bne.n	80079f0 <_strtol_l.isra.0+0xf0>
 8007954:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007958:	2310      	movs	r3, #16
 800795a:	f10e 0e02 	add.w	lr, lr, #2
 800795e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007962:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007966:	2600      	movs	r6, #0
 8007968:	fbbc f9f3 	udiv	r9, ip, r3
 800796c:	4635      	mov	r5, r6
 800796e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007972:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007976:	2f09      	cmp	r7, #9
 8007978:	d818      	bhi.n	80079ac <_strtol_l.isra.0+0xac>
 800797a:	463c      	mov	r4, r7
 800797c:	42a3      	cmp	r3, r4
 800797e:	dd24      	ble.n	80079ca <_strtol_l.isra.0+0xca>
 8007980:	2e00      	cmp	r6, #0
 8007982:	db1f      	blt.n	80079c4 <_strtol_l.isra.0+0xc4>
 8007984:	45a9      	cmp	r9, r5
 8007986:	d31d      	bcc.n	80079c4 <_strtol_l.isra.0+0xc4>
 8007988:	d101      	bne.n	800798e <_strtol_l.isra.0+0x8e>
 800798a:	45a2      	cmp	sl, r4
 800798c:	db1a      	blt.n	80079c4 <_strtol_l.isra.0+0xc4>
 800798e:	fb05 4503 	mla	r5, r5, r3, r4
 8007992:	2601      	movs	r6, #1
 8007994:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007998:	e7eb      	b.n	8007972 <_strtol_l.isra.0+0x72>
 800799a:	2c2b      	cmp	r4, #43	; 0x2b
 800799c:	bf08      	it	eq
 800799e:	f89e 4000 	ldrbeq.w	r4, [lr]
 80079a2:	46a8      	mov	r8, r5
 80079a4:	bf08      	it	eq
 80079a6:	f106 0e02 	addeq.w	lr, r6, #2
 80079aa:	e7c7      	b.n	800793c <_strtol_l.isra.0+0x3c>
 80079ac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80079b0:	2f19      	cmp	r7, #25
 80079b2:	d801      	bhi.n	80079b8 <_strtol_l.isra.0+0xb8>
 80079b4:	3c37      	subs	r4, #55	; 0x37
 80079b6:	e7e1      	b.n	800797c <_strtol_l.isra.0+0x7c>
 80079b8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80079bc:	2f19      	cmp	r7, #25
 80079be:	d804      	bhi.n	80079ca <_strtol_l.isra.0+0xca>
 80079c0:	3c57      	subs	r4, #87	; 0x57
 80079c2:	e7db      	b.n	800797c <_strtol_l.isra.0+0x7c>
 80079c4:	f04f 36ff 	mov.w	r6, #4294967295
 80079c8:	e7e4      	b.n	8007994 <_strtol_l.isra.0+0x94>
 80079ca:	2e00      	cmp	r6, #0
 80079cc:	da05      	bge.n	80079da <_strtol_l.isra.0+0xda>
 80079ce:	2322      	movs	r3, #34	; 0x22
 80079d0:	6003      	str	r3, [r0, #0]
 80079d2:	4665      	mov	r5, ip
 80079d4:	b942      	cbnz	r2, 80079e8 <_strtol_l.isra.0+0xe8>
 80079d6:	4628      	mov	r0, r5
 80079d8:	e79d      	b.n	8007916 <_strtol_l.isra.0+0x16>
 80079da:	f1b8 0f00 	cmp.w	r8, #0
 80079de:	d000      	beq.n	80079e2 <_strtol_l.isra.0+0xe2>
 80079e0:	426d      	negs	r5, r5
 80079e2:	2a00      	cmp	r2, #0
 80079e4:	d0f7      	beq.n	80079d6 <_strtol_l.isra.0+0xd6>
 80079e6:	b10e      	cbz	r6, 80079ec <_strtol_l.isra.0+0xec>
 80079e8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80079ec:	6011      	str	r1, [r2, #0]
 80079ee:	e7f2      	b.n	80079d6 <_strtol_l.isra.0+0xd6>
 80079f0:	2430      	movs	r4, #48	; 0x30
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1b3      	bne.n	800795e <_strtol_l.isra.0+0x5e>
 80079f6:	2308      	movs	r3, #8
 80079f8:	e7b1      	b.n	800795e <_strtol_l.isra.0+0x5e>
 80079fa:	2c30      	cmp	r4, #48	; 0x30
 80079fc:	d0a4      	beq.n	8007948 <_strtol_l.isra.0+0x48>
 80079fe:	230a      	movs	r3, #10
 8007a00:	e7ad      	b.n	800795e <_strtol_l.isra.0+0x5e>
 8007a02:	bf00      	nop
 8007a04:	0800a7a9 	.word	0x0800a7a9

08007a08 <_strtol_r>:
 8007a08:	f7ff bf7a 	b.w	8007900 <_strtol_l.isra.0>

08007a0c <quorem>:
 8007a0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a10:	6903      	ldr	r3, [r0, #16]
 8007a12:	690c      	ldr	r4, [r1, #16]
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	4607      	mov	r7, r0
 8007a18:	f2c0 8081 	blt.w	8007b1e <quorem+0x112>
 8007a1c:	3c01      	subs	r4, #1
 8007a1e:	f101 0814 	add.w	r8, r1, #20
 8007a22:	f100 0514 	add.w	r5, r0, #20
 8007a26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a34:	3301      	adds	r3, #1
 8007a36:	429a      	cmp	r2, r3
 8007a38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a40:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a44:	d331      	bcc.n	8007aaa <quorem+0x9e>
 8007a46:	f04f 0e00 	mov.w	lr, #0
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	46ac      	mov	ip, r5
 8007a4e:	46f2      	mov	sl, lr
 8007a50:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a54:	b293      	uxth	r3, r2
 8007a56:	fb06 e303 	mla	r3, r6, r3, lr
 8007a5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	ebaa 0303 	sub.w	r3, sl, r3
 8007a64:	0c12      	lsrs	r2, r2, #16
 8007a66:	f8dc a000 	ldr.w	sl, [ip]
 8007a6a:	fb06 e202 	mla	r2, r6, r2, lr
 8007a6e:	fa13 f38a 	uxtah	r3, r3, sl
 8007a72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a76:	fa1f fa82 	uxth.w	sl, r2
 8007a7a:	f8dc 2000 	ldr.w	r2, [ip]
 8007a7e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007a82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a8c:	4581      	cmp	r9, r0
 8007a8e:	f84c 3b04 	str.w	r3, [ip], #4
 8007a92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a96:	d2db      	bcs.n	8007a50 <quorem+0x44>
 8007a98:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a9c:	b92b      	cbnz	r3, 8007aaa <quorem+0x9e>
 8007a9e:	9b01      	ldr	r3, [sp, #4]
 8007aa0:	3b04      	subs	r3, #4
 8007aa2:	429d      	cmp	r5, r3
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	d32e      	bcc.n	8007b06 <quorem+0xfa>
 8007aa8:	613c      	str	r4, [r7, #16]
 8007aaa:	4638      	mov	r0, r7
 8007aac:	f001 fc22 	bl	80092f4 <__mcmp>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	db24      	blt.n	8007afe <quorem+0xf2>
 8007ab4:	3601      	adds	r6, #1
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f04f 0c00 	mov.w	ip, #0
 8007abc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ac0:	f8d0 e000 	ldr.w	lr, [r0]
 8007ac4:	b293      	uxth	r3, r2
 8007ac6:	ebac 0303 	sub.w	r3, ip, r3
 8007aca:	0c12      	lsrs	r2, r2, #16
 8007acc:	fa13 f38e 	uxtah	r3, r3, lr
 8007ad0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ad4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ade:	45c1      	cmp	r9, r8
 8007ae0:	f840 3b04 	str.w	r3, [r0], #4
 8007ae4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ae8:	d2e8      	bcs.n	8007abc <quorem+0xb0>
 8007aea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007af2:	b922      	cbnz	r2, 8007afe <quorem+0xf2>
 8007af4:	3b04      	subs	r3, #4
 8007af6:	429d      	cmp	r5, r3
 8007af8:	461a      	mov	r2, r3
 8007afa:	d30a      	bcc.n	8007b12 <quorem+0x106>
 8007afc:	613c      	str	r4, [r7, #16]
 8007afe:	4630      	mov	r0, r6
 8007b00:	b003      	add	sp, #12
 8007b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b06:	6812      	ldr	r2, [r2, #0]
 8007b08:	3b04      	subs	r3, #4
 8007b0a:	2a00      	cmp	r2, #0
 8007b0c:	d1cc      	bne.n	8007aa8 <quorem+0x9c>
 8007b0e:	3c01      	subs	r4, #1
 8007b10:	e7c7      	b.n	8007aa2 <quorem+0x96>
 8007b12:	6812      	ldr	r2, [r2, #0]
 8007b14:	3b04      	subs	r3, #4
 8007b16:	2a00      	cmp	r2, #0
 8007b18:	d1f0      	bne.n	8007afc <quorem+0xf0>
 8007b1a:	3c01      	subs	r4, #1
 8007b1c:	e7eb      	b.n	8007af6 <quorem+0xea>
 8007b1e:	2000      	movs	r0, #0
 8007b20:	e7ee      	b.n	8007b00 <quorem+0xf4>
 8007b22:	0000      	movs	r0, r0
 8007b24:	0000      	movs	r0, r0
	...

08007b28 <_dtoa_r>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	ec59 8b10 	vmov	r8, r9, d0
 8007b30:	b095      	sub	sp, #84	; 0x54
 8007b32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b34:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007b36:	9107      	str	r1, [sp, #28]
 8007b38:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b40:	9310      	str	r3, [sp, #64]	; 0x40
 8007b42:	b975      	cbnz	r5, 8007b62 <_dtoa_r+0x3a>
 8007b44:	2010      	movs	r0, #16
 8007b46:	f001 f8e5 	bl	8008d14 <malloc>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	6270      	str	r0, [r6, #36]	; 0x24
 8007b4e:	b920      	cbnz	r0, 8007b5a <_dtoa_r+0x32>
 8007b50:	4bab      	ldr	r3, [pc, #684]	; (8007e00 <_dtoa_r+0x2d8>)
 8007b52:	21ea      	movs	r1, #234	; 0xea
 8007b54:	48ab      	ldr	r0, [pc, #684]	; (8007e04 <_dtoa_r+0x2dc>)
 8007b56:	f002 f80f 	bl	8009b78 <__assert_func>
 8007b5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b5e:	6005      	str	r5, [r0, #0]
 8007b60:	60c5      	str	r5, [r0, #12]
 8007b62:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007b64:	6819      	ldr	r1, [r3, #0]
 8007b66:	b151      	cbz	r1, 8007b7e <_dtoa_r+0x56>
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	604a      	str	r2, [r1, #4]
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	4093      	lsls	r3, r2
 8007b70:	608b      	str	r3, [r1, #8]
 8007b72:	4630      	mov	r0, r6
 8007b74:	f001 f936 	bl	8008de4 <_Bfree>
 8007b78:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	f1b9 0300 	subs.w	r3, r9, #0
 8007b82:	bfbb      	ittet	lt
 8007b84:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b88:	9303      	strlt	r3, [sp, #12]
 8007b8a:	2300      	movge	r3, #0
 8007b8c:	2201      	movlt	r2, #1
 8007b8e:	bfac      	ite	ge
 8007b90:	6023      	strge	r3, [r4, #0]
 8007b92:	6022      	strlt	r2, [r4, #0]
 8007b94:	4b9c      	ldr	r3, [pc, #624]	; (8007e08 <_dtoa_r+0x2e0>)
 8007b96:	9c03      	ldr	r4, [sp, #12]
 8007b98:	43a3      	bics	r3, r4
 8007b9a:	d11a      	bne.n	8007bd2 <_dtoa_r+0xaa>
 8007b9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007ba8:	ea53 0308 	orrs.w	r3, r3, r8
 8007bac:	f000 8512 	beq.w	80085d4 <_dtoa_r+0xaac>
 8007bb0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007bb2:	b953      	cbnz	r3, 8007bca <_dtoa_r+0xa2>
 8007bb4:	4b95      	ldr	r3, [pc, #596]	; (8007e0c <_dtoa_r+0x2e4>)
 8007bb6:	e01f      	b.n	8007bf8 <_dtoa_r+0xd0>
 8007bb8:	4b95      	ldr	r3, [pc, #596]	; (8007e10 <_dtoa_r+0x2e8>)
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007bc0:	6013      	str	r3, [r2, #0]
 8007bc2:	9800      	ldr	r0, [sp, #0]
 8007bc4:	b015      	add	sp, #84	; 0x54
 8007bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bca:	4b90      	ldr	r3, [pc, #576]	; (8007e0c <_dtoa_r+0x2e4>)
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	3303      	adds	r3, #3
 8007bd0:	e7f5      	b.n	8007bbe <_dtoa_r+0x96>
 8007bd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bd6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bde:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007be2:	d10b      	bne.n	8007bfc <_dtoa_r+0xd4>
 8007be4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007be6:	2301      	movs	r3, #1
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 84ee 	beq.w	80085ce <_dtoa_r+0xaa6>
 8007bf2:	4888      	ldr	r0, [pc, #544]	; (8007e14 <_dtoa_r+0x2ec>)
 8007bf4:	6018      	str	r0, [r3, #0]
 8007bf6:	1e43      	subs	r3, r0, #1
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	e7e2      	b.n	8007bc2 <_dtoa_r+0x9a>
 8007bfc:	a913      	add	r1, sp, #76	; 0x4c
 8007bfe:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007c02:	aa12      	add	r2, sp, #72	; 0x48
 8007c04:	4630      	mov	r0, r6
 8007c06:	f001 fc95 	bl	8009534 <__d2b>
 8007c0a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007c0e:	4605      	mov	r5, r0
 8007c10:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007c12:	2900      	cmp	r1, #0
 8007c14:	d047      	beq.n	8007ca6 <_dtoa_r+0x17e>
 8007c16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007c18:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007c1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c20:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8007c24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c28:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007c2c:	2400      	movs	r4, #0
 8007c2e:	ec43 2b16 	vmov	d6, r2, r3
 8007c32:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8007c36:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8007de8 <_dtoa_r+0x2c0>
 8007c3a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007c3e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8007df0 <_dtoa_r+0x2c8>
 8007c42:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007c46:	eeb0 7b46 	vmov.f64	d7, d6
 8007c4a:	ee06 1a90 	vmov	s13, r1
 8007c4e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8007c52:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8007df8 <_dtoa_r+0x2d0>
 8007c56:	eea5 7b06 	vfma.f64	d7, d5, d6
 8007c5a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007c5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c66:	ee16 ba90 	vmov	fp, s13
 8007c6a:	9411      	str	r4, [sp, #68]	; 0x44
 8007c6c:	d508      	bpl.n	8007c80 <_dtoa_r+0x158>
 8007c6e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007c72:	eeb4 6b47 	vcmp.f64	d6, d7
 8007c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c7a:	bf18      	it	ne
 8007c7c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007c80:	f1bb 0f16 	cmp.w	fp, #22
 8007c84:	d832      	bhi.n	8007cec <_dtoa_r+0x1c4>
 8007c86:	4b64      	ldr	r3, [pc, #400]	; (8007e18 <_dtoa_r+0x2f0>)
 8007c88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c8c:	ed93 7b00 	vldr	d7, [r3]
 8007c90:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007c94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c9c:	d501      	bpl.n	8007ca2 <_dtoa_r+0x17a>
 8007c9e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e023      	b.n	8007cee <_dtoa_r+0x1c6>
 8007ca6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ca8:	4401      	add	r1, r0
 8007caa:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	bfc3      	ittte	gt
 8007cb2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007cb6:	fa04 f303 	lslgt.w	r3, r4, r3
 8007cba:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8007cbe:	f1c3 0320 	rsble	r3, r3, #32
 8007cc2:	bfc6      	itte	gt
 8007cc4:	fa28 f804 	lsrgt.w	r8, r8, r4
 8007cc8:	ea43 0308 	orrgt.w	r3, r3, r8
 8007ccc:	fa08 f303 	lslle.w	r3, r8, r3
 8007cd0:	ee07 3a90 	vmov	s15, r3
 8007cd4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007cd8:	3901      	subs	r1, #1
 8007cda:	ed8d 7b00 	vstr	d7, [sp]
 8007cde:	9c01      	ldr	r4, [sp, #4]
 8007ce0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ce4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8007ce8:	2401      	movs	r4, #1
 8007cea:	e7a0      	b.n	8007c2e <_dtoa_r+0x106>
 8007cec:	2301      	movs	r3, #1
 8007cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cf0:	1a43      	subs	r3, r0, r1
 8007cf2:	1e5a      	subs	r2, r3, #1
 8007cf4:	bf45      	ittet	mi
 8007cf6:	f1c3 0301 	rsbmi	r3, r3, #1
 8007cfa:	9305      	strmi	r3, [sp, #20]
 8007cfc:	2300      	movpl	r3, #0
 8007cfe:	2300      	movmi	r3, #0
 8007d00:	9206      	str	r2, [sp, #24]
 8007d02:	bf54      	ite	pl
 8007d04:	9305      	strpl	r3, [sp, #20]
 8007d06:	9306      	strmi	r3, [sp, #24]
 8007d08:	f1bb 0f00 	cmp.w	fp, #0
 8007d0c:	db18      	blt.n	8007d40 <_dtoa_r+0x218>
 8007d0e:	9b06      	ldr	r3, [sp, #24]
 8007d10:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8007d14:	445b      	add	r3, fp
 8007d16:	9306      	str	r3, [sp, #24]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9a07      	ldr	r2, [sp, #28]
 8007d1c:	2a09      	cmp	r2, #9
 8007d1e:	d849      	bhi.n	8007db4 <_dtoa_r+0x28c>
 8007d20:	2a05      	cmp	r2, #5
 8007d22:	bfc4      	itt	gt
 8007d24:	3a04      	subgt	r2, #4
 8007d26:	9207      	strgt	r2, [sp, #28]
 8007d28:	9a07      	ldr	r2, [sp, #28]
 8007d2a:	f1a2 0202 	sub.w	r2, r2, #2
 8007d2e:	bfcc      	ite	gt
 8007d30:	2400      	movgt	r4, #0
 8007d32:	2401      	movle	r4, #1
 8007d34:	2a03      	cmp	r2, #3
 8007d36:	d848      	bhi.n	8007dca <_dtoa_r+0x2a2>
 8007d38:	e8df f002 	tbb	[pc, r2]
 8007d3c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007d40:	9b05      	ldr	r3, [sp, #20]
 8007d42:	2200      	movs	r2, #0
 8007d44:	eba3 030b 	sub.w	r3, r3, fp
 8007d48:	9305      	str	r3, [sp, #20]
 8007d4a:	920e      	str	r2, [sp, #56]	; 0x38
 8007d4c:	f1cb 0300 	rsb	r3, fp, #0
 8007d50:	e7e3      	b.n	8007d1a <_dtoa_r+0x1f2>
 8007d52:	2200      	movs	r2, #0
 8007d54:	9208      	str	r2, [sp, #32]
 8007d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d58:	2a00      	cmp	r2, #0
 8007d5a:	dc39      	bgt.n	8007dd0 <_dtoa_r+0x2a8>
 8007d5c:	f04f 0a01 	mov.w	sl, #1
 8007d60:	46d1      	mov	r9, sl
 8007d62:	4652      	mov	r2, sl
 8007d64:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007d68:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	6079      	str	r1, [r7, #4]
 8007d6e:	2004      	movs	r0, #4
 8007d70:	f100 0c14 	add.w	ip, r0, #20
 8007d74:	4594      	cmp	ip, r2
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	d92f      	bls.n	8007dda <_dtoa_r+0x2b2>
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	930c      	str	r3, [sp, #48]	; 0x30
 8007d7e:	f000 fff1 	bl	8008d64 <_Balloc>
 8007d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d84:	9000      	str	r0, [sp, #0]
 8007d86:	4602      	mov	r2, r0
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d149      	bne.n	8007e20 <_dtoa_r+0x2f8>
 8007d8c:	4b23      	ldr	r3, [pc, #140]	; (8007e1c <_dtoa_r+0x2f4>)
 8007d8e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d92:	e6df      	b.n	8007b54 <_dtoa_r+0x2c>
 8007d94:	2201      	movs	r2, #1
 8007d96:	e7dd      	b.n	8007d54 <_dtoa_r+0x22c>
 8007d98:	2200      	movs	r2, #0
 8007d9a:	9208      	str	r2, [sp, #32]
 8007d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d9e:	eb0b 0a02 	add.w	sl, fp, r2
 8007da2:	f10a 0901 	add.w	r9, sl, #1
 8007da6:	464a      	mov	r2, r9
 8007da8:	2a01      	cmp	r2, #1
 8007daa:	bfb8      	it	lt
 8007dac:	2201      	movlt	r2, #1
 8007dae:	e7db      	b.n	8007d68 <_dtoa_r+0x240>
 8007db0:	2201      	movs	r2, #1
 8007db2:	e7f2      	b.n	8007d9a <_dtoa_r+0x272>
 8007db4:	2401      	movs	r4, #1
 8007db6:	2200      	movs	r2, #0
 8007db8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007dbc:	f04f 3aff 	mov.w	sl, #4294967295
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	46d1      	mov	r9, sl
 8007dc4:	2212      	movs	r2, #18
 8007dc6:	9109      	str	r1, [sp, #36]	; 0x24
 8007dc8:	e7ce      	b.n	8007d68 <_dtoa_r+0x240>
 8007dca:	2201      	movs	r2, #1
 8007dcc:	9208      	str	r2, [sp, #32]
 8007dce:	e7f5      	b.n	8007dbc <_dtoa_r+0x294>
 8007dd0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8007dd4:	46d1      	mov	r9, sl
 8007dd6:	4652      	mov	r2, sl
 8007dd8:	e7c6      	b.n	8007d68 <_dtoa_r+0x240>
 8007dda:	3101      	adds	r1, #1
 8007ddc:	6079      	str	r1, [r7, #4]
 8007dde:	0040      	lsls	r0, r0, #1
 8007de0:	e7c6      	b.n	8007d70 <_dtoa_r+0x248>
 8007de2:	bf00      	nop
 8007de4:	f3af 8000 	nop.w
 8007de8:	636f4361 	.word	0x636f4361
 8007dec:	3fd287a7 	.word	0x3fd287a7
 8007df0:	8b60c8b3 	.word	0x8b60c8b3
 8007df4:	3fc68a28 	.word	0x3fc68a28
 8007df8:	509f79fb 	.word	0x509f79fb
 8007dfc:	3fd34413 	.word	0x3fd34413
 8007e00:	0800a8b6 	.word	0x0800a8b6
 8007e04:	0800a8cd 	.word	0x0800a8cd
 8007e08:	7ff00000 	.word	0x7ff00000
 8007e0c:	0800a8b2 	.word	0x0800a8b2
 8007e10:	0800a8a9 	.word	0x0800a8a9
 8007e14:	0800a72d 	.word	0x0800a72d
 8007e18:	0800aa48 	.word	0x0800aa48
 8007e1c:	0800a92c 	.word	0x0800a92c
 8007e20:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007e22:	9900      	ldr	r1, [sp, #0]
 8007e24:	6011      	str	r1, [r2, #0]
 8007e26:	f1b9 0f0e 	cmp.w	r9, #14
 8007e2a:	d872      	bhi.n	8007f12 <_dtoa_r+0x3ea>
 8007e2c:	2c00      	cmp	r4, #0
 8007e2e:	d070      	beq.n	8007f12 <_dtoa_r+0x3ea>
 8007e30:	f1bb 0f00 	cmp.w	fp, #0
 8007e34:	f340 80a6 	ble.w	8007f84 <_dtoa_r+0x45c>
 8007e38:	49ca      	ldr	r1, [pc, #808]	; (8008164 <_dtoa_r+0x63c>)
 8007e3a:	f00b 020f 	and.w	r2, fp, #15
 8007e3e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007e42:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007e46:	ed92 7b00 	vldr	d7, [r2]
 8007e4a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8007e4e:	f000 808d 	beq.w	8007f6c <_dtoa_r+0x444>
 8007e52:	4ac5      	ldr	r2, [pc, #788]	; (8008168 <_dtoa_r+0x640>)
 8007e54:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8007e58:	ed92 6b08 	vldr	d6, [r2, #32]
 8007e5c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8007e60:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007e64:	f001 010f 	and.w	r1, r1, #15
 8007e68:	2203      	movs	r2, #3
 8007e6a:	48bf      	ldr	r0, [pc, #764]	; (8008168 <_dtoa_r+0x640>)
 8007e6c:	2900      	cmp	r1, #0
 8007e6e:	d17f      	bne.n	8007f70 <_dtoa_r+0x448>
 8007e70:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007e74:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007e78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007e7e:	2900      	cmp	r1, #0
 8007e80:	f000 80b2 	beq.w	8007fe8 <_dtoa_r+0x4c0>
 8007e84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007e88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e94:	f140 80a8 	bpl.w	8007fe8 <_dtoa_r+0x4c0>
 8007e98:	f1b9 0f00 	cmp.w	r9, #0
 8007e9c:	f000 80a4 	beq.w	8007fe8 <_dtoa_r+0x4c0>
 8007ea0:	f1ba 0f00 	cmp.w	sl, #0
 8007ea4:	dd31      	ble.n	8007f0a <_dtoa_r+0x3e2>
 8007ea6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8007eaa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007eae:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007eb2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007eb6:	3201      	adds	r2, #1
 8007eb8:	4650      	mov	r0, sl
 8007eba:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007ebe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8007ec2:	ee07 2a90 	vmov	s15, r2
 8007ec6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007eca:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007ece:	ed8d 5b02 	vstr	d5, [sp, #8]
 8007ed2:	9c03      	ldr	r4, [sp, #12]
 8007ed4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007ed8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8007edc:	2800      	cmp	r0, #0
 8007ede:	f040 8086 	bne.w	8007fee <_dtoa_r+0x4c6>
 8007ee2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007ee6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007eea:	ec42 1b17 	vmov	d7, r1, r2
 8007eee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef6:	f300 8272 	bgt.w	80083de <_dtoa_r+0x8b6>
 8007efa:	eeb1 7b47 	vneg.f64	d7, d7
 8007efe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f06:	f100 8267 	bmi.w	80083d8 <_dtoa_r+0x8b0>
 8007f0a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8007f0e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8007f12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f14:	2a00      	cmp	r2, #0
 8007f16:	f2c0 8129 	blt.w	800816c <_dtoa_r+0x644>
 8007f1a:	f1bb 0f0e 	cmp.w	fp, #14
 8007f1e:	f300 8125 	bgt.w	800816c <_dtoa_r+0x644>
 8007f22:	4b90      	ldr	r3, [pc, #576]	; (8008164 <_dtoa_r+0x63c>)
 8007f24:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f28:	ed93 6b00 	vldr	d6, [r3]
 8007f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f280 80c3 	bge.w	80080ba <_dtoa_r+0x592>
 8007f34:	f1b9 0f00 	cmp.w	r9, #0
 8007f38:	f300 80bf 	bgt.w	80080ba <_dtoa_r+0x592>
 8007f3c:	f040 824c 	bne.w	80083d8 <_dtoa_r+0x8b0>
 8007f40:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007f44:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007f48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f54:	464c      	mov	r4, r9
 8007f56:	464f      	mov	r7, r9
 8007f58:	f280 8222 	bge.w	80083a0 <_dtoa_r+0x878>
 8007f5c:	f8dd 8000 	ldr.w	r8, [sp]
 8007f60:	2331      	movs	r3, #49	; 0x31
 8007f62:	f808 3b01 	strb.w	r3, [r8], #1
 8007f66:	f10b 0b01 	add.w	fp, fp, #1
 8007f6a:	e21e      	b.n	80083aa <_dtoa_r+0x882>
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	e77c      	b.n	8007e6a <_dtoa_r+0x342>
 8007f70:	07cc      	lsls	r4, r1, #31
 8007f72:	d504      	bpl.n	8007f7e <_dtoa_r+0x456>
 8007f74:	ed90 6b00 	vldr	d6, [r0]
 8007f78:	3201      	adds	r2, #1
 8007f7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007f7e:	1049      	asrs	r1, r1, #1
 8007f80:	3008      	adds	r0, #8
 8007f82:	e773      	b.n	8007e6c <_dtoa_r+0x344>
 8007f84:	d02e      	beq.n	8007fe4 <_dtoa_r+0x4bc>
 8007f86:	f1cb 0100 	rsb	r1, fp, #0
 8007f8a:	4a76      	ldr	r2, [pc, #472]	; (8008164 <_dtoa_r+0x63c>)
 8007f8c:	f001 000f 	and.w	r0, r1, #15
 8007f90:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007f94:	ed92 7b00 	vldr	d7, [r2]
 8007f98:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8007f9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007fa0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007fa4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8007fa8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8007fac:	486e      	ldr	r0, [pc, #440]	; (8008168 <_dtoa_r+0x640>)
 8007fae:	1109      	asrs	r1, r1, #4
 8007fb0:	2400      	movs	r4, #0
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	b939      	cbnz	r1, 8007fc6 <_dtoa_r+0x49e>
 8007fb6:	2c00      	cmp	r4, #0
 8007fb8:	f43f af60 	beq.w	8007e7c <_dtoa_r+0x354>
 8007fbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fc4:	e75a      	b.n	8007e7c <_dtoa_r+0x354>
 8007fc6:	07cf      	lsls	r7, r1, #31
 8007fc8:	d509      	bpl.n	8007fde <_dtoa_r+0x4b6>
 8007fca:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8007fce:	ed90 7b00 	vldr	d7, [r0]
 8007fd2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007fd6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8007fda:	3201      	adds	r2, #1
 8007fdc:	2401      	movs	r4, #1
 8007fde:	1049      	asrs	r1, r1, #1
 8007fe0:	3008      	adds	r0, #8
 8007fe2:	e7e7      	b.n	8007fb4 <_dtoa_r+0x48c>
 8007fe4:	2202      	movs	r2, #2
 8007fe6:	e749      	b.n	8007e7c <_dtoa_r+0x354>
 8007fe8:	465f      	mov	r7, fp
 8007fea:	4648      	mov	r0, r9
 8007fec:	e765      	b.n	8007eba <_dtoa_r+0x392>
 8007fee:	ec42 1b17 	vmov	d7, r1, r2
 8007ff2:	4a5c      	ldr	r2, [pc, #368]	; (8008164 <_dtoa_r+0x63c>)
 8007ff4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007ff8:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007ffc:	9a00      	ldr	r2, [sp, #0]
 8007ffe:	1814      	adds	r4, r2, r0
 8008000:	9a08      	ldr	r2, [sp, #32]
 8008002:	b352      	cbz	r2, 800805a <_dtoa_r+0x532>
 8008004:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008008:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800800c:	f8dd 8000 	ldr.w	r8, [sp]
 8008010:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008014:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008018:	ee35 7b47 	vsub.f64	d7, d5, d7
 800801c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008020:	ee14 2a90 	vmov	r2, s9
 8008024:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008028:	3230      	adds	r2, #48	; 0x30
 800802a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800802e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008036:	f808 2b01 	strb.w	r2, [r8], #1
 800803a:	d439      	bmi.n	80080b0 <_dtoa_r+0x588>
 800803c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008040:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008048:	d472      	bmi.n	8008130 <_dtoa_r+0x608>
 800804a:	45a0      	cmp	r8, r4
 800804c:	f43f af5d 	beq.w	8007f0a <_dtoa_r+0x3e2>
 8008050:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008054:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008058:	e7e0      	b.n	800801c <_dtoa_r+0x4f4>
 800805a:	f8dd 8000 	ldr.w	r8, [sp]
 800805e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008062:	4621      	mov	r1, r4
 8008064:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008068:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800806c:	ee14 2a90 	vmov	r2, s9
 8008070:	3230      	adds	r2, #48	; 0x30
 8008072:	f808 2b01 	strb.w	r2, [r8], #1
 8008076:	45a0      	cmp	r8, r4
 8008078:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800807c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008080:	d118      	bne.n	80080b4 <_dtoa_r+0x58c>
 8008082:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008086:	ee37 4b05 	vadd.f64	d4, d7, d5
 800808a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800808e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008092:	dc4d      	bgt.n	8008130 <_dtoa_r+0x608>
 8008094:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008098:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800809c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a0:	f57f af33 	bpl.w	8007f0a <_dtoa_r+0x3e2>
 80080a4:	4688      	mov	r8, r1
 80080a6:	3901      	subs	r1, #1
 80080a8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80080ac:	2b30      	cmp	r3, #48	; 0x30
 80080ae:	d0f9      	beq.n	80080a4 <_dtoa_r+0x57c>
 80080b0:	46bb      	mov	fp, r7
 80080b2:	e02a      	b.n	800810a <_dtoa_r+0x5e2>
 80080b4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80080b8:	e7d6      	b.n	8008068 <_dtoa_r+0x540>
 80080ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080be:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80080c2:	f8dd 8000 	ldr.w	r8, [sp]
 80080c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80080ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80080ce:	ee15 3a10 	vmov	r3, s10
 80080d2:	3330      	adds	r3, #48	; 0x30
 80080d4:	f808 3b01 	strb.w	r3, [r8], #1
 80080d8:	9b00      	ldr	r3, [sp, #0]
 80080da:	eba8 0303 	sub.w	r3, r8, r3
 80080de:	4599      	cmp	r9, r3
 80080e0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80080e4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80080e8:	d133      	bne.n	8008152 <_dtoa_r+0x62a>
 80080ea:	ee37 7b07 	vadd.f64	d7, d7, d7
 80080ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80080f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f6:	dc1a      	bgt.n	800812e <_dtoa_r+0x606>
 80080f8:	eeb4 7b46 	vcmp.f64	d7, d6
 80080fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008100:	d103      	bne.n	800810a <_dtoa_r+0x5e2>
 8008102:	ee15 3a10 	vmov	r3, s10
 8008106:	07d9      	lsls	r1, r3, #31
 8008108:	d411      	bmi.n	800812e <_dtoa_r+0x606>
 800810a:	4629      	mov	r1, r5
 800810c:	4630      	mov	r0, r6
 800810e:	f000 fe69 	bl	8008de4 <_Bfree>
 8008112:	2300      	movs	r3, #0
 8008114:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008116:	f888 3000 	strb.w	r3, [r8]
 800811a:	f10b 0301 	add.w	r3, fp, #1
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008122:	2b00      	cmp	r3, #0
 8008124:	f43f ad4d 	beq.w	8007bc2 <_dtoa_r+0x9a>
 8008128:	f8c3 8000 	str.w	r8, [r3]
 800812c:	e549      	b.n	8007bc2 <_dtoa_r+0x9a>
 800812e:	465f      	mov	r7, fp
 8008130:	4643      	mov	r3, r8
 8008132:	4698      	mov	r8, r3
 8008134:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008138:	2a39      	cmp	r2, #57	; 0x39
 800813a:	d106      	bne.n	800814a <_dtoa_r+0x622>
 800813c:	9a00      	ldr	r2, [sp, #0]
 800813e:	429a      	cmp	r2, r3
 8008140:	d1f7      	bne.n	8008132 <_dtoa_r+0x60a>
 8008142:	9900      	ldr	r1, [sp, #0]
 8008144:	2230      	movs	r2, #48	; 0x30
 8008146:	3701      	adds	r7, #1
 8008148:	700a      	strb	r2, [r1, #0]
 800814a:	781a      	ldrb	r2, [r3, #0]
 800814c:	3201      	adds	r2, #1
 800814e:	701a      	strb	r2, [r3, #0]
 8008150:	e7ae      	b.n	80080b0 <_dtoa_r+0x588>
 8008152:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008156:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800815a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800815e:	d1b2      	bne.n	80080c6 <_dtoa_r+0x59e>
 8008160:	e7d3      	b.n	800810a <_dtoa_r+0x5e2>
 8008162:	bf00      	nop
 8008164:	0800aa48 	.word	0x0800aa48
 8008168:	0800aa20 	.word	0x0800aa20
 800816c:	9908      	ldr	r1, [sp, #32]
 800816e:	2900      	cmp	r1, #0
 8008170:	f000 80d1 	beq.w	8008316 <_dtoa_r+0x7ee>
 8008174:	9907      	ldr	r1, [sp, #28]
 8008176:	2901      	cmp	r1, #1
 8008178:	f300 80b4 	bgt.w	80082e4 <_dtoa_r+0x7bc>
 800817c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800817e:	2900      	cmp	r1, #0
 8008180:	f000 80ac 	beq.w	80082dc <_dtoa_r+0x7b4>
 8008184:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008188:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800818c:	461c      	mov	r4, r3
 800818e:	930a      	str	r3, [sp, #40]	; 0x28
 8008190:	9b05      	ldr	r3, [sp, #20]
 8008192:	4413      	add	r3, r2
 8008194:	9305      	str	r3, [sp, #20]
 8008196:	9b06      	ldr	r3, [sp, #24]
 8008198:	2101      	movs	r1, #1
 800819a:	4413      	add	r3, r2
 800819c:	4630      	mov	r0, r6
 800819e:	9306      	str	r3, [sp, #24]
 80081a0:	f000 ff26 	bl	8008ff0 <__i2b>
 80081a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a6:	4607      	mov	r7, r0
 80081a8:	f1b8 0f00 	cmp.w	r8, #0
 80081ac:	dd0d      	ble.n	80081ca <_dtoa_r+0x6a2>
 80081ae:	9a06      	ldr	r2, [sp, #24]
 80081b0:	2a00      	cmp	r2, #0
 80081b2:	dd0a      	ble.n	80081ca <_dtoa_r+0x6a2>
 80081b4:	4542      	cmp	r2, r8
 80081b6:	9905      	ldr	r1, [sp, #20]
 80081b8:	bfa8      	it	ge
 80081ba:	4642      	movge	r2, r8
 80081bc:	1a89      	subs	r1, r1, r2
 80081be:	9105      	str	r1, [sp, #20]
 80081c0:	9906      	ldr	r1, [sp, #24]
 80081c2:	eba8 0802 	sub.w	r8, r8, r2
 80081c6:	1a8a      	subs	r2, r1, r2
 80081c8:	9206      	str	r2, [sp, #24]
 80081ca:	b303      	cbz	r3, 800820e <_dtoa_r+0x6e6>
 80081cc:	9a08      	ldr	r2, [sp, #32]
 80081ce:	2a00      	cmp	r2, #0
 80081d0:	f000 80a6 	beq.w	8008320 <_dtoa_r+0x7f8>
 80081d4:	2c00      	cmp	r4, #0
 80081d6:	dd13      	ble.n	8008200 <_dtoa_r+0x6d8>
 80081d8:	4639      	mov	r1, r7
 80081da:	4622      	mov	r2, r4
 80081dc:	4630      	mov	r0, r6
 80081de:	930c      	str	r3, [sp, #48]	; 0x30
 80081e0:	f000 ffc2 	bl	8009168 <__pow5mult>
 80081e4:	462a      	mov	r2, r5
 80081e6:	4601      	mov	r1, r0
 80081e8:	4607      	mov	r7, r0
 80081ea:	4630      	mov	r0, r6
 80081ec:	f000 ff16 	bl	800901c <__multiply>
 80081f0:	4629      	mov	r1, r5
 80081f2:	900a      	str	r0, [sp, #40]	; 0x28
 80081f4:	4630      	mov	r0, r6
 80081f6:	f000 fdf5 	bl	8008de4 <_Bfree>
 80081fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081fe:	4615      	mov	r5, r2
 8008200:	1b1a      	subs	r2, r3, r4
 8008202:	d004      	beq.n	800820e <_dtoa_r+0x6e6>
 8008204:	4629      	mov	r1, r5
 8008206:	4630      	mov	r0, r6
 8008208:	f000 ffae 	bl	8009168 <__pow5mult>
 800820c:	4605      	mov	r5, r0
 800820e:	2101      	movs	r1, #1
 8008210:	4630      	mov	r0, r6
 8008212:	f000 feed 	bl	8008ff0 <__i2b>
 8008216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008218:	2b00      	cmp	r3, #0
 800821a:	4604      	mov	r4, r0
 800821c:	f340 8082 	ble.w	8008324 <_dtoa_r+0x7fc>
 8008220:	461a      	mov	r2, r3
 8008222:	4601      	mov	r1, r0
 8008224:	4630      	mov	r0, r6
 8008226:	f000 ff9f 	bl	8009168 <__pow5mult>
 800822a:	9b07      	ldr	r3, [sp, #28]
 800822c:	2b01      	cmp	r3, #1
 800822e:	4604      	mov	r4, r0
 8008230:	dd7b      	ble.n	800832a <_dtoa_r+0x802>
 8008232:	2300      	movs	r3, #0
 8008234:	930a      	str	r3, [sp, #40]	; 0x28
 8008236:	6922      	ldr	r2, [r4, #16]
 8008238:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800823c:	6910      	ldr	r0, [r2, #16]
 800823e:	f000 fe87 	bl	8008f50 <__hi0bits>
 8008242:	f1c0 0020 	rsb	r0, r0, #32
 8008246:	9b06      	ldr	r3, [sp, #24]
 8008248:	4418      	add	r0, r3
 800824a:	f010 001f 	ands.w	r0, r0, #31
 800824e:	f000 808d 	beq.w	800836c <_dtoa_r+0x844>
 8008252:	f1c0 0220 	rsb	r2, r0, #32
 8008256:	2a04      	cmp	r2, #4
 8008258:	f340 8086 	ble.w	8008368 <_dtoa_r+0x840>
 800825c:	f1c0 001c 	rsb	r0, r0, #28
 8008260:	9b05      	ldr	r3, [sp, #20]
 8008262:	4403      	add	r3, r0
 8008264:	9305      	str	r3, [sp, #20]
 8008266:	9b06      	ldr	r3, [sp, #24]
 8008268:	4403      	add	r3, r0
 800826a:	4480      	add	r8, r0
 800826c:	9306      	str	r3, [sp, #24]
 800826e:	9b05      	ldr	r3, [sp, #20]
 8008270:	2b00      	cmp	r3, #0
 8008272:	dd05      	ble.n	8008280 <_dtoa_r+0x758>
 8008274:	4629      	mov	r1, r5
 8008276:	461a      	mov	r2, r3
 8008278:	4630      	mov	r0, r6
 800827a:	f000 ffcf 	bl	800921c <__lshift>
 800827e:	4605      	mov	r5, r0
 8008280:	9b06      	ldr	r3, [sp, #24]
 8008282:	2b00      	cmp	r3, #0
 8008284:	dd05      	ble.n	8008292 <_dtoa_r+0x76a>
 8008286:	4621      	mov	r1, r4
 8008288:	461a      	mov	r2, r3
 800828a:	4630      	mov	r0, r6
 800828c:	f000 ffc6 	bl	800921c <__lshift>
 8008290:	4604      	mov	r4, r0
 8008292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008294:	2b00      	cmp	r3, #0
 8008296:	d06b      	beq.n	8008370 <_dtoa_r+0x848>
 8008298:	4621      	mov	r1, r4
 800829a:	4628      	mov	r0, r5
 800829c:	f001 f82a 	bl	80092f4 <__mcmp>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	da65      	bge.n	8008370 <_dtoa_r+0x848>
 80082a4:	2300      	movs	r3, #0
 80082a6:	4629      	mov	r1, r5
 80082a8:	220a      	movs	r2, #10
 80082aa:	4630      	mov	r0, r6
 80082ac:	f000 fdbc 	bl	8008e28 <__multadd>
 80082b0:	9b08      	ldr	r3, [sp, #32]
 80082b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082b6:	4605      	mov	r5, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 8192 	beq.w	80085e2 <_dtoa_r+0xaba>
 80082be:	4639      	mov	r1, r7
 80082c0:	2300      	movs	r3, #0
 80082c2:	220a      	movs	r2, #10
 80082c4:	4630      	mov	r0, r6
 80082c6:	f000 fdaf 	bl	8008e28 <__multadd>
 80082ca:	f1ba 0f00 	cmp.w	sl, #0
 80082ce:	4607      	mov	r7, r0
 80082d0:	f300 808e 	bgt.w	80083f0 <_dtoa_r+0x8c8>
 80082d4:	9b07      	ldr	r3, [sp, #28]
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	dc51      	bgt.n	800837e <_dtoa_r+0x856>
 80082da:	e089      	b.n	80083f0 <_dtoa_r+0x8c8>
 80082dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80082e2:	e751      	b.n	8008188 <_dtoa_r+0x660>
 80082e4:	f109 34ff 	add.w	r4, r9, #4294967295
 80082e8:	42a3      	cmp	r3, r4
 80082ea:	bfbf      	itttt	lt
 80082ec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80082ee:	1ae3      	sublt	r3, r4, r3
 80082f0:	18d2      	addlt	r2, r2, r3
 80082f2:	4613      	movlt	r3, r2
 80082f4:	bfb7      	itett	lt
 80082f6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80082f8:	1b1c      	subge	r4, r3, r4
 80082fa:	4623      	movlt	r3, r4
 80082fc:	2400      	movlt	r4, #0
 80082fe:	f1b9 0f00 	cmp.w	r9, #0
 8008302:	bfb5      	itete	lt
 8008304:	9a05      	ldrlt	r2, [sp, #20]
 8008306:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800830a:	eba2 0809 	sublt.w	r8, r2, r9
 800830e:	464a      	movge	r2, r9
 8008310:	bfb8      	it	lt
 8008312:	2200      	movlt	r2, #0
 8008314:	e73b      	b.n	800818e <_dtoa_r+0x666>
 8008316:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800831a:	9f08      	ldr	r7, [sp, #32]
 800831c:	461c      	mov	r4, r3
 800831e:	e743      	b.n	80081a8 <_dtoa_r+0x680>
 8008320:	461a      	mov	r2, r3
 8008322:	e76f      	b.n	8008204 <_dtoa_r+0x6dc>
 8008324:	9b07      	ldr	r3, [sp, #28]
 8008326:	2b01      	cmp	r3, #1
 8008328:	dc18      	bgt.n	800835c <_dtoa_r+0x834>
 800832a:	9b02      	ldr	r3, [sp, #8]
 800832c:	b9b3      	cbnz	r3, 800835c <_dtoa_r+0x834>
 800832e:	9b03      	ldr	r3, [sp, #12]
 8008330:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008334:	b9a2      	cbnz	r2, 8008360 <_dtoa_r+0x838>
 8008336:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800833a:	0d12      	lsrs	r2, r2, #20
 800833c:	0512      	lsls	r2, r2, #20
 800833e:	b18a      	cbz	r2, 8008364 <_dtoa_r+0x83c>
 8008340:	9b05      	ldr	r3, [sp, #20]
 8008342:	3301      	adds	r3, #1
 8008344:	9305      	str	r3, [sp, #20]
 8008346:	9b06      	ldr	r3, [sp, #24]
 8008348:	3301      	adds	r3, #1
 800834a:	9306      	str	r3, [sp, #24]
 800834c:	2301      	movs	r3, #1
 800834e:	930a      	str	r3, [sp, #40]	; 0x28
 8008350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008352:	2b00      	cmp	r3, #0
 8008354:	f47f af6f 	bne.w	8008236 <_dtoa_r+0x70e>
 8008358:	2001      	movs	r0, #1
 800835a:	e774      	b.n	8008246 <_dtoa_r+0x71e>
 800835c:	2300      	movs	r3, #0
 800835e:	e7f6      	b.n	800834e <_dtoa_r+0x826>
 8008360:	9b02      	ldr	r3, [sp, #8]
 8008362:	e7f4      	b.n	800834e <_dtoa_r+0x826>
 8008364:	920a      	str	r2, [sp, #40]	; 0x28
 8008366:	e7f3      	b.n	8008350 <_dtoa_r+0x828>
 8008368:	d081      	beq.n	800826e <_dtoa_r+0x746>
 800836a:	4610      	mov	r0, r2
 800836c:	301c      	adds	r0, #28
 800836e:	e777      	b.n	8008260 <_dtoa_r+0x738>
 8008370:	f1b9 0f00 	cmp.w	r9, #0
 8008374:	dc37      	bgt.n	80083e6 <_dtoa_r+0x8be>
 8008376:	9b07      	ldr	r3, [sp, #28]
 8008378:	2b02      	cmp	r3, #2
 800837a:	dd34      	ble.n	80083e6 <_dtoa_r+0x8be>
 800837c:	46ca      	mov	sl, r9
 800837e:	f1ba 0f00 	cmp.w	sl, #0
 8008382:	d10d      	bne.n	80083a0 <_dtoa_r+0x878>
 8008384:	4621      	mov	r1, r4
 8008386:	4653      	mov	r3, sl
 8008388:	2205      	movs	r2, #5
 800838a:	4630      	mov	r0, r6
 800838c:	f000 fd4c 	bl	8008e28 <__multadd>
 8008390:	4601      	mov	r1, r0
 8008392:	4604      	mov	r4, r0
 8008394:	4628      	mov	r0, r5
 8008396:	f000 ffad 	bl	80092f4 <__mcmp>
 800839a:	2800      	cmp	r0, #0
 800839c:	f73f adde 	bgt.w	8007f5c <_dtoa_r+0x434>
 80083a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a2:	f8dd 8000 	ldr.w	r8, [sp]
 80083a6:	ea6f 0b03 	mvn.w	fp, r3
 80083aa:	f04f 0900 	mov.w	r9, #0
 80083ae:	4621      	mov	r1, r4
 80083b0:	4630      	mov	r0, r6
 80083b2:	f000 fd17 	bl	8008de4 <_Bfree>
 80083b6:	2f00      	cmp	r7, #0
 80083b8:	f43f aea7 	beq.w	800810a <_dtoa_r+0x5e2>
 80083bc:	f1b9 0f00 	cmp.w	r9, #0
 80083c0:	d005      	beq.n	80083ce <_dtoa_r+0x8a6>
 80083c2:	45b9      	cmp	r9, r7
 80083c4:	d003      	beq.n	80083ce <_dtoa_r+0x8a6>
 80083c6:	4649      	mov	r1, r9
 80083c8:	4630      	mov	r0, r6
 80083ca:	f000 fd0b 	bl	8008de4 <_Bfree>
 80083ce:	4639      	mov	r1, r7
 80083d0:	4630      	mov	r0, r6
 80083d2:	f000 fd07 	bl	8008de4 <_Bfree>
 80083d6:	e698      	b.n	800810a <_dtoa_r+0x5e2>
 80083d8:	2400      	movs	r4, #0
 80083da:	4627      	mov	r7, r4
 80083dc:	e7e0      	b.n	80083a0 <_dtoa_r+0x878>
 80083de:	46bb      	mov	fp, r7
 80083e0:	4604      	mov	r4, r0
 80083e2:	4607      	mov	r7, r0
 80083e4:	e5ba      	b.n	8007f5c <_dtoa_r+0x434>
 80083e6:	9b08      	ldr	r3, [sp, #32]
 80083e8:	46ca      	mov	sl, r9
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 8100 	beq.w	80085f0 <_dtoa_r+0xac8>
 80083f0:	f1b8 0f00 	cmp.w	r8, #0
 80083f4:	dd05      	ble.n	8008402 <_dtoa_r+0x8da>
 80083f6:	4639      	mov	r1, r7
 80083f8:	4642      	mov	r2, r8
 80083fa:	4630      	mov	r0, r6
 80083fc:	f000 ff0e 	bl	800921c <__lshift>
 8008400:	4607      	mov	r7, r0
 8008402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008404:	2b00      	cmp	r3, #0
 8008406:	d05d      	beq.n	80084c4 <_dtoa_r+0x99c>
 8008408:	6879      	ldr	r1, [r7, #4]
 800840a:	4630      	mov	r0, r6
 800840c:	f000 fcaa 	bl	8008d64 <_Balloc>
 8008410:	4680      	mov	r8, r0
 8008412:	b928      	cbnz	r0, 8008420 <_dtoa_r+0x8f8>
 8008414:	4b82      	ldr	r3, [pc, #520]	; (8008620 <_dtoa_r+0xaf8>)
 8008416:	4602      	mov	r2, r0
 8008418:	f240 21ea 	movw	r1, #746	; 0x2ea
 800841c:	f7ff bb9a 	b.w	8007b54 <_dtoa_r+0x2c>
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	3202      	adds	r2, #2
 8008424:	0092      	lsls	r2, r2, #2
 8008426:	f107 010c 	add.w	r1, r7, #12
 800842a:	300c      	adds	r0, #12
 800842c:	f000 fc8c 	bl	8008d48 <memcpy>
 8008430:	2201      	movs	r2, #1
 8008432:	4641      	mov	r1, r8
 8008434:	4630      	mov	r0, r6
 8008436:	f000 fef1 	bl	800921c <__lshift>
 800843a:	9b00      	ldr	r3, [sp, #0]
 800843c:	3301      	adds	r3, #1
 800843e:	9305      	str	r3, [sp, #20]
 8008440:	9b00      	ldr	r3, [sp, #0]
 8008442:	4453      	add	r3, sl
 8008444:	9309      	str	r3, [sp, #36]	; 0x24
 8008446:	9b02      	ldr	r3, [sp, #8]
 8008448:	f003 0301 	and.w	r3, r3, #1
 800844c:	46b9      	mov	r9, r7
 800844e:	9308      	str	r3, [sp, #32]
 8008450:	4607      	mov	r7, r0
 8008452:	9b05      	ldr	r3, [sp, #20]
 8008454:	4621      	mov	r1, r4
 8008456:	3b01      	subs	r3, #1
 8008458:	4628      	mov	r0, r5
 800845a:	9302      	str	r3, [sp, #8]
 800845c:	f7ff fad6 	bl	8007a0c <quorem>
 8008460:	4603      	mov	r3, r0
 8008462:	3330      	adds	r3, #48	; 0x30
 8008464:	9006      	str	r0, [sp, #24]
 8008466:	4649      	mov	r1, r9
 8008468:	4628      	mov	r0, r5
 800846a:	930a      	str	r3, [sp, #40]	; 0x28
 800846c:	f000 ff42 	bl	80092f4 <__mcmp>
 8008470:	463a      	mov	r2, r7
 8008472:	4682      	mov	sl, r0
 8008474:	4621      	mov	r1, r4
 8008476:	4630      	mov	r0, r6
 8008478:	f000 ff58 	bl	800932c <__mdiff>
 800847c:	68c2      	ldr	r2, [r0, #12]
 800847e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008480:	4680      	mov	r8, r0
 8008482:	bb0a      	cbnz	r2, 80084c8 <_dtoa_r+0x9a0>
 8008484:	4601      	mov	r1, r0
 8008486:	4628      	mov	r0, r5
 8008488:	f000 ff34 	bl	80092f4 <__mcmp>
 800848c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848e:	4602      	mov	r2, r0
 8008490:	4641      	mov	r1, r8
 8008492:	4630      	mov	r0, r6
 8008494:	920e      	str	r2, [sp, #56]	; 0x38
 8008496:	930a      	str	r3, [sp, #40]	; 0x28
 8008498:	f000 fca4 	bl	8008de4 <_Bfree>
 800849c:	9b07      	ldr	r3, [sp, #28]
 800849e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084a0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80084a4:	ea43 0102 	orr.w	r1, r3, r2
 80084a8:	9b08      	ldr	r3, [sp, #32]
 80084aa:	430b      	orrs	r3, r1
 80084ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ae:	d10d      	bne.n	80084cc <_dtoa_r+0x9a4>
 80084b0:	2b39      	cmp	r3, #57	; 0x39
 80084b2:	d029      	beq.n	8008508 <_dtoa_r+0x9e0>
 80084b4:	f1ba 0f00 	cmp.w	sl, #0
 80084b8:	dd01      	ble.n	80084be <_dtoa_r+0x996>
 80084ba:	9b06      	ldr	r3, [sp, #24]
 80084bc:	3331      	adds	r3, #49	; 0x31
 80084be:	9a02      	ldr	r2, [sp, #8]
 80084c0:	7013      	strb	r3, [r2, #0]
 80084c2:	e774      	b.n	80083ae <_dtoa_r+0x886>
 80084c4:	4638      	mov	r0, r7
 80084c6:	e7b8      	b.n	800843a <_dtoa_r+0x912>
 80084c8:	2201      	movs	r2, #1
 80084ca:	e7e1      	b.n	8008490 <_dtoa_r+0x968>
 80084cc:	f1ba 0f00 	cmp.w	sl, #0
 80084d0:	db06      	blt.n	80084e0 <_dtoa_r+0x9b8>
 80084d2:	9907      	ldr	r1, [sp, #28]
 80084d4:	ea41 0a0a 	orr.w	sl, r1, sl
 80084d8:	9908      	ldr	r1, [sp, #32]
 80084da:	ea5a 0101 	orrs.w	r1, sl, r1
 80084de:	d120      	bne.n	8008522 <_dtoa_r+0x9fa>
 80084e0:	2a00      	cmp	r2, #0
 80084e2:	ddec      	ble.n	80084be <_dtoa_r+0x996>
 80084e4:	4629      	mov	r1, r5
 80084e6:	2201      	movs	r2, #1
 80084e8:	4630      	mov	r0, r6
 80084ea:	9305      	str	r3, [sp, #20]
 80084ec:	f000 fe96 	bl	800921c <__lshift>
 80084f0:	4621      	mov	r1, r4
 80084f2:	4605      	mov	r5, r0
 80084f4:	f000 fefe 	bl	80092f4 <__mcmp>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	9b05      	ldr	r3, [sp, #20]
 80084fc:	dc02      	bgt.n	8008504 <_dtoa_r+0x9dc>
 80084fe:	d1de      	bne.n	80084be <_dtoa_r+0x996>
 8008500:	07da      	lsls	r2, r3, #31
 8008502:	d5dc      	bpl.n	80084be <_dtoa_r+0x996>
 8008504:	2b39      	cmp	r3, #57	; 0x39
 8008506:	d1d8      	bne.n	80084ba <_dtoa_r+0x992>
 8008508:	9a02      	ldr	r2, [sp, #8]
 800850a:	2339      	movs	r3, #57	; 0x39
 800850c:	7013      	strb	r3, [r2, #0]
 800850e:	4643      	mov	r3, r8
 8008510:	4698      	mov	r8, r3
 8008512:	3b01      	subs	r3, #1
 8008514:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008518:	2a39      	cmp	r2, #57	; 0x39
 800851a:	d051      	beq.n	80085c0 <_dtoa_r+0xa98>
 800851c:	3201      	adds	r2, #1
 800851e:	701a      	strb	r2, [r3, #0]
 8008520:	e745      	b.n	80083ae <_dtoa_r+0x886>
 8008522:	2a00      	cmp	r2, #0
 8008524:	dd03      	ble.n	800852e <_dtoa_r+0xa06>
 8008526:	2b39      	cmp	r3, #57	; 0x39
 8008528:	d0ee      	beq.n	8008508 <_dtoa_r+0x9e0>
 800852a:	3301      	adds	r3, #1
 800852c:	e7c7      	b.n	80084be <_dtoa_r+0x996>
 800852e:	9a05      	ldr	r2, [sp, #20]
 8008530:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008532:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008536:	428a      	cmp	r2, r1
 8008538:	d02b      	beq.n	8008592 <_dtoa_r+0xa6a>
 800853a:	4629      	mov	r1, r5
 800853c:	2300      	movs	r3, #0
 800853e:	220a      	movs	r2, #10
 8008540:	4630      	mov	r0, r6
 8008542:	f000 fc71 	bl	8008e28 <__multadd>
 8008546:	45b9      	cmp	r9, r7
 8008548:	4605      	mov	r5, r0
 800854a:	f04f 0300 	mov.w	r3, #0
 800854e:	f04f 020a 	mov.w	r2, #10
 8008552:	4649      	mov	r1, r9
 8008554:	4630      	mov	r0, r6
 8008556:	d107      	bne.n	8008568 <_dtoa_r+0xa40>
 8008558:	f000 fc66 	bl	8008e28 <__multadd>
 800855c:	4681      	mov	r9, r0
 800855e:	4607      	mov	r7, r0
 8008560:	9b05      	ldr	r3, [sp, #20]
 8008562:	3301      	adds	r3, #1
 8008564:	9305      	str	r3, [sp, #20]
 8008566:	e774      	b.n	8008452 <_dtoa_r+0x92a>
 8008568:	f000 fc5e 	bl	8008e28 <__multadd>
 800856c:	4639      	mov	r1, r7
 800856e:	4681      	mov	r9, r0
 8008570:	2300      	movs	r3, #0
 8008572:	220a      	movs	r2, #10
 8008574:	4630      	mov	r0, r6
 8008576:	f000 fc57 	bl	8008e28 <__multadd>
 800857a:	4607      	mov	r7, r0
 800857c:	e7f0      	b.n	8008560 <_dtoa_r+0xa38>
 800857e:	f1ba 0f00 	cmp.w	sl, #0
 8008582:	9a00      	ldr	r2, [sp, #0]
 8008584:	bfcc      	ite	gt
 8008586:	46d0      	movgt	r8, sl
 8008588:	f04f 0801 	movle.w	r8, #1
 800858c:	4490      	add	r8, r2
 800858e:	f04f 0900 	mov.w	r9, #0
 8008592:	4629      	mov	r1, r5
 8008594:	2201      	movs	r2, #1
 8008596:	4630      	mov	r0, r6
 8008598:	9302      	str	r3, [sp, #8]
 800859a:	f000 fe3f 	bl	800921c <__lshift>
 800859e:	4621      	mov	r1, r4
 80085a0:	4605      	mov	r5, r0
 80085a2:	f000 fea7 	bl	80092f4 <__mcmp>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	dcb1      	bgt.n	800850e <_dtoa_r+0x9e6>
 80085aa:	d102      	bne.n	80085b2 <_dtoa_r+0xa8a>
 80085ac:	9b02      	ldr	r3, [sp, #8]
 80085ae:	07db      	lsls	r3, r3, #31
 80085b0:	d4ad      	bmi.n	800850e <_dtoa_r+0x9e6>
 80085b2:	4643      	mov	r3, r8
 80085b4:	4698      	mov	r8, r3
 80085b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ba:	2a30      	cmp	r2, #48	; 0x30
 80085bc:	d0fa      	beq.n	80085b4 <_dtoa_r+0xa8c>
 80085be:	e6f6      	b.n	80083ae <_dtoa_r+0x886>
 80085c0:	9a00      	ldr	r2, [sp, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d1a4      	bne.n	8008510 <_dtoa_r+0x9e8>
 80085c6:	f10b 0b01 	add.w	fp, fp, #1
 80085ca:	2331      	movs	r3, #49	; 0x31
 80085cc:	e778      	b.n	80084c0 <_dtoa_r+0x998>
 80085ce:	4b15      	ldr	r3, [pc, #84]	; (8008624 <_dtoa_r+0xafc>)
 80085d0:	f7ff bb12 	b.w	8007bf8 <_dtoa_r+0xd0>
 80085d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f47f aaee 	bne.w	8007bb8 <_dtoa_r+0x90>
 80085dc:	4b12      	ldr	r3, [pc, #72]	; (8008628 <_dtoa_r+0xb00>)
 80085de:	f7ff bb0b 	b.w	8007bf8 <_dtoa_r+0xd0>
 80085e2:	f1ba 0f00 	cmp.w	sl, #0
 80085e6:	dc03      	bgt.n	80085f0 <_dtoa_r+0xac8>
 80085e8:	9b07      	ldr	r3, [sp, #28]
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	f73f aec7 	bgt.w	800837e <_dtoa_r+0x856>
 80085f0:	f8dd 8000 	ldr.w	r8, [sp]
 80085f4:	4621      	mov	r1, r4
 80085f6:	4628      	mov	r0, r5
 80085f8:	f7ff fa08 	bl	8007a0c <quorem>
 80085fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008600:	f808 3b01 	strb.w	r3, [r8], #1
 8008604:	9a00      	ldr	r2, [sp, #0]
 8008606:	eba8 0202 	sub.w	r2, r8, r2
 800860a:	4592      	cmp	sl, r2
 800860c:	ddb7      	ble.n	800857e <_dtoa_r+0xa56>
 800860e:	4629      	mov	r1, r5
 8008610:	2300      	movs	r3, #0
 8008612:	220a      	movs	r2, #10
 8008614:	4630      	mov	r0, r6
 8008616:	f000 fc07 	bl	8008e28 <__multadd>
 800861a:	4605      	mov	r5, r0
 800861c:	e7ea      	b.n	80085f4 <_dtoa_r+0xacc>
 800861e:	bf00      	nop
 8008620:	0800a92c 	.word	0x0800a92c
 8008624:	0800a72c 	.word	0x0800a72c
 8008628:	0800a8a9 	.word	0x0800a8a9

0800862c <rshift>:
 800862c:	6903      	ldr	r3, [r0, #16]
 800862e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008636:	ea4f 1261 	mov.w	r2, r1, asr #5
 800863a:	f100 0414 	add.w	r4, r0, #20
 800863e:	dd45      	ble.n	80086cc <rshift+0xa0>
 8008640:	f011 011f 	ands.w	r1, r1, #31
 8008644:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008648:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800864c:	d10c      	bne.n	8008668 <rshift+0x3c>
 800864e:	f100 0710 	add.w	r7, r0, #16
 8008652:	4629      	mov	r1, r5
 8008654:	42b1      	cmp	r1, r6
 8008656:	d334      	bcc.n	80086c2 <rshift+0x96>
 8008658:	1a9b      	subs	r3, r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	1eea      	subs	r2, r5, #3
 800865e:	4296      	cmp	r6, r2
 8008660:	bf38      	it	cc
 8008662:	2300      	movcc	r3, #0
 8008664:	4423      	add	r3, r4
 8008666:	e015      	b.n	8008694 <rshift+0x68>
 8008668:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800866c:	f1c1 0820 	rsb	r8, r1, #32
 8008670:	40cf      	lsrs	r7, r1
 8008672:	f105 0e04 	add.w	lr, r5, #4
 8008676:	46a1      	mov	r9, r4
 8008678:	4576      	cmp	r6, lr
 800867a:	46f4      	mov	ip, lr
 800867c:	d815      	bhi.n	80086aa <rshift+0x7e>
 800867e:	1a9b      	subs	r3, r3, r2
 8008680:	009a      	lsls	r2, r3, #2
 8008682:	3a04      	subs	r2, #4
 8008684:	3501      	adds	r5, #1
 8008686:	42ae      	cmp	r6, r5
 8008688:	bf38      	it	cc
 800868a:	2200      	movcc	r2, #0
 800868c:	18a3      	adds	r3, r4, r2
 800868e:	50a7      	str	r7, [r4, r2]
 8008690:	b107      	cbz	r7, 8008694 <rshift+0x68>
 8008692:	3304      	adds	r3, #4
 8008694:	1b1a      	subs	r2, r3, r4
 8008696:	42a3      	cmp	r3, r4
 8008698:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800869c:	bf08      	it	eq
 800869e:	2300      	moveq	r3, #0
 80086a0:	6102      	str	r2, [r0, #16]
 80086a2:	bf08      	it	eq
 80086a4:	6143      	streq	r3, [r0, #20]
 80086a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086aa:	f8dc c000 	ldr.w	ip, [ip]
 80086ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80086b2:	ea4c 0707 	orr.w	r7, ip, r7
 80086b6:	f849 7b04 	str.w	r7, [r9], #4
 80086ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086be:	40cf      	lsrs	r7, r1
 80086c0:	e7da      	b.n	8008678 <rshift+0x4c>
 80086c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80086c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80086ca:	e7c3      	b.n	8008654 <rshift+0x28>
 80086cc:	4623      	mov	r3, r4
 80086ce:	e7e1      	b.n	8008694 <rshift+0x68>

080086d0 <__hexdig_fun>:
 80086d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80086d4:	2b09      	cmp	r3, #9
 80086d6:	d802      	bhi.n	80086de <__hexdig_fun+0xe>
 80086d8:	3820      	subs	r0, #32
 80086da:	b2c0      	uxtb	r0, r0
 80086dc:	4770      	bx	lr
 80086de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80086e2:	2b05      	cmp	r3, #5
 80086e4:	d801      	bhi.n	80086ea <__hexdig_fun+0x1a>
 80086e6:	3847      	subs	r0, #71	; 0x47
 80086e8:	e7f7      	b.n	80086da <__hexdig_fun+0xa>
 80086ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80086ee:	2b05      	cmp	r3, #5
 80086f0:	d801      	bhi.n	80086f6 <__hexdig_fun+0x26>
 80086f2:	3827      	subs	r0, #39	; 0x27
 80086f4:	e7f1      	b.n	80086da <__hexdig_fun+0xa>
 80086f6:	2000      	movs	r0, #0
 80086f8:	4770      	bx	lr
	...

080086fc <__gethex>:
 80086fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008700:	ed2d 8b02 	vpush	{d8}
 8008704:	b089      	sub	sp, #36	; 0x24
 8008706:	ee08 0a10 	vmov	s16, r0
 800870a:	9304      	str	r3, [sp, #16]
 800870c:	4bbc      	ldr	r3, [pc, #752]	; (8008a00 <__gethex+0x304>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	9301      	str	r3, [sp, #4]
 8008712:	4618      	mov	r0, r3
 8008714:	468b      	mov	fp, r1
 8008716:	4690      	mov	r8, r2
 8008718:	f7f7 fd92 	bl	8000240 <strlen>
 800871c:	9b01      	ldr	r3, [sp, #4]
 800871e:	f8db 2000 	ldr.w	r2, [fp]
 8008722:	4403      	add	r3, r0
 8008724:	4682      	mov	sl, r0
 8008726:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800872a:	9305      	str	r3, [sp, #20]
 800872c:	1c93      	adds	r3, r2, #2
 800872e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008732:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008736:	32fe      	adds	r2, #254	; 0xfe
 8008738:	18d1      	adds	r1, r2, r3
 800873a:	461f      	mov	r7, r3
 800873c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008740:	9100      	str	r1, [sp, #0]
 8008742:	2830      	cmp	r0, #48	; 0x30
 8008744:	d0f8      	beq.n	8008738 <__gethex+0x3c>
 8008746:	f7ff ffc3 	bl	80086d0 <__hexdig_fun>
 800874a:	4604      	mov	r4, r0
 800874c:	2800      	cmp	r0, #0
 800874e:	d13a      	bne.n	80087c6 <__gethex+0xca>
 8008750:	9901      	ldr	r1, [sp, #4]
 8008752:	4652      	mov	r2, sl
 8008754:	4638      	mov	r0, r7
 8008756:	f001 f9ef 	bl	8009b38 <strncmp>
 800875a:	4605      	mov	r5, r0
 800875c:	2800      	cmp	r0, #0
 800875e:	d168      	bne.n	8008832 <__gethex+0x136>
 8008760:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008764:	eb07 060a 	add.w	r6, r7, sl
 8008768:	f7ff ffb2 	bl	80086d0 <__hexdig_fun>
 800876c:	2800      	cmp	r0, #0
 800876e:	d062      	beq.n	8008836 <__gethex+0x13a>
 8008770:	4633      	mov	r3, r6
 8008772:	7818      	ldrb	r0, [r3, #0]
 8008774:	2830      	cmp	r0, #48	; 0x30
 8008776:	461f      	mov	r7, r3
 8008778:	f103 0301 	add.w	r3, r3, #1
 800877c:	d0f9      	beq.n	8008772 <__gethex+0x76>
 800877e:	f7ff ffa7 	bl	80086d0 <__hexdig_fun>
 8008782:	2301      	movs	r3, #1
 8008784:	fab0 f480 	clz	r4, r0
 8008788:	0964      	lsrs	r4, r4, #5
 800878a:	4635      	mov	r5, r6
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	463a      	mov	r2, r7
 8008790:	4616      	mov	r6, r2
 8008792:	3201      	adds	r2, #1
 8008794:	7830      	ldrb	r0, [r6, #0]
 8008796:	f7ff ff9b 	bl	80086d0 <__hexdig_fun>
 800879a:	2800      	cmp	r0, #0
 800879c:	d1f8      	bne.n	8008790 <__gethex+0x94>
 800879e:	9901      	ldr	r1, [sp, #4]
 80087a0:	4652      	mov	r2, sl
 80087a2:	4630      	mov	r0, r6
 80087a4:	f001 f9c8 	bl	8009b38 <strncmp>
 80087a8:	b980      	cbnz	r0, 80087cc <__gethex+0xd0>
 80087aa:	b94d      	cbnz	r5, 80087c0 <__gethex+0xc4>
 80087ac:	eb06 050a 	add.w	r5, r6, sl
 80087b0:	462a      	mov	r2, r5
 80087b2:	4616      	mov	r6, r2
 80087b4:	3201      	adds	r2, #1
 80087b6:	7830      	ldrb	r0, [r6, #0]
 80087b8:	f7ff ff8a 	bl	80086d0 <__hexdig_fun>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d1f8      	bne.n	80087b2 <__gethex+0xb6>
 80087c0:	1bad      	subs	r5, r5, r6
 80087c2:	00ad      	lsls	r5, r5, #2
 80087c4:	e004      	b.n	80087d0 <__gethex+0xd4>
 80087c6:	2400      	movs	r4, #0
 80087c8:	4625      	mov	r5, r4
 80087ca:	e7e0      	b.n	800878e <__gethex+0x92>
 80087cc:	2d00      	cmp	r5, #0
 80087ce:	d1f7      	bne.n	80087c0 <__gethex+0xc4>
 80087d0:	7833      	ldrb	r3, [r6, #0]
 80087d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80087d6:	2b50      	cmp	r3, #80	; 0x50
 80087d8:	d13b      	bne.n	8008852 <__gethex+0x156>
 80087da:	7873      	ldrb	r3, [r6, #1]
 80087dc:	2b2b      	cmp	r3, #43	; 0x2b
 80087de:	d02c      	beq.n	800883a <__gethex+0x13e>
 80087e0:	2b2d      	cmp	r3, #45	; 0x2d
 80087e2:	d02e      	beq.n	8008842 <__gethex+0x146>
 80087e4:	1c71      	adds	r1, r6, #1
 80087e6:	f04f 0900 	mov.w	r9, #0
 80087ea:	7808      	ldrb	r0, [r1, #0]
 80087ec:	f7ff ff70 	bl	80086d0 <__hexdig_fun>
 80087f0:	1e43      	subs	r3, r0, #1
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b18      	cmp	r3, #24
 80087f6:	d82c      	bhi.n	8008852 <__gethex+0x156>
 80087f8:	f1a0 0210 	sub.w	r2, r0, #16
 80087fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008800:	f7ff ff66 	bl	80086d0 <__hexdig_fun>
 8008804:	1e43      	subs	r3, r0, #1
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b18      	cmp	r3, #24
 800880a:	d91d      	bls.n	8008848 <__gethex+0x14c>
 800880c:	f1b9 0f00 	cmp.w	r9, #0
 8008810:	d000      	beq.n	8008814 <__gethex+0x118>
 8008812:	4252      	negs	r2, r2
 8008814:	4415      	add	r5, r2
 8008816:	f8cb 1000 	str.w	r1, [fp]
 800881a:	b1e4      	cbz	r4, 8008856 <__gethex+0x15a>
 800881c:	9b00      	ldr	r3, [sp, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	bf14      	ite	ne
 8008822:	2700      	movne	r7, #0
 8008824:	2706      	moveq	r7, #6
 8008826:	4638      	mov	r0, r7
 8008828:	b009      	add	sp, #36	; 0x24
 800882a:	ecbd 8b02 	vpop	{d8}
 800882e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008832:	463e      	mov	r6, r7
 8008834:	4625      	mov	r5, r4
 8008836:	2401      	movs	r4, #1
 8008838:	e7ca      	b.n	80087d0 <__gethex+0xd4>
 800883a:	f04f 0900 	mov.w	r9, #0
 800883e:	1cb1      	adds	r1, r6, #2
 8008840:	e7d3      	b.n	80087ea <__gethex+0xee>
 8008842:	f04f 0901 	mov.w	r9, #1
 8008846:	e7fa      	b.n	800883e <__gethex+0x142>
 8008848:	230a      	movs	r3, #10
 800884a:	fb03 0202 	mla	r2, r3, r2, r0
 800884e:	3a10      	subs	r2, #16
 8008850:	e7d4      	b.n	80087fc <__gethex+0x100>
 8008852:	4631      	mov	r1, r6
 8008854:	e7df      	b.n	8008816 <__gethex+0x11a>
 8008856:	1bf3      	subs	r3, r6, r7
 8008858:	3b01      	subs	r3, #1
 800885a:	4621      	mov	r1, r4
 800885c:	2b07      	cmp	r3, #7
 800885e:	dc0b      	bgt.n	8008878 <__gethex+0x17c>
 8008860:	ee18 0a10 	vmov	r0, s16
 8008864:	f000 fa7e 	bl	8008d64 <_Balloc>
 8008868:	4604      	mov	r4, r0
 800886a:	b940      	cbnz	r0, 800887e <__gethex+0x182>
 800886c:	4b65      	ldr	r3, [pc, #404]	; (8008a04 <__gethex+0x308>)
 800886e:	4602      	mov	r2, r0
 8008870:	21de      	movs	r1, #222	; 0xde
 8008872:	4865      	ldr	r0, [pc, #404]	; (8008a08 <__gethex+0x30c>)
 8008874:	f001 f980 	bl	8009b78 <__assert_func>
 8008878:	3101      	adds	r1, #1
 800887a:	105b      	asrs	r3, r3, #1
 800887c:	e7ee      	b.n	800885c <__gethex+0x160>
 800887e:	f100 0914 	add.w	r9, r0, #20
 8008882:	f04f 0b00 	mov.w	fp, #0
 8008886:	f1ca 0301 	rsb	r3, sl, #1
 800888a:	f8cd 9008 	str.w	r9, [sp, #8]
 800888e:	f8cd b000 	str.w	fp, [sp]
 8008892:	9306      	str	r3, [sp, #24]
 8008894:	42b7      	cmp	r7, r6
 8008896:	d340      	bcc.n	800891a <__gethex+0x21e>
 8008898:	9802      	ldr	r0, [sp, #8]
 800889a:	9b00      	ldr	r3, [sp, #0]
 800889c:	f840 3b04 	str.w	r3, [r0], #4
 80088a0:	eba0 0009 	sub.w	r0, r0, r9
 80088a4:	1080      	asrs	r0, r0, #2
 80088a6:	0146      	lsls	r6, r0, #5
 80088a8:	6120      	str	r0, [r4, #16]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 fb50 	bl	8008f50 <__hi0bits>
 80088b0:	1a30      	subs	r0, r6, r0
 80088b2:	f8d8 6000 	ldr.w	r6, [r8]
 80088b6:	42b0      	cmp	r0, r6
 80088b8:	dd63      	ble.n	8008982 <__gethex+0x286>
 80088ba:	1b87      	subs	r7, r0, r6
 80088bc:	4639      	mov	r1, r7
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 feeb 	bl	800969a <__any_on>
 80088c4:	4682      	mov	sl, r0
 80088c6:	b1a8      	cbz	r0, 80088f4 <__gethex+0x1f8>
 80088c8:	1e7b      	subs	r3, r7, #1
 80088ca:	1159      	asrs	r1, r3, #5
 80088cc:	f003 021f 	and.w	r2, r3, #31
 80088d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80088d4:	f04f 0a01 	mov.w	sl, #1
 80088d8:	fa0a f202 	lsl.w	r2, sl, r2
 80088dc:	420a      	tst	r2, r1
 80088de:	d009      	beq.n	80088f4 <__gethex+0x1f8>
 80088e0:	4553      	cmp	r3, sl
 80088e2:	dd05      	ble.n	80088f0 <__gethex+0x1f4>
 80088e4:	1eb9      	subs	r1, r7, #2
 80088e6:	4620      	mov	r0, r4
 80088e8:	f000 fed7 	bl	800969a <__any_on>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d145      	bne.n	800897c <__gethex+0x280>
 80088f0:	f04f 0a02 	mov.w	sl, #2
 80088f4:	4639      	mov	r1, r7
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7ff fe98 	bl	800862c <rshift>
 80088fc:	443d      	add	r5, r7
 80088fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008902:	42ab      	cmp	r3, r5
 8008904:	da4c      	bge.n	80089a0 <__gethex+0x2a4>
 8008906:	ee18 0a10 	vmov	r0, s16
 800890a:	4621      	mov	r1, r4
 800890c:	f000 fa6a 	bl	8008de4 <_Bfree>
 8008910:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008912:	2300      	movs	r3, #0
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	27a3      	movs	r7, #163	; 0xa3
 8008918:	e785      	b.n	8008826 <__gethex+0x12a>
 800891a:	1e73      	subs	r3, r6, #1
 800891c:	9a05      	ldr	r2, [sp, #20]
 800891e:	9303      	str	r3, [sp, #12]
 8008920:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008924:	4293      	cmp	r3, r2
 8008926:	d019      	beq.n	800895c <__gethex+0x260>
 8008928:	f1bb 0f20 	cmp.w	fp, #32
 800892c:	d107      	bne.n	800893e <__gethex+0x242>
 800892e:	9b02      	ldr	r3, [sp, #8]
 8008930:	9a00      	ldr	r2, [sp, #0]
 8008932:	f843 2b04 	str.w	r2, [r3], #4
 8008936:	9302      	str	r3, [sp, #8]
 8008938:	2300      	movs	r3, #0
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	469b      	mov	fp, r3
 800893e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008942:	f7ff fec5 	bl	80086d0 <__hexdig_fun>
 8008946:	9b00      	ldr	r3, [sp, #0]
 8008948:	f000 000f 	and.w	r0, r0, #15
 800894c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008950:	4303      	orrs	r3, r0
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	f10b 0b04 	add.w	fp, fp, #4
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	e00d      	b.n	8008978 <__gethex+0x27c>
 800895c:	9b03      	ldr	r3, [sp, #12]
 800895e:	9a06      	ldr	r2, [sp, #24]
 8008960:	4413      	add	r3, r2
 8008962:	42bb      	cmp	r3, r7
 8008964:	d3e0      	bcc.n	8008928 <__gethex+0x22c>
 8008966:	4618      	mov	r0, r3
 8008968:	9901      	ldr	r1, [sp, #4]
 800896a:	9307      	str	r3, [sp, #28]
 800896c:	4652      	mov	r2, sl
 800896e:	f001 f8e3 	bl	8009b38 <strncmp>
 8008972:	9b07      	ldr	r3, [sp, #28]
 8008974:	2800      	cmp	r0, #0
 8008976:	d1d7      	bne.n	8008928 <__gethex+0x22c>
 8008978:	461e      	mov	r6, r3
 800897a:	e78b      	b.n	8008894 <__gethex+0x198>
 800897c:	f04f 0a03 	mov.w	sl, #3
 8008980:	e7b8      	b.n	80088f4 <__gethex+0x1f8>
 8008982:	da0a      	bge.n	800899a <__gethex+0x29e>
 8008984:	1a37      	subs	r7, r6, r0
 8008986:	4621      	mov	r1, r4
 8008988:	ee18 0a10 	vmov	r0, s16
 800898c:	463a      	mov	r2, r7
 800898e:	f000 fc45 	bl	800921c <__lshift>
 8008992:	1bed      	subs	r5, r5, r7
 8008994:	4604      	mov	r4, r0
 8008996:	f100 0914 	add.w	r9, r0, #20
 800899a:	f04f 0a00 	mov.w	sl, #0
 800899e:	e7ae      	b.n	80088fe <__gethex+0x202>
 80089a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80089a4:	42a8      	cmp	r0, r5
 80089a6:	dd72      	ble.n	8008a8e <__gethex+0x392>
 80089a8:	1b45      	subs	r5, r0, r5
 80089aa:	42ae      	cmp	r6, r5
 80089ac:	dc36      	bgt.n	8008a1c <__gethex+0x320>
 80089ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d02a      	beq.n	8008a0c <__gethex+0x310>
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d02c      	beq.n	8008a14 <__gethex+0x318>
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d115      	bne.n	80089ea <__gethex+0x2ee>
 80089be:	42ae      	cmp	r6, r5
 80089c0:	d113      	bne.n	80089ea <__gethex+0x2ee>
 80089c2:	2e01      	cmp	r6, #1
 80089c4:	d10b      	bne.n	80089de <__gethex+0x2e2>
 80089c6:	9a04      	ldr	r2, [sp, #16]
 80089c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	2301      	movs	r3, #1
 80089d0:	6123      	str	r3, [r4, #16]
 80089d2:	f8c9 3000 	str.w	r3, [r9]
 80089d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089d8:	2762      	movs	r7, #98	; 0x62
 80089da:	601c      	str	r4, [r3, #0]
 80089dc:	e723      	b.n	8008826 <__gethex+0x12a>
 80089de:	1e71      	subs	r1, r6, #1
 80089e0:	4620      	mov	r0, r4
 80089e2:	f000 fe5a 	bl	800969a <__any_on>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d1ed      	bne.n	80089c6 <__gethex+0x2ca>
 80089ea:	ee18 0a10 	vmov	r0, s16
 80089ee:	4621      	mov	r1, r4
 80089f0:	f000 f9f8 	bl	8008de4 <_Bfree>
 80089f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80089f6:	2300      	movs	r3, #0
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	2750      	movs	r7, #80	; 0x50
 80089fc:	e713      	b.n	8008826 <__gethex+0x12a>
 80089fe:	bf00      	nop
 8008a00:	0800a9a8 	.word	0x0800a9a8
 8008a04:	0800a92c 	.word	0x0800a92c
 8008a08:	0800a93d 	.word	0x0800a93d
 8008a0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1eb      	bne.n	80089ea <__gethex+0x2ee>
 8008a12:	e7d8      	b.n	80089c6 <__gethex+0x2ca>
 8008a14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1d5      	bne.n	80089c6 <__gethex+0x2ca>
 8008a1a:	e7e6      	b.n	80089ea <__gethex+0x2ee>
 8008a1c:	1e6f      	subs	r7, r5, #1
 8008a1e:	f1ba 0f00 	cmp.w	sl, #0
 8008a22:	d131      	bne.n	8008a88 <__gethex+0x38c>
 8008a24:	b127      	cbz	r7, 8008a30 <__gethex+0x334>
 8008a26:	4639      	mov	r1, r7
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 fe36 	bl	800969a <__any_on>
 8008a2e:	4682      	mov	sl, r0
 8008a30:	117b      	asrs	r3, r7, #5
 8008a32:	2101      	movs	r1, #1
 8008a34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008a38:	f007 071f 	and.w	r7, r7, #31
 8008a3c:	fa01 f707 	lsl.w	r7, r1, r7
 8008a40:	421f      	tst	r7, r3
 8008a42:	4629      	mov	r1, r5
 8008a44:	4620      	mov	r0, r4
 8008a46:	bf18      	it	ne
 8008a48:	f04a 0a02 	orrne.w	sl, sl, #2
 8008a4c:	1b76      	subs	r6, r6, r5
 8008a4e:	f7ff fded 	bl	800862c <rshift>
 8008a52:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008a56:	2702      	movs	r7, #2
 8008a58:	f1ba 0f00 	cmp.w	sl, #0
 8008a5c:	d048      	beq.n	8008af0 <__gethex+0x3f4>
 8008a5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d015      	beq.n	8008a92 <__gethex+0x396>
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	d017      	beq.n	8008a9a <__gethex+0x39e>
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d109      	bne.n	8008a82 <__gethex+0x386>
 8008a6e:	f01a 0f02 	tst.w	sl, #2
 8008a72:	d006      	beq.n	8008a82 <__gethex+0x386>
 8008a74:	f8d9 0000 	ldr.w	r0, [r9]
 8008a78:	ea4a 0a00 	orr.w	sl, sl, r0
 8008a7c:	f01a 0f01 	tst.w	sl, #1
 8008a80:	d10e      	bne.n	8008aa0 <__gethex+0x3a4>
 8008a82:	f047 0710 	orr.w	r7, r7, #16
 8008a86:	e033      	b.n	8008af0 <__gethex+0x3f4>
 8008a88:	f04f 0a01 	mov.w	sl, #1
 8008a8c:	e7d0      	b.n	8008a30 <__gethex+0x334>
 8008a8e:	2701      	movs	r7, #1
 8008a90:	e7e2      	b.n	8008a58 <__gethex+0x35c>
 8008a92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a94:	f1c3 0301 	rsb	r3, r3, #1
 8008a98:	9315      	str	r3, [sp, #84]	; 0x54
 8008a9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0f0      	beq.n	8008a82 <__gethex+0x386>
 8008aa0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008aa4:	f104 0314 	add.w	r3, r4, #20
 8008aa8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008aac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008ab0:	f04f 0c00 	mov.w	ip, #0
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aba:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008abe:	d01c      	beq.n	8008afa <__gethex+0x3fe>
 8008ac0:	3201      	adds	r2, #1
 8008ac2:	6002      	str	r2, [r0, #0]
 8008ac4:	2f02      	cmp	r7, #2
 8008ac6:	f104 0314 	add.w	r3, r4, #20
 8008aca:	d13f      	bne.n	8008b4c <__gethex+0x450>
 8008acc:	f8d8 2000 	ldr.w	r2, [r8]
 8008ad0:	3a01      	subs	r2, #1
 8008ad2:	42b2      	cmp	r2, r6
 8008ad4:	d10a      	bne.n	8008aec <__gethex+0x3f0>
 8008ad6:	1171      	asrs	r1, r6, #5
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ade:	f006 061f 	and.w	r6, r6, #31
 8008ae2:	fa02 f606 	lsl.w	r6, r2, r6
 8008ae6:	421e      	tst	r6, r3
 8008ae8:	bf18      	it	ne
 8008aea:	4617      	movne	r7, r2
 8008aec:	f047 0720 	orr.w	r7, r7, #32
 8008af0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008af2:	601c      	str	r4, [r3, #0]
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	601d      	str	r5, [r3, #0]
 8008af8:	e695      	b.n	8008826 <__gethex+0x12a>
 8008afa:	4299      	cmp	r1, r3
 8008afc:	f843 cc04 	str.w	ip, [r3, #-4]
 8008b00:	d8d8      	bhi.n	8008ab4 <__gethex+0x3b8>
 8008b02:	68a3      	ldr	r3, [r4, #8]
 8008b04:	459b      	cmp	fp, r3
 8008b06:	db19      	blt.n	8008b3c <__gethex+0x440>
 8008b08:	6861      	ldr	r1, [r4, #4]
 8008b0a:	ee18 0a10 	vmov	r0, s16
 8008b0e:	3101      	adds	r1, #1
 8008b10:	f000 f928 	bl	8008d64 <_Balloc>
 8008b14:	4681      	mov	r9, r0
 8008b16:	b918      	cbnz	r0, 8008b20 <__gethex+0x424>
 8008b18:	4b1a      	ldr	r3, [pc, #104]	; (8008b84 <__gethex+0x488>)
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	2184      	movs	r1, #132	; 0x84
 8008b1e:	e6a8      	b.n	8008872 <__gethex+0x176>
 8008b20:	6922      	ldr	r2, [r4, #16]
 8008b22:	3202      	adds	r2, #2
 8008b24:	f104 010c 	add.w	r1, r4, #12
 8008b28:	0092      	lsls	r2, r2, #2
 8008b2a:	300c      	adds	r0, #12
 8008b2c:	f000 f90c 	bl	8008d48 <memcpy>
 8008b30:	4621      	mov	r1, r4
 8008b32:	ee18 0a10 	vmov	r0, s16
 8008b36:	f000 f955 	bl	8008de4 <_Bfree>
 8008b3a:	464c      	mov	r4, r9
 8008b3c:	6923      	ldr	r3, [r4, #16]
 8008b3e:	1c5a      	adds	r2, r3, #1
 8008b40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b44:	6122      	str	r2, [r4, #16]
 8008b46:	2201      	movs	r2, #1
 8008b48:	615a      	str	r2, [r3, #20]
 8008b4a:	e7bb      	b.n	8008ac4 <__gethex+0x3c8>
 8008b4c:	6922      	ldr	r2, [r4, #16]
 8008b4e:	455a      	cmp	r2, fp
 8008b50:	dd0b      	ble.n	8008b6a <__gethex+0x46e>
 8008b52:	2101      	movs	r1, #1
 8008b54:	4620      	mov	r0, r4
 8008b56:	f7ff fd69 	bl	800862c <rshift>
 8008b5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b5e:	3501      	adds	r5, #1
 8008b60:	42ab      	cmp	r3, r5
 8008b62:	f6ff aed0 	blt.w	8008906 <__gethex+0x20a>
 8008b66:	2701      	movs	r7, #1
 8008b68:	e7c0      	b.n	8008aec <__gethex+0x3f0>
 8008b6a:	f016 061f 	ands.w	r6, r6, #31
 8008b6e:	d0fa      	beq.n	8008b66 <__gethex+0x46a>
 8008b70:	449a      	add	sl, r3
 8008b72:	f1c6 0620 	rsb	r6, r6, #32
 8008b76:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008b7a:	f000 f9e9 	bl	8008f50 <__hi0bits>
 8008b7e:	42b0      	cmp	r0, r6
 8008b80:	dbe7      	blt.n	8008b52 <__gethex+0x456>
 8008b82:	e7f0      	b.n	8008b66 <__gethex+0x46a>
 8008b84:	0800a92c 	.word	0x0800a92c

08008b88 <L_shift>:
 8008b88:	f1c2 0208 	rsb	r2, r2, #8
 8008b8c:	0092      	lsls	r2, r2, #2
 8008b8e:	b570      	push	{r4, r5, r6, lr}
 8008b90:	f1c2 0620 	rsb	r6, r2, #32
 8008b94:	6843      	ldr	r3, [r0, #4]
 8008b96:	6804      	ldr	r4, [r0, #0]
 8008b98:	fa03 f506 	lsl.w	r5, r3, r6
 8008b9c:	432c      	orrs	r4, r5
 8008b9e:	40d3      	lsrs	r3, r2
 8008ba0:	6004      	str	r4, [r0, #0]
 8008ba2:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ba6:	4288      	cmp	r0, r1
 8008ba8:	d3f4      	bcc.n	8008b94 <L_shift+0xc>
 8008baa:	bd70      	pop	{r4, r5, r6, pc}

08008bac <__match>:
 8008bac:	b530      	push	{r4, r5, lr}
 8008bae:	6803      	ldr	r3, [r0, #0]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bb6:	b914      	cbnz	r4, 8008bbe <__match+0x12>
 8008bb8:	6003      	str	r3, [r0, #0]
 8008bba:	2001      	movs	r0, #1
 8008bbc:	bd30      	pop	{r4, r5, pc}
 8008bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bc2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008bc6:	2d19      	cmp	r5, #25
 8008bc8:	bf98      	it	ls
 8008bca:	3220      	addls	r2, #32
 8008bcc:	42a2      	cmp	r2, r4
 8008bce:	d0f0      	beq.n	8008bb2 <__match+0x6>
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	e7f3      	b.n	8008bbc <__match+0x10>

08008bd4 <__hexnan>:
 8008bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd8:	680b      	ldr	r3, [r1, #0]
 8008bda:	6801      	ldr	r1, [r0, #0]
 8008bdc:	115e      	asrs	r6, r3, #5
 8008bde:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008be2:	f013 031f 	ands.w	r3, r3, #31
 8008be6:	b087      	sub	sp, #28
 8008be8:	bf18      	it	ne
 8008bea:	3604      	addne	r6, #4
 8008bec:	2500      	movs	r5, #0
 8008bee:	1f37      	subs	r7, r6, #4
 8008bf0:	4682      	mov	sl, r0
 8008bf2:	4690      	mov	r8, r2
 8008bf4:	9301      	str	r3, [sp, #4]
 8008bf6:	f846 5c04 	str.w	r5, [r6, #-4]
 8008bfa:	46b9      	mov	r9, r7
 8008bfc:	463c      	mov	r4, r7
 8008bfe:	9502      	str	r5, [sp, #8]
 8008c00:	46ab      	mov	fp, r5
 8008c02:	784a      	ldrb	r2, [r1, #1]
 8008c04:	1c4b      	adds	r3, r1, #1
 8008c06:	9303      	str	r3, [sp, #12]
 8008c08:	b342      	cbz	r2, 8008c5c <__hexnan+0x88>
 8008c0a:	4610      	mov	r0, r2
 8008c0c:	9105      	str	r1, [sp, #20]
 8008c0e:	9204      	str	r2, [sp, #16]
 8008c10:	f7ff fd5e 	bl	80086d0 <__hexdig_fun>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d14f      	bne.n	8008cb8 <__hexnan+0xe4>
 8008c18:	9a04      	ldr	r2, [sp, #16]
 8008c1a:	9905      	ldr	r1, [sp, #20]
 8008c1c:	2a20      	cmp	r2, #32
 8008c1e:	d818      	bhi.n	8008c52 <__hexnan+0x7e>
 8008c20:	9b02      	ldr	r3, [sp, #8]
 8008c22:	459b      	cmp	fp, r3
 8008c24:	dd13      	ble.n	8008c4e <__hexnan+0x7a>
 8008c26:	454c      	cmp	r4, r9
 8008c28:	d206      	bcs.n	8008c38 <__hexnan+0x64>
 8008c2a:	2d07      	cmp	r5, #7
 8008c2c:	dc04      	bgt.n	8008c38 <__hexnan+0x64>
 8008c2e:	462a      	mov	r2, r5
 8008c30:	4649      	mov	r1, r9
 8008c32:	4620      	mov	r0, r4
 8008c34:	f7ff ffa8 	bl	8008b88 <L_shift>
 8008c38:	4544      	cmp	r4, r8
 8008c3a:	d950      	bls.n	8008cde <__hexnan+0x10a>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f1a4 0904 	sub.w	r9, r4, #4
 8008c42:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c46:	f8cd b008 	str.w	fp, [sp, #8]
 8008c4a:	464c      	mov	r4, r9
 8008c4c:	461d      	mov	r5, r3
 8008c4e:	9903      	ldr	r1, [sp, #12]
 8008c50:	e7d7      	b.n	8008c02 <__hexnan+0x2e>
 8008c52:	2a29      	cmp	r2, #41	; 0x29
 8008c54:	d156      	bne.n	8008d04 <__hexnan+0x130>
 8008c56:	3102      	adds	r1, #2
 8008c58:	f8ca 1000 	str.w	r1, [sl]
 8008c5c:	f1bb 0f00 	cmp.w	fp, #0
 8008c60:	d050      	beq.n	8008d04 <__hexnan+0x130>
 8008c62:	454c      	cmp	r4, r9
 8008c64:	d206      	bcs.n	8008c74 <__hexnan+0xa0>
 8008c66:	2d07      	cmp	r5, #7
 8008c68:	dc04      	bgt.n	8008c74 <__hexnan+0xa0>
 8008c6a:	462a      	mov	r2, r5
 8008c6c:	4649      	mov	r1, r9
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f7ff ff8a 	bl	8008b88 <L_shift>
 8008c74:	4544      	cmp	r4, r8
 8008c76:	d934      	bls.n	8008ce2 <__hexnan+0x10e>
 8008c78:	f1a8 0204 	sub.w	r2, r8, #4
 8008c7c:	4623      	mov	r3, r4
 8008c7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c82:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c86:	429f      	cmp	r7, r3
 8008c88:	d2f9      	bcs.n	8008c7e <__hexnan+0xaa>
 8008c8a:	1b3b      	subs	r3, r7, r4
 8008c8c:	f023 0303 	bic.w	r3, r3, #3
 8008c90:	3304      	adds	r3, #4
 8008c92:	3401      	adds	r4, #1
 8008c94:	3e03      	subs	r6, #3
 8008c96:	42b4      	cmp	r4, r6
 8008c98:	bf88      	it	hi
 8008c9a:	2304      	movhi	r3, #4
 8008c9c:	4443      	add	r3, r8
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f843 2b04 	str.w	r2, [r3], #4
 8008ca4:	429f      	cmp	r7, r3
 8008ca6:	d2fb      	bcs.n	8008ca0 <__hexnan+0xcc>
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	b91b      	cbnz	r3, 8008cb4 <__hexnan+0xe0>
 8008cac:	4547      	cmp	r7, r8
 8008cae:	d127      	bne.n	8008d00 <__hexnan+0x12c>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	2005      	movs	r0, #5
 8008cb6:	e026      	b.n	8008d06 <__hexnan+0x132>
 8008cb8:	3501      	adds	r5, #1
 8008cba:	2d08      	cmp	r5, #8
 8008cbc:	f10b 0b01 	add.w	fp, fp, #1
 8008cc0:	dd06      	ble.n	8008cd0 <__hexnan+0xfc>
 8008cc2:	4544      	cmp	r4, r8
 8008cc4:	d9c3      	bls.n	8008c4e <__hexnan+0x7a>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ccc:	2501      	movs	r5, #1
 8008cce:	3c04      	subs	r4, #4
 8008cd0:	6822      	ldr	r2, [r4, #0]
 8008cd2:	f000 000f 	and.w	r0, r0, #15
 8008cd6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008cda:	6022      	str	r2, [r4, #0]
 8008cdc:	e7b7      	b.n	8008c4e <__hexnan+0x7a>
 8008cde:	2508      	movs	r5, #8
 8008ce0:	e7b5      	b.n	8008c4e <__hexnan+0x7a>
 8008ce2:	9b01      	ldr	r3, [sp, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d0df      	beq.n	8008ca8 <__hexnan+0xd4>
 8008ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cec:	f1c3 0320 	rsb	r3, r3, #32
 8008cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008cf8:	401a      	ands	r2, r3
 8008cfa:	f846 2c04 	str.w	r2, [r6, #-4]
 8008cfe:	e7d3      	b.n	8008ca8 <__hexnan+0xd4>
 8008d00:	3f04      	subs	r7, #4
 8008d02:	e7d1      	b.n	8008ca8 <__hexnan+0xd4>
 8008d04:	2004      	movs	r0, #4
 8008d06:	b007      	add	sp, #28
 8008d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d0c <_localeconv_r>:
 8008d0c:	4800      	ldr	r0, [pc, #0]	; (8008d10 <_localeconv_r+0x4>)
 8008d0e:	4770      	bx	lr
 8008d10:	20000174 	.word	0x20000174

08008d14 <malloc>:
 8008d14:	4b02      	ldr	r3, [pc, #8]	; (8008d20 <malloc+0xc>)
 8008d16:	4601      	mov	r1, r0
 8008d18:	6818      	ldr	r0, [r3, #0]
 8008d1a:	f000 bd3f 	b.w	800979c <_malloc_r>
 8008d1e:	bf00      	nop
 8008d20:	2000001c 	.word	0x2000001c

08008d24 <__ascii_mbtowc>:
 8008d24:	b082      	sub	sp, #8
 8008d26:	b901      	cbnz	r1, 8008d2a <__ascii_mbtowc+0x6>
 8008d28:	a901      	add	r1, sp, #4
 8008d2a:	b142      	cbz	r2, 8008d3e <__ascii_mbtowc+0x1a>
 8008d2c:	b14b      	cbz	r3, 8008d42 <__ascii_mbtowc+0x1e>
 8008d2e:	7813      	ldrb	r3, [r2, #0]
 8008d30:	600b      	str	r3, [r1, #0]
 8008d32:	7812      	ldrb	r2, [r2, #0]
 8008d34:	1e10      	subs	r0, r2, #0
 8008d36:	bf18      	it	ne
 8008d38:	2001      	movne	r0, #1
 8008d3a:	b002      	add	sp, #8
 8008d3c:	4770      	bx	lr
 8008d3e:	4610      	mov	r0, r2
 8008d40:	e7fb      	b.n	8008d3a <__ascii_mbtowc+0x16>
 8008d42:	f06f 0001 	mvn.w	r0, #1
 8008d46:	e7f8      	b.n	8008d3a <__ascii_mbtowc+0x16>

08008d48 <memcpy>:
 8008d48:	440a      	add	r2, r1
 8008d4a:	4291      	cmp	r1, r2
 8008d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d50:	d100      	bne.n	8008d54 <memcpy+0xc>
 8008d52:	4770      	bx	lr
 8008d54:	b510      	push	{r4, lr}
 8008d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d5e:	4291      	cmp	r1, r2
 8008d60:	d1f9      	bne.n	8008d56 <memcpy+0xe>
 8008d62:	bd10      	pop	{r4, pc}

08008d64 <_Balloc>:
 8008d64:	b570      	push	{r4, r5, r6, lr}
 8008d66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d68:	4604      	mov	r4, r0
 8008d6a:	460d      	mov	r5, r1
 8008d6c:	b976      	cbnz	r6, 8008d8c <_Balloc+0x28>
 8008d6e:	2010      	movs	r0, #16
 8008d70:	f7ff ffd0 	bl	8008d14 <malloc>
 8008d74:	4602      	mov	r2, r0
 8008d76:	6260      	str	r0, [r4, #36]	; 0x24
 8008d78:	b920      	cbnz	r0, 8008d84 <_Balloc+0x20>
 8008d7a:	4b18      	ldr	r3, [pc, #96]	; (8008ddc <_Balloc+0x78>)
 8008d7c:	4818      	ldr	r0, [pc, #96]	; (8008de0 <_Balloc+0x7c>)
 8008d7e:	2166      	movs	r1, #102	; 0x66
 8008d80:	f000 fefa 	bl	8009b78 <__assert_func>
 8008d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d88:	6006      	str	r6, [r0, #0]
 8008d8a:	60c6      	str	r6, [r0, #12]
 8008d8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d8e:	68f3      	ldr	r3, [r6, #12]
 8008d90:	b183      	cbz	r3, 8008db4 <_Balloc+0x50>
 8008d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d9a:	b9b8      	cbnz	r0, 8008dcc <_Balloc+0x68>
 8008d9c:	2101      	movs	r1, #1
 8008d9e:	fa01 f605 	lsl.w	r6, r1, r5
 8008da2:	1d72      	adds	r2, r6, #5
 8008da4:	0092      	lsls	r2, r2, #2
 8008da6:	4620      	mov	r0, r4
 8008da8:	f000 fc98 	bl	80096dc <_calloc_r>
 8008dac:	b160      	cbz	r0, 8008dc8 <_Balloc+0x64>
 8008dae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008db2:	e00e      	b.n	8008dd2 <_Balloc+0x6e>
 8008db4:	2221      	movs	r2, #33	; 0x21
 8008db6:	2104      	movs	r1, #4
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 fc8f 	bl	80096dc <_calloc_r>
 8008dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dc0:	60f0      	str	r0, [r6, #12]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1e4      	bne.n	8008d92 <_Balloc+0x2e>
 8008dc8:	2000      	movs	r0, #0
 8008dca:	bd70      	pop	{r4, r5, r6, pc}
 8008dcc:	6802      	ldr	r2, [r0, #0]
 8008dce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008dd8:	e7f7      	b.n	8008dca <_Balloc+0x66>
 8008dda:	bf00      	nop
 8008ddc:	0800a8b6 	.word	0x0800a8b6
 8008de0:	0800a9bc 	.word	0x0800a9bc

08008de4 <_Bfree>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008de8:	4605      	mov	r5, r0
 8008dea:	460c      	mov	r4, r1
 8008dec:	b976      	cbnz	r6, 8008e0c <_Bfree+0x28>
 8008dee:	2010      	movs	r0, #16
 8008df0:	f7ff ff90 	bl	8008d14 <malloc>
 8008df4:	4602      	mov	r2, r0
 8008df6:	6268      	str	r0, [r5, #36]	; 0x24
 8008df8:	b920      	cbnz	r0, 8008e04 <_Bfree+0x20>
 8008dfa:	4b09      	ldr	r3, [pc, #36]	; (8008e20 <_Bfree+0x3c>)
 8008dfc:	4809      	ldr	r0, [pc, #36]	; (8008e24 <_Bfree+0x40>)
 8008dfe:	218a      	movs	r1, #138	; 0x8a
 8008e00:	f000 feba 	bl	8009b78 <__assert_func>
 8008e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e08:	6006      	str	r6, [r0, #0]
 8008e0a:	60c6      	str	r6, [r0, #12]
 8008e0c:	b13c      	cbz	r4, 8008e1e <_Bfree+0x3a>
 8008e0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e10:	6862      	ldr	r2, [r4, #4]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e18:	6021      	str	r1, [r4, #0]
 8008e1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e1e:	bd70      	pop	{r4, r5, r6, pc}
 8008e20:	0800a8b6 	.word	0x0800a8b6
 8008e24:	0800a9bc 	.word	0x0800a9bc

08008e28 <__multadd>:
 8008e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2c:	690e      	ldr	r6, [r1, #16]
 8008e2e:	4607      	mov	r7, r0
 8008e30:	4698      	mov	r8, r3
 8008e32:	460c      	mov	r4, r1
 8008e34:	f101 0014 	add.w	r0, r1, #20
 8008e38:	2300      	movs	r3, #0
 8008e3a:	6805      	ldr	r5, [r0, #0]
 8008e3c:	b2a9      	uxth	r1, r5
 8008e3e:	fb02 8101 	mla	r1, r2, r1, r8
 8008e42:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008e46:	0c2d      	lsrs	r5, r5, #16
 8008e48:	fb02 c505 	mla	r5, r2, r5, ip
 8008e4c:	b289      	uxth	r1, r1
 8008e4e:	3301      	adds	r3, #1
 8008e50:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008e54:	429e      	cmp	r6, r3
 8008e56:	f840 1b04 	str.w	r1, [r0], #4
 8008e5a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008e5e:	dcec      	bgt.n	8008e3a <__multadd+0x12>
 8008e60:	f1b8 0f00 	cmp.w	r8, #0
 8008e64:	d022      	beq.n	8008eac <__multadd+0x84>
 8008e66:	68a3      	ldr	r3, [r4, #8]
 8008e68:	42b3      	cmp	r3, r6
 8008e6a:	dc19      	bgt.n	8008ea0 <__multadd+0x78>
 8008e6c:	6861      	ldr	r1, [r4, #4]
 8008e6e:	4638      	mov	r0, r7
 8008e70:	3101      	adds	r1, #1
 8008e72:	f7ff ff77 	bl	8008d64 <_Balloc>
 8008e76:	4605      	mov	r5, r0
 8008e78:	b928      	cbnz	r0, 8008e86 <__multadd+0x5e>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <__multadd+0x8c>)
 8008e7e:	480e      	ldr	r0, [pc, #56]	; (8008eb8 <__multadd+0x90>)
 8008e80:	21b5      	movs	r1, #181	; 0xb5
 8008e82:	f000 fe79 	bl	8009b78 <__assert_func>
 8008e86:	6922      	ldr	r2, [r4, #16]
 8008e88:	3202      	adds	r2, #2
 8008e8a:	f104 010c 	add.w	r1, r4, #12
 8008e8e:	0092      	lsls	r2, r2, #2
 8008e90:	300c      	adds	r0, #12
 8008e92:	f7ff ff59 	bl	8008d48 <memcpy>
 8008e96:	4621      	mov	r1, r4
 8008e98:	4638      	mov	r0, r7
 8008e9a:	f7ff ffa3 	bl	8008de4 <_Bfree>
 8008e9e:	462c      	mov	r4, r5
 8008ea0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008ea4:	3601      	adds	r6, #1
 8008ea6:	f8c3 8014 	str.w	r8, [r3, #20]
 8008eaa:	6126      	str	r6, [r4, #16]
 8008eac:	4620      	mov	r0, r4
 8008eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb2:	bf00      	nop
 8008eb4:	0800a92c 	.word	0x0800a92c
 8008eb8:	0800a9bc 	.word	0x0800a9bc

08008ebc <__s2b>:
 8008ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	4615      	mov	r5, r2
 8008ec4:	461f      	mov	r7, r3
 8008ec6:	2209      	movs	r2, #9
 8008ec8:	3308      	adds	r3, #8
 8008eca:	4606      	mov	r6, r0
 8008ecc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	db09      	blt.n	8008eec <__s2b+0x30>
 8008ed8:	4630      	mov	r0, r6
 8008eda:	f7ff ff43 	bl	8008d64 <_Balloc>
 8008ede:	b940      	cbnz	r0, 8008ef2 <__s2b+0x36>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	4b19      	ldr	r3, [pc, #100]	; (8008f48 <__s2b+0x8c>)
 8008ee4:	4819      	ldr	r0, [pc, #100]	; (8008f4c <__s2b+0x90>)
 8008ee6:	21ce      	movs	r1, #206	; 0xce
 8008ee8:	f000 fe46 	bl	8009b78 <__assert_func>
 8008eec:	0052      	lsls	r2, r2, #1
 8008eee:	3101      	adds	r1, #1
 8008ef0:	e7f0      	b.n	8008ed4 <__s2b+0x18>
 8008ef2:	9b08      	ldr	r3, [sp, #32]
 8008ef4:	6143      	str	r3, [r0, #20]
 8008ef6:	2d09      	cmp	r5, #9
 8008ef8:	f04f 0301 	mov.w	r3, #1
 8008efc:	6103      	str	r3, [r0, #16]
 8008efe:	dd16      	ble.n	8008f2e <__s2b+0x72>
 8008f00:	f104 0909 	add.w	r9, r4, #9
 8008f04:	46c8      	mov	r8, r9
 8008f06:	442c      	add	r4, r5
 8008f08:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008f0c:	4601      	mov	r1, r0
 8008f0e:	3b30      	subs	r3, #48	; 0x30
 8008f10:	220a      	movs	r2, #10
 8008f12:	4630      	mov	r0, r6
 8008f14:	f7ff ff88 	bl	8008e28 <__multadd>
 8008f18:	45a0      	cmp	r8, r4
 8008f1a:	d1f5      	bne.n	8008f08 <__s2b+0x4c>
 8008f1c:	f1a5 0408 	sub.w	r4, r5, #8
 8008f20:	444c      	add	r4, r9
 8008f22:	1b2d      	subs	r5, r5, r4
 8008f24:	1963      	adds	r3, r4, r5
 8008f26:	42bb      	cmp	r3, r7
 8008f28:	db04      	blt.n	8008f34 <__s2b+0x78>
 8008f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f2e:	340a      	adds	r4, #10
 8008f30:	2509      	movs	r5, #9
 8008f32:	e7f6      	b.n	8008f22 <__s2b+0x66>
 8008f34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f38:	4601      	mov	r1, r0
 8008f3a:	3b30      	subs	r3, #48	; 0x30
 8008f3c:	220a      	movs	r2, #10
 8008f3e:	4630      	mov	r0, r6
 8008f40:	f7ff ff72 	bl	8008e28 <__multadd>
 8008f44:	e7ee      	b.n	8008f24 <__s2b+0x68>
 8008f46:	bf00      	nop
 8008f48:	0800a92c 	.word	0x0800a92c
 8008f4c:	0800a9bc 	.word	0x0800a9bc

08008f50 <__hi0bits>:
 8008f50:	0c03      	lsrs	r3, r0, #16
 8008f52:	041b      	lsls	r3, r3, #16
 8008f54:	b9d3      	cbnz	r3, 8008f8c <__hi0bits+0x3c>
 8008f56:	0400      	lsls	r0, r0, #16
 8008f58:	2310      	movs	r3, #16
 8008f5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008f5e:	bf04      	itt	eq
 8008f60:	0200      	lsleq	r0, r0, #8
 8008f62:	3308      	addeq	r3, #8
 8008f64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f68:	bf04      	itt	eq
 8008f6a:	0100      	lsleq	r0, r0, #4
 8008f6c:	3304      	addeq	r3, #4
 8008f6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f72:	bf04      	itt	eq
 8008f74:	0080      	lsleq	r0, r0, #2
 8008f76:	3302      	addeq	r3, #2
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	db05      	blt.n	8008f88 <__hi0bits+0x38>
 8008f7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f80:	f103 0301 	add.w	r3, r3, #1
 8008f84:	bf08      	it	eq
 8008f86:	2320      	moveq	r3, #32
 8008f88:	4618      	mov	r0, r3
 8008f8a:	4770      	bx	lr
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e7e4      	b.n	8008f5a <__hi0bits+0xa>

08008f90 <__lo0bits>:
 8008f90:	6803      	ldr	r3, [r0, #0]
 8008f92:	f013 0207 	ands.w	r2, r3, #7
 8008f96:	4601      	mov	r1, r0
 8008f98:	d00b      	beq.n	8008fb2 <__lo0bits+0x22>
 8008f9a:	07da      	lsls	r2, r3, #31
 8008f9c:	d424      	bmi.n	8008fe8 <__lo0bits+0x58>
 8008f9e:	0798      	lsls	r0, r3, #30
 8008fa0:	bf49      	itett	mi
 8008fa2:	085b      	lsrmi	r3, r3, #1
 8008fa4:	089b      	lsrpl	r3, r3, #2
 8008fa6:	2001      	movmi	r0, #1
 8008fa8:	600b      	strmi	r3, [r1, #0]
 8008faa:	bf5c      	itt	pl
 8008fac:	600b      	strpl	r3, [r1, #0]
 8008fae:	2002      	movpl	r0, #2
 8008fb0:	4770      	bx	lr
 8008fb2:	b298      	uxth	r0, r3
 8008fb4:	b9b0      	cbnz	r0, 8008fe4 <__lo0bits+0x54>
 8008fb6:	0c1b      	lsrs	r3, r3, #16
 8008fb8:	2010      	movs	r0, #16
 8008fba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008fbe:	bf04      	itt	eq
 8008fc0:	0a1b      	lsreq	r3, r3, #8
 8008fc2:	3008      	addeq	r0, #8
 8008fc4:	071a      	lsls	r2, r3, #28
 8008fc6:	bf04      	itt	eq
 8008fc8:	091b      	lsreq	r3, r3, #4
 8008fca:	3004      	addeq	r0, #4
 8008fcc:	079a      	lsls	r2, r3, #30
 8008fce:	bf04      	itt	eq
 8008fd0:	089b      	lsreq	r3, r3, #2
 8008fd2:	3002      	addeq	r0, #2
 8008fd4:	07da      	lsls	r2, r3, #31
 8008fd6:	d403      	bmi.n	8008fe0 <__lo0bits+0x50>
 8008fd8:	085b      	lsrs	r3, r3, #1
 8008fda:	f100 0001 	add.w	r0, r0, #1
 8008fde:	d005      	beq.n	8008fec <__lo0bits+0x5c>
 8008fe0:	600b      	str	r3, [r1, #0]
 8008fe2:	4770      	bx	lr
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	e7e8      	b.n	8008fba <__lo0bits+0x2a>
 8008fe8:	2000      	movs	r0, #0
 8008fea:	4770      	bx	lr
 8008fec:	2020      	movs	r0, #32
 8008fee:	4770      	bx	lr

08008ff0 <__i2b>:
 8008ff0:	b510      	push	{r4, lr}
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	f7ff feb5 	bl	8008d64 <_Balloc>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	b928      	cbnz	r0, 800900a <__i2b+0x1a>
 8008ffe:	4b05      	ldr	r3, [pc, #20]	; (8009014 <__i2b+0x24>)
 8009000:	4805      	ldr	r0, [pc, #20]	; (8009018 <__i2b+0x28>)
 8009002:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009006:	f000 fdb7 	bl	8009b78 <__assert_func>
 800900a:	2301      	movs	r3, #1
 800900c:	6144      	str	r4, [r0, #20]
 800900e:	6103      	str	r3, [r0, #16]
 8009010:	bd10      	pop	{r4, pc}
 8009012:	bf00      	nop
 8009014:	0800a92c 	.word	0x0800a92c
 8009018:	0800a9bc 	.word	0x0800a9bc

0800901c <__multiply>:
 800901c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009020:	4614      	mov	r4, r2
 8009022:	690a      	ldr	r2, [r1, #16]
 8009024:	6923      	ldr	r3, [r4, #16]
 8009026:	429a      	cmp	r2, r3
 8009028:	bfb8      	it	lt
 800902a:	460b      	movlt	r3, r1
 800902c:	460d      	mov	r5, r1
 800902e:	bfbc      	itt	lt
 8009030:	4625      	movlt	r5, r4
 8009032:	461c      	movlt	r4, r3
 8009034:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009038:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800903c:	68ab      	ldr	r3, [r5, #8]
 800903e:	6869      	ldr	r1, [r5, #4]
 8009040:	eb0a 0709 	add.w	r7, sl, r9
 8009044:	42bb      	cmp	r3, r7
 8009046:	b085      	sub	sp, #20
 8009048:	bfb8      	it	lt
 800904a:	3101      	addlt	r1, #1
 800904c:	f7ff fe8a 	bl	8008d64 <_Balloc>
 8009050:	b930      	cbnz	r0, 8009060 <__multiply+0x44>
 8009052:	4602      	mov	r2, r0
 8009054:	4b42      	ldr	r3, [pc, #264]	; (8009160 <__multiply+0x144>)
 8009056:	4843      	ldr	r0, [pc, #268]	; (8009164 <__multiply+0x148>)
 8009058:	f240 115d 	movw	r1, #349	; 0x15d
 800905c:	f000 fd8c 	bl	8009b78 <__assert_func>
 8009060:	f100 0614 	add.w	r6, r0, #20
 8009064:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009068:	4633      	mov	r3, r6
 800906a:	2200      	movs	r2, #0
 800906c:	4543      	cmp	r3, r8
 800906e:	d31e      	bcc.n	80090ae <__multiply+0x92>
 8009070:	f105 0c14 	add.w	ip, r5, #20
 8009074:	f104 0314 	add.w	r3, r4, #20
 8009078:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800907c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009080:	9202      	str	r2, [sp, #8]
 8009082:	ebac 0205 	sub.w	r2, ip, r5
 8009086:	3a15      	subs	r2, #21
 8009088:	f022 0203 	bic.w	r2, r2, #3
 800908c:	3204      	adds	r2, #4
 800908e:	f105 0115 	add.w	r1, r5, #21
 8009092:	458c      	cmp	ip, r1
 8009094:	bf38      	it	cc
 8009096:	2204      	movcc	r2, #4
 8009098:	9201      	str	r2, [sp, #4]
 800909a:	9a02      	ldr	r2, [sp, #8]
 800909c:	9303      	str	r3, [sp, #12]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d808      	bhi.n	80090b4 <__multiply+0x98>
 80090a2:	2f00      	cmp	r7, #0
 80090a4:	dc55      	bgt.n	8009152 <__multiply+0x136>
 80090a6:	6107      	str	r7, [r0, #16]
 80090a8:	b005      	add	sp, #20
 80090aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ae:	f843 2b04 	str.w	r2, [r3], #4
 80090b2:	e7db      	b.n	800906c <__multiply+0x50>
 80090b4:	f8b3 a000 	ldrh.w	sl, [r3]
 80090b8:	f1ba 0f00 	cmp.w	sl, #0
 80090bc:	d020      	beq.n	8009100 <__multiply+0xe4>
 80090be:	f105 0e14 	add.w	lr, r5, #20
 80090c2:	46b1      	mov	r9, r6
 80090c4:	2200      	movs	r2, #0
 80090c6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80090ca:	f8d9 b000 	ldr.w	fp, [r9]
 80090ce:	b2a1      	uxth	r1, r4
 80090d0:	fa1f fb8b 	uxth.w	fp, fp
 80090d4:	fb0a b101 	mla	r1, sl, r1, fp
 80090d8:	4411      	add	r1, r2
 80090da:	f8d9 2000 	ldr.w	r2, [r9]
 80090de:	0c24      	lsrs	r4, r4, #16
 80090e0:	0c12      	lsrs	r2, r2, #16
 80090e2:	fb0a 2404 	mla	r4, sl, r4, r2
 80090e6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80090ea:	b289      	uxth	r1, r1
 80090ec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80090f0:	45f4      	cmp	ip, lr
 80090f2:	f849 1b04 	str.w	r1, [r9], #4
 80090f6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80090fa:	d8e4      	bhi.n	80090c6 <__multiply+0xaa>
 80090fc:	9901      	ldr	r1, [sp, #4]
 80090fe:	5072      	str	r2, [r6, r1]
 8009100:	9a03      	ldr	r2, [sp, #12]
 8009102:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009106:	3304      	adds	r3, #4
 8009108:	f1b9 0f00 	cmp.w	r9, #0
 800910c:	d01f      	beq.n	800914e <__multiply+0x132>
 800910e:	6834      	ldr	r4, [r6, #0]
 8009110:	f105 0114 	add.w	r1, r5, #20
 8009114:	46b6      	mov	lr, r6
 8009116:	f04f 0a00 	mov.w	sl, #0
 800911a:	880a      	ldrh	r2, [r1, #0]
 800911c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009120:	fb09 b202 	mla	r2, r9, r2, fp
 8009124:	4492      	add	sl, r2
 8009126:	b2a4      	uxth	r4, r4
 8009128:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800912c:	f84e 4b04 	str.w	r4, [lr], #4
 8009130:	f851 4b04 	ldr.w	r4, [r1], #4
 8009134:	f8be 2000 	ldrh.w	r2, [lr]
 8009138:	0c24      	lsrs	r4, r4, #16
 800913a:	fb09 2404 	mla	r4, r9, r4, r2
 800913e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009142:	458c      	cmp	ip, r1
 8009144:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009148:	d8e7      	bhi.n	800911a <__multiply+0xfe>
 800914a:	9a01      	ldr	r2, [sp, #4]
 800914c:	50b4      	str	r4, [r6, r2]
 800914e:	3604      	adds	r6, #4
 8009150:	e7a3      	b.n	800909a <__multiply+0x7e>
 8009152:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1a5      	bne.n	80090a6 <__multiply+0x8a>
 800915a:	3f01      	subs	r7, #1
 800915c:	e7a1      	b.n	80090a2 <__multiply+0x86>
 800915e:	bf00      	nop
 8009160:	0800a92c 	.word	0x0800a92c
 8009164:	0800a9bc 	.word	0x0800a9bc

08009168 <__pow5mult>:
 8009168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800916c:	4615      	mov	r5, r2
 800916e:	f012 0203 	ands.w	r2, r2, #3
 8009172:	4606      	mov	r6, r0
 8009174:	460f      	mov	r7, r1
 8009176:	d007      	beq.n	8009188 <__pow5mult+0x20>
 8009178:	4c25      	ldr	r4, [pc, #148]	; (8009210 <__pow5mult+0xa8>)
 800917a:	3a01      	subs	r2, #1
 800917c:	2300      	movs	r3, #0
 800917e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009182:	f7ff fe51 	bl	8008e28 <__multadd>
 8009186:	4607      	mov	r7, r0
 8009188:	10ad      	asrs	r5, r5, #2
 800918a:	d03d      	beq.n	8009208 <__pow5mult+0xa0>
 800918c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800918e:	b97c      	cbnz	r4, 80091b0 <__pow5mult+0x48>
 8009190:	2010      	movs	r0, #16
 8009192:	f7ff fdbf 	bl	8008d14 <malloc>
 8009196:	4602      	mov	r2, r0
 8009198:	6270      	str	r0, [r6, #36]	; 0x24
 800919a:	b928      	cbnz	r0, 80091a8 <__pow5mult+0x40>
 800919c:	4b1d      	ldr	r3, [pc, #116]	; (8009214 <__pow5mult+0xac>)
 800919e:	481e      	ldr	r0, [pc, #120]	; (8009218 <__pow5mult+0xb0>)
 80091a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80091a4:	f000 fce8 	bl	8009b78 <__assert_func>
 80091a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091ac:	6004      	str	r4, [r0, #0]
 80091ae:	60c4      	str	r4, [r0, #12]
 80091b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80091b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091b8:	b94c      	cbnz	r4, 80091ce <__pow5mult+0x66>
 80091ba:	f240 2171 	movw	r1, #625	; 0x271
 80091be:	4630      	mov	r0, r6
 80091c0:	f7ff ff16 	bl	8008ff0 <__i2b>
 80091c4:	2300      	movs	r3, #0
 80091c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80091ca:	4604      	mov	r4, r0
 80091cc:	6003      	str	r3, [r0, #0]
 80091ce:	f04f 0900 	mov.w	r9, #0
 80091d2:	07eb      	lsls	r3, r5, #31
 80091d4:	d50a      	bpl.n	80091ec <__pow5mult+0x84>
 80091d6:	4639      	mov	r1, r7
 80091d8:	4622      	mov	r2, r4
 80091da:	4630      	mov	r0, r6
 80091dc:	f7ff ff1e 	bl	800901c <__multiply>
 80091e0:	4639      	mov	r1, r7
 80091e2:	4680      	mov	r8, r0
 80091e4:	4630      	mov	r0, r6
 80091e6:	f7ff fdfd 	bl	8008de4 <_Bfree>
 80091ea:	4647      	mov	r7, r8
 80091ec:	106d      	asrs	r5, r5, #1
 80091ee:	d00b      	beq.n	8009208 <__pow5mult+0xa0>
 80091f0:	6820      	ldr	r0, [r4, #0]
 80091f2:	b938      	cbnz	r0, 8009204 <__pow5mult+0x9c>
 80091f4:	4622      	mov	r2, r4
 80091f6:	4621      	mov	r1, r4
 80091f8:	4630      	mov	r0, r6
 80091fa:	f7ff ff0f 	bl	800901c <__multiply>
 80091fe:	6020      	str	r0, [r4, #0]
 8009200:	f8c0 9000 	str.w	r9, [r0]
 8009204:	4604      	mov	r4, r0
 8009206:	e7e4      	b.n	80091d2 <__pow5mult+0x6a>
 8009208:	4638      	mov	r0, r7
 800920a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800920e:	bf00      	nop
 8009210:	0800ab10 	.word	0x0800ab10
 8009214:	0800a8b6 	.word	0x0800a8b6
 8009218:	0800a9bc 	.word	0x0800a9bc

0800921c <__lshift>:
 800921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	460c      	mov	r4, r1
 8009222:	6849      	ldr	r1, [r1, #4]
 8009224:	6923      	ldr	r3, [r4, #16]
 8009226:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800922a:	68a3      	ldr	r3, [r4, #8]
 800922c:	4607      	mov	r7, r0
 800922e:	4691      	mov	r9, r2
 8009230:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009234:	f108 0601 	add.w	r6, r8, #1
 8009238:	42b3      	cmp	r3, r6
 800923a:	db0b      	blt.n	8009254 <__lshift+0x38>
 800923c:	4638      	mov	r0, r7
 800923e:	f7ff fd91 	bl	8008d64 <_Balloc>
 8009242:	4605      	mov	r5, r0
 8009244:	b948      	cbnz	r0, 800925a <__lshift+0x3e>
 8009246:	4602      	mov	r2, r0
 8009248:	4b28      	ldr	r3, [pc, #160]	; (80092ec <__lshift+0xd0>)
 800924a:	4829      	ldr	r0, [pc, #164]	; (80092f0 <__lshift+0xd4>)
 800924c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009250:	f000 fc92 	bl	8009b78 <__assert_func>
 8009254:	3101      	adds	r1, #1
 8009256:	005b      	lsls	r3, r3, #1
 8009258:	e7ee      	b.n	8009238 <__lshift+0x1c>
 800925a:	2300      	movs	r3, #0
 800925c:	f100 0114 	add.w	r1, r0, #20
 8009260:	f100 0210 	add.w	r2, r0, #16
 8009264:	4618      	mov	r0, r3
 8009266:	4553      	cmp	r3, sl
 8009268:	db33      	blt.n	80092d2 <__lshift+0xb6>
 800926a:	6920      	ldr	r0, [r4, #16]
 800926c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009270:	f104 0314 	add.w	r3, r4, #20
 8009274:	f019 091f 	ands.w	r9, r9, #31
 8009278:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800927c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009280:	d02b      	beq.n	80092da <__lshift+0xbe>
 8009282:	f1c9 0e20 	rsb	lr, r9, #32
 8009286:	468a      	mov	sl, r1
 8009288:	2200      	movs	r2, #0
 800928a:	6818      	ldr	r0, [r3, #0]
 800928c:	fa00 f009 	lsl.w	r0, r0, r9
 8009290:	4302      	orrs	r2, r0
 8009292:	f84a 2b04 	str.w	r2, [sl], #4
 8009296:	f853 2b04 	ldr.w	r2, [r3], #4
 800929a:	459c      	cmp	ip, r3
 800929c:	fa22 f20e 	lsr.w	r2, r2, lr
 80092a0:	d8f3      	bhi.n	800928a <__lshift+0x6e>
 80092a2:	ebac 0304 	sub.w	r3, ip, r4
 80092a6:	3b15      	subs	r3, #21
 80092a8:	f023 0303 	bic.w	r3, r3, #3
 80092ac:	3304      	adds	r3, #4
 80092ae:	f104 0015 	add.w	r0, r4, #21
 80092b2:	4584      	cmp	ip, r0
 80092b4:	bf38      	it	cc
 80092b6:	2304      	movcc	r3, #4
 80092b8:	50ca      	str	r2, [r1, r3]
 80092ba:	b10a      	cbz	r2, 80092c0 <__lshift+0xa4>
 80092bc:	f108 0602 	add.w	r6, r8, #2
 80092c0:	3e01      	subs	r6, #1
 80092c2:	4638      	mov	r0, r7
 80092c4:	612e      	str	r6, [r5, #16]
 80092c6:	4621      	mov	r1, r4
 80092c8:	f7ff fd8c 	bl	8008de4 <_Bfree>
 80092cc:	4628      	mov	r0, r5
 80092ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80092d6:	3301      	adds	r3, #1
 80092d8:	e7c5      	b.n	8009266 <__lshift+0x4a>
 80092da:	3904      	subs	r1, #4
 80092dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80092e4:	459c      	cmp	ip, r3
 80092e6:	d8f9      	bhi.n	80092dc <__lshift+0xc0>
 80092e8:	e7ea      	b.n	80092c0 <__lshift+0xa4>
 80092ea:	bf00      	nop
 80092ec:	0800a92c 	.word	0x0800a92c
 80092f0:	0800a9bc 	.word	0x0800a9bc

080092f4 <__mcmp>:
 80092f4:	b530      	push	{r4, r5, lr}
 80092f6:	6902      	ldr	r2, [r0, #16]
 80092f8:	690c      	ldr	r4, [r1, #16]
 80092fa:	1b12      	subs	r2, r2, r4
 80092fc:	d10e      	bne.n	800931c <__mcmp+0x28>
 80092fe:	f100 0314 	add.w	r3, r0, #20
 8009302:	3114      	adds	r1, #20
 8009304:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009308:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800930c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009310:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009314:	42a5      	cmp	r5, r4
 8009316:	d003      	beq.n	8009320 <__mcmp+0x2c>
 8009318:	d305      	bcc.n	8009326 <__mcmp+0x32>
 800931a:	2201      	movs	r2, #1
 800931c:	4610      	mov	r0, r2
 800931e:	bd30      	pop	{r4, r5, pc}
 8009320:	4283      	cmp	r3, r0
 8009322:	d3f3      	bcc.n	800930c <__mcmp+0x18>
 8009324:	e7fa      	b.n	800931c <__mcmp+0x28>
 8009326:	f04f 32ff 	mov.w	r2, #4294967295
 800932a:	e7f7      	b.n	800931c <__mcmp+0x28>

0800932c <__mdiff>:
 800932c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009330:	460c      	mov	r4, r1
 8009332:	4606      	mov	r6, r0
 8009334:	4611      	mov	r1, r2
 8009336:	4620      	mov	r0, r4
 8009338:	4617      	mov	r7, r2
 800933a:	f7ff ffdb 	bl	80092f4 <__mcmp>
 800933e:	1e05      	subs	r5, r0, #0
 8009340:	d110      	bne.n	8009364 <__mdiff+0x38>
 8009342:	4629      	mov	r1, r5
 8009344:	4630      	mov	r0, r6
 8009346:	f7ff fd0d 	bl	8008d64 <_Balloc>
 800934a:	b930      	cbnz	r0, 800935a <__mdiff+0x2e>
 800934c:	4b39      	ldr	r3, [pc, #228]	; (8009434 <__mdiff+0x108>)
 800934e:	4602      	mov	r2, r0
 8009350:	f240 2132 	movw	r1, #562	; 0x232
 8009354:	4838      	ldr	r0, [pc, #224]	; (8009438 <__mdiff+0x10c>)
 8009356:	f000 fc0f 	bl	8009b78 <__assert_func>
 800935a:	2301      	movs	r3, #1
 800935c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009364:	bfa4      	itt	ge
 8009366:	463b      	movge	r3, r7
 8009368:	4627      	movge	r7, r4
 800936a:	4630      	mov	r0, r6
 800936c:	6879      	ldr	r1, [r7, #4]
 800936e:	bfa6      	itte	ge
 8009370:	461c      	movge	r4, r3
 8009372:	2500      	movge	r5, #0
 8009374:	2501      	movlt	r5, #1
 8009376:	f7ff fcf5 	bl	8008d64 <_Balloc>
 800937a:	b920      	cbnz	r0, 8009386 <__mdiff+0x5a>
 800937c:	4b2d      	ldr	r3, [pc, #180]	; (8009434 <__mdiff+0x108>)
 800937e:	4602      	mov	r2, r0
 8009380:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009384:	e7e6      	b.n	8009354 <__mdiff+0x28>
 8009386:	693e      	ldr	r6, [r7, #16]
 8009388:	60c5      	str	r5, [r0, #12]
 800938a:	6925      	ldr	r5, [r4, #16]
 800938c:	f107 0114 	add.w	r1, r7, #20
 8009390:	f104 0914 	add.w	r9, r4, #20
 8009394:	f100 0e14 	add.w	lr, r0, #20
 8009398:	f107 0210 	add.w	r2, r7, #16
 800939c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80093a0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80093a4:	46f2      	mov	sl, lr
 80093a6:	2700      	movs	r7, #0
 80093a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80093ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80093b0:	fa1f f883 	uxth.w	r8, r3
 80093b4:	fa17 f78b 	uxtah	r7, r7, fp
 80093b8:	0c1b      	lsrs	r3, r3, #16
 80093ba:	eba7 0808 	sub.w	r8, r7, r8
 80093be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80093c6:	fa1f f888 	uxth.w	r8, r8
 80093ca:	141f      	asrs	r7, r3, #16
 80093cc:	454d      	cmp	r5, r9
 80093ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80093d2:	f84a 3b04 	str.w	r3, [sl], #4
 80093d6:	d8e7      	bhi.n	80093a8 <__mdiff+0x7c>
 80093d8:	1b2b      	subs	r3, r5, r4
 80093da:	3b15      	subs	r3, #21
 80093dc:	f023 0303 	bic.w	r3, r3, #3
 80093e0:	3304      	adds	r3, #4
 80093e2:	3415      	adds	r4, #21
 80093e4:	42a5      	cmp	r5, r4
 80093e6:	bf38      	it	cc
 80093e8:	2304      	movcc	r3, #4
 80093ea:	4419      	add	r1, r3
 80093ec:	4473      	add	r3, lr
 80093ee:	469e      	mov	lr, r3
 80093f0:	460d      	mov	r5, r1
 80093f2:	4565      	cmp	r5, ip
 80093f4:	d30e      	bcc.n	8009414 <__mdiff+0xe8>
 80093f6:	f10c 0203 	add.w	r2, ip, #3
 80093fa:	1a52      	subs	r2, r2, r1
 80093fc:	f022 0203 	bic.w	r2, r2, #3
 8009400:	3903      	subs	r1, #3
 8009402:	458c      	cmp	ip, r1
 8009404:	bf38      	it	cc
 8009406:	2200      	movcc	r2, #0
 8009408:	441a      	add	r2, r3
 800940a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800940e:	b17b      	cbz	r3, 8009430 <__mdiff+0x104>
 8009410:	6106      	str	r6, [r0, #16]
 8009412:	e7a5      	b.n	8009360 <__mdiff+0x34>
 8009414:	f855 8b04 	ldr.w	r8, [r5], #4
 8009418:	fa17 f488 	uxtah	r4, r7, r8
 800941c:	1422      	asrs	r2, r4, #16
 800941e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009422:	b2a4      	uxth	r4, r4
 8009424:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009428:	f84e 4b04 	str.w	r4, [lr], #4
 800942c:	1417      	asrs	r7, r2, #16
 800942e:	e7e0      	b.n	80093f2 <__mdiff+0xc6>
 8009430:	3e01      	subs	r6, #1
 8009432:	e7ea      	b.n	800940a <__mdiff+0xde>
 8009434:	0800a92c 	.word	0x0800a92c
 8009438:	0800a9bc 	.word	0x0800a9bc

0800943c <__ulp>:
 800943c:	b082      	sub	sp, #8
 800943e:	ed8d 0b00 	vstr	d0, [sp]
 8009442:	9b01      	ldr	r3, [sp, #4]
 8009444:	4912      	ldr	r1, [pc, #72]	; (8009490 <__ulp+0x54>)
 8009446:	4019      	ands	r1, r3
 8009448:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800944c:	2900      	cmp	r1, #0
 800944e:	dd05      	ble.n	800945c <__ulp+0x20>
 8009450:	2200      	movs	r2, #0
 8009452:	460b      	mov	r3, r1
 8009454:	ec43 2b10 	vmov	d0, r2, r3
 8009458:	b002      	add	sp, #8
 800945a:	4770      	bx	lr
 800945c:	4249      	negs	r1, r1
 800945e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009462:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009466:	f04f 0200 	mov.w	r2, #0
 800946a:	f04f 0300 	mov.w	r3, #0
 800946e:	da04      	bge.n	800947a <__ulp+0x3e>
 8009470:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009474:	fa41 f300 	asr.w	r3, r1, r0
 8009478:	e7ec      	b.n	8009454 <__ulp+0x18>
 800947a:	f1a0 0114 	sub.w	r1, r0, #20
 800947e:	291e      	cmp	r1, #30
 8009480:	bfda      	itte	le
 8009482:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009486:	fa20 f101 	lsrle.w	r1, r0, r1
 800948a:	2101      	movgt	r1, #1
 800948c:	460a      	mov	r2, r1
 800948e:	e7e1      	b.n	8009454 <__ulp+0x18>
 8009490:	7ff00000 	.word	0x7ff00000

08009494 <__b2d>:
 8009494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009496:	6905      	ldr	r5, [r0, #16]
 8009498:	f100 0714 	add.w	r7, r0, #20
 800949c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80094a0:	1f2e      	subs	r6, r5, #4
 80094a2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80094a6:	4620      	mov	r0, r4
 80094a8:	f7ff fd52 	bl	8008f50 <__hi0bits>
 80094ac:	f1c0 0320 	rsb	r3, r0, #32
 80094b0:	280a      	cmp	r0, #10
 80094b2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009530 <__b2d+0x9c>
 80094b6:	600b      	str	r3, [r1, #0]
 80094b8:	dc14      	bgt.n	80094e4 <__b2d+0x50>
 80094ba:	f1c0 0e0b 	rsb	lr, r0, #11
 80094be:	fa24 f10e 	lsr.w	r1, r4, lr
 80094c2:	42b7      	cmp	r7, r6
 80094c4:	ea41 030c 	orr.w	r3, r1, ip
 80094c8:	bf34      	ite	cc
 80094ca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80094ce:	2100      	movcs	r1, #0
 80094d0:	3015      	adds	r0, #21
 80094d2:	fa04 f000 	lsl.w	r0, r4, r0
 80094d6:	fa21 f10e 	lsr.w	r1, r1, lr
 80094da:	ea40 0201 	orr.w	r2, r0, r1
 80094de:	ec43 2b10 	vmov	d0, r2, r3
 80094e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094e4:	42b7      	cmp	r7, r6
 80094e6:	bf3a      	itte	cc
 80094e8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80094ec:	f1a5 0608 	subcc.w	r6, r5, #8
 80094f0:	2100      	movcs	r1, #0
 80094f2:	380b      	subs	r0, #11
 80094f4:	d017      	beq.n	8009526 <__b2d+0x92>
 80094f6:	f1c0 0c20 	rsb	ip, r0, #32
 80094fa:	fa04 f500 	lsl.w	r5, r4, r0
 80094fe:	42be      	cmp	r6, r7
 8009500:	fa21 f40c 	lsr.w	r4, r1, ip
 8009504:	ea45 0504 	orr.w	r5, r5, r4
 8009508:	bf8c      	ite	hi
 800950a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800950e:	2400      	movls	r4, #0
 8009510:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009514:	fa01 f000 	lsl.w	r0, r1, r0
 8009518:	fa24 f40c 	lsr.w	r4, r4, ip
 800951c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009520:	ea40 0204 	orr.w	r2, r0, r4
 8009524:	e7db      	b.n	80094de <__b2d+0x4a>
 8009526:	ea44 030c 	orr.w	r3, r4, ip
 800952a:	460a      	mov	r2, r1
 800952c:	e7d7      	b.n	80094de <__b2d+0x4a>
 800952e:	bf00      	nop
 8009530:	3ff00000 	.word	0x3ff00000

08009534 <__d2b>:
 8009534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009538:	4689      	mov	r9, r1
 800953a:	2101      	movs	r1, #1
 800953c:	ec57 6b10 	vmov	r6, r7, d0
 8009540:	4690      	mov	r8, r2
 8009542:	f7ff fc0f 	bl	8008d64 <_Balloc>
 8009546:	4604      	mov	r4, r0
 8009548:	b930      	cbnz	r0, 8009558 <__d2b+0x24>
 800954a:	4602      	mov	r2, r0
 800954c:	4b25      	ldr	r3, [pc, #148]	; (80095e4 <__d2b+0xb0>)
 800954e:	4826      	ldr	r0, [pc, #152]	; (80095e8 <__d2b+0xb4>)
 8009550:	f240 310a 	movw	r1, #778	; 0x30a
 8009554:	f000 fb10 	bl	8009b78 <__assert_func>
 8009558:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800955c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009560:	bb35      	cbnz	r5, 80095b0 <__d2b+0x7c>
 8009562:	2e00      	cmp	r6, #0
 8009564:	9301      	str	r3, [sp, #4]
 8009566:	d028      	beq.n	80095ba <__d2b+0x86>
 8009568:	4668      	mov	r0, sp
 800956a:	9600      	str	r6, [sp, #0]
 800956c:	f7ff fd10 	bl	8008f90 <__lo0bits>
 8009570:	9900      	ldr	r1, [sp, #0]
 8009572:	b300      	cbz	r0, 80095b6 <__d2b+0x82>
 8009574:	9a01      	ldr	r2, [sp, #4]
 8009576:	f1c0 0320 	rsb	r3, r0, #32
 800957a:	fa02 f303 	lsl.w	r3, r2, r3
 800957e:	430b      	orrs	r3, r1
 8009580:	40c2      	lsrs	r2, r0
 8009582:	6163      	str	r3, [r4, #20]
 8009584:	9201      	str	r2, [sp, #4]
 8009586:	9b01      	ldr	r3, [sp, #4]
 8009588:	61a3      	str	r3, [r4, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	bf14      	ite	ne
 800958e:	2202      	movne	r2, #2
 8009590:	2201      	moveq	r2, #1
 8009592:	6122      	str	r2, [r4, #16]
 8009594:	b1d5      	cbz	r5, 80095cc <__d2b+0x98>
 8009596:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800959a:	4405      	add	r5, r0
 800959c:	f8c9 5000 	str.w	r5, [r9]
 80095a0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095a4:	f8c8 0000 	str.w	r0, [r8]
 80095a8:	4620      	mov	r0, r4
 80095aa:	b003      	add	sp, #12
 80095ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095b4:	e7d5      	b.n	8009562 <__d2b+0x2e>
 80095b6:	6161      	str	r1, [r4, #20]
 80095b8:	e7e5      	b.n	8009586 <__d2b+0x52>
 80095ba:	a801      	add	r0, sp, #4
 80095bc:	f7ff fce8 	bl	8008f90 <__lo0bits>
 80095c0:	9b01      	ldr	r3, [sp, #4]
 80095c2:	6163      	str	r3, [r4, #20]
 80095c4:	2201      	movs	r2, #1
 80095c6:	6122      	str	r2, [r4, #16]
 80095c8:	3020      	adds	r0, #32
 80095ca:	e7e3      	b.n	8009594 <__d2b+0x60>
 80095cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095d4:	f8c9 0000 	str.w	r0, [r9]
 80095d8:	6918      	ldr	r0, [r3, #16]
 80095da:	f7ff fcb9 	bl	8008f50 <__hi0bits>
 80095de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095e2:	e7df      	b.n	80095a4 <__d2b+0x70>
 80095e4:	0800a92c 	.word	0x0800a92c
 80095e8:	0800a9bc 	.word	0x0800a9bc

080095ec <__ratio>:
 80095ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f0:	468a      	mov	sl, r1
 80095f2:	4669      	mov	r1, sp
 80095f4:	4683      	mov	fp, r0
 80095f6:	f7ff ff4d 	bl	8009494 <__b2d>
 80095fa:	a901      	add	r1, sp, #4
 80095fc:	4650      	mov	r0, sl
 80095fe:	ec59 8b10 	vmov	r8, r9, d0
 8009602:	ee10 6a10 	vmov	r6, s0
 8009606:	f7ff ff45 	bl	8009494 <__b2d>
 800960a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800960e:	f8da 2010 	ldr.w	r2, [sl, #16]
 8009612:	eba3 0c02 	sub.w	ip, r3, r2
 8009616:	e9dd 3200 	ldrd	r3, r2, [sp]
 800961a:	1a9b      	subs	r3, r3, r2
 800961c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009620:	ec55 4b10 	vmov	r4, r5, d0
 8009624:	2b00      	cmp	r3, #0
 8009626:	ee10 0a10 	vmov	r0, s0
 800962a:	bfce      	itee	gt
 800962c:	464a      	movgt	r2, r9
 800962e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009632:	462a      	movle	r2, r5
 8009634:	464f      	mov	r7, r9
 8009636:	4629      	mov	r1, r5
 8009638:	bfcc      	ite	gt
 800963a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800963e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009642:	ec47 6b17 	vmov	d7, r6, r7
 8009646:	ec41 0b16 	vmov	d6, r0, r1
 800964a:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800964e:	b003      	add	sp, #12
 8009650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009654 <__copybits>:
 8009654:	3901      	subs	r1, #1
 8009656:	b570      	push	{r4, r5, r6, lr}
 8009658:	1149      	asrs	r1, r1, #5
 800965a:	6914      	ldr	r4, [r2, #16]
 800965c:	3101      	adds	r1, #1
 800965e:	f102 0314 	add.w	r3, r2, #20
 8009662:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009666:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800966a:	1f05      	subs	r5, r0, #4
 800966c:	42a3      	cmp	r3, r4
 800966e:	d30c      	bcc.n	800968a <__copybits+0x36>
 8009670:	1aa3      	subs	r3, r4, r2
 8009672:	3b11      	subs	r3, #17
 8009674:	f023 0303 	bic.w	r3, r3, #3
 8009678:	3211      	adds	r2, #17
 800967a:	42a2      	cmp	r2, r4
 800967c:	bf88      	it	hi
 800967e:	2300      	movhi	r3, #0
 8009680:	4418      	add	r0, r3
 8009682:	2300      	movs	r3, #0
 8009684:	4288      	cmp	r0, r1
 8009686:	d305      	bcc.n	8009694 <__copybits+0x40>
 8009688:	bd70      	pop	{r4, r5, r6, pc}
 800968a:	f853 6b04 	ldr.w	r6, [r3], #4
 800968e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009692:	e7eb      	b.n	800966c <__copybits+0x18>
 8009694:	f840 3b04 	str.w	r3, [r0], #4
 8009698:	e7f4      	b.n	8009684 <__copybits+0x30>

0800969a <__any_on>:
 800969a:	f100 0214 	add.w	r2, r0, #20
 800969e:	6900      	ldr	r0, [r0, #16]
 80096a0:	114b      	asrs	r3, r1, #5
 80096a2:	4298      	cmp	r0, r3
 80096a4:	b510      	push	{r4, lr}
 80096a6:	db11      	blt.n	80096cc <__any_on+0x32>
 80096a8:	dd0a      	ble.n	80096c0 <__any_on+0x26>
 80096aa:	f011 011f 	ands.w	r1, r1, #31
 80096ae:	d007      	beq.n	80096c0 <__any_on+0x26>
 80096b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80096b4:	fa24 f001 	lsr.w	r0, r4, r1
 80096b8:	fa00 f101 	lsl.w	r1, r0, r1
 80096bc:	428c      	cmp	r4, r1
 80096be:	d10b      	bne.n	80096d8 <__any_on+0x3e>
 80096c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d803      	bhi.n	80096d0 <__any_on+0x36>
 80096c8:	2000      	movs	r0, #0
 80096ca:	bd10      	pop	{r4, pc}
 80096cc:	4603      	mov	r3, r0
 80096ce:	e7f7      	b.n	80096c0 <__any_on+0x26>
 80096d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096d4:	2900      	cmp	r1, #0
 80096d6:	d0f5      	beq.n	80096c4 <__any_on+0x2a>
 80096d8:	2001      	movs	r0, #1
 80096da:	e7f6      	b.n	80096ca <__any_on+0x30>

080096dc <_calloc_r>:
 80096dc:	b513      	push	{r0, r1, r4, lr}
 80096de:	434a      	muls	r2, r1
 80096e0:	4611      	mov	r1, r2
 80096e2:	9201      	str	r2, [sp, #4]
 80096e4:	f000 f85a 	bl	800979c <_malloc_r>
 80096e8:	4604      	mov	r4, r0
 80096ea:	b118      	cbz	r0, 80096f4 <_calloc_r+0x18>
 80096ec:	9a01      	ldr	r2, [sp, #4]
 80096ee:	2100      	movs	r1, #0
 80096f0:	f7fc fc98 	bl	8006024 <memset>
 80096f4:	4620      	mov	r0, r4
 80096f6:	b002      	add	sp, #8
 80096f8:	bd10      	pop	{r4, pc}
	...

080096fc <_free_r>:
 80096fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096fe:	2900      	cmp	r1, #0
 8009700:	d048      	beq.n	8009794 <_free_r+0x98>
 8009702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009706:	9001      	str	r0, [sp, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	f1a1 0404 	sub.w	r4, r1, #4
 800970e:	bfb8      	it	lt
 8009710:	18e4      	addlt	r4, r4, r3
 8009712:	f000 fa7b 	bl	8009c0c <__malloc_lock>
 8009716:	4a20      	ldr	r2, [pc, #128]	; (8009798 <_free_r+0x9c>)
 8009718:	9801      	ldr	r0, [sp, #4]
 800971a:	6813      	ldr	r3, [r2, #0]
 800971c:	4615      	mov	r5, r2
 800971e:	b933      	cbnz	r3, 800972e <_free_r+0x32>
 8009720:	6063      	str	r3, [r4, #4]
 8009722:	6014      	str	r4, [r2, #0]
 8009724:	b003      	add	sp, #12
 8009726:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800972a:	f000 ba75 	b.w	8009c18 <__malloc_unlock>
 800972e:	42a3      	cmp	r3, r4
 8009730:	d90b      	bls.n	800974a <_free_r+0x4e>
 8009732:	6821      	ldr	r1, [r4, #0]
 8009734:	1862      	adds	r2, r4, r1
 8009736:	4293      	cmp	r3, r2
 8009738:	bf04      	itt	eq
 800973a:	681a      	ldreq	r2, [r3, #0]
 800973c:	685b      	ldreq	r3, [r3, #4]
 800973e:	6063      	str	r3, [r4, #4]
 8009740:	bf04      	itt	eq
 8009742:	1852      	addeq	r2, r2, r1
 8009744:	6022      	streq	r2, [r4, #0]
 8009746:	602c      	str	r4, [r5, #0]
 8009748:	e7ec      	b.n	8009724 <_free_r+0x28>
 800974a:	461a      	mov	r2, r3
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	b10b      	cbz	r3, 8009754 <_free_r+0x58>
 8009750:	42a3      	cmp	r3, r4
 8009752:	d9fa      	bls.n	800974a <_free_r+0x4e>
 8009754:	6811      	ldr	r1, [r2, #0]
 8009756:	1855      	adds	r5, r2, r1
 8009758:	42a5      	cmp	r5, r4
 800975a:	d10b      	bne.n	8009774 <_free_r+0x78>
 800975c:	6824      	ldr	r4, [r4, #0]
 800975e:	4421      	add	r1, r4
 8009760:	1854      	adds	r4, r2, r1
 8009762:	42a3      	cmp	r3, r4
 8009764:	6011      	str	r1, [r2, #0]
 8009766:	d1dd      	bne.n	8009724 <_free_r+0x28>
 8009768:	681c      	ldr	r4, [r3, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	6053      	str	r3, [r2, #4]
 800976e:	4421      	add	r1, r4
 8009770:	6011      	str	r1, [r2, #0]
 8009772:	e7d7      	b.n	8009724 <_free_r+0x28>
 8009774:	d902      	bls.n	800977c <_free_r+0x80>
 8009776:	230c      	movs	r3, #12
 8009778:	6003      	str	r3, [r0, #0]
 800977a:	e7d3      	b.n	8009724 <_free_r+0x28>
 800977c:	6825      	ldr	r5, [r4, #0]
 800977e:	1961      	adds	r1, r4, r5
 8009780:	428b      	cmp	r3, r1
 8009782:	bf04      	itt	eq
 8009784:	6819      	ldreq	r1, [r3, #0]
 8009786:	685b      	ldreq	r3, [r3, #4]
 8009788:	6063      	str	r3, [r4, #4]
 800978a:	bf04      	itt	eq
 800978c:	1949      	addeq	r1, r1, r5
 800978e:	6021      	streq	r1, [r4, #0]
 8009790:	6054      	str	r4, [r2, #4]
 8009792:	e7c7      	b.n	8009724 <_free_r+0x28>
 8009794:	b003      	add	sp, #12
 8009796:	bd30      	pop	{r4, r5, pc}
 8009798:	20000224 	.word	0x20000224

0800979c <_malloc_r>:
 800979c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979e:	1ccd      	adds	r5, r1, #3
 80097a0:	f025 0503 	bic.w	r5, r5, #3
 80097a4:	3508      	adds	r5, #8
 80097a6:	2d0c      	cmp	r5, #12
 80097a8:	bf38      	it	cc
 80097aa:	250c      	movcc	r5, #12
 80097ac:	2d00      	cmp	r5, #0
 80097ae:	4606      	mov	r6, r0
 80097b0:	db01      	blt.n	80097b6 <_malloc_r+0x1a>
 80097b2:	42a9      	cmp	r1, r5
 80097b4:	d903      	bls.n	80097be <_malloc_r+0x22>
 80097b6:	230c      	movs	r3, #12
 80097b8:	6033      	str	r3, [r6, #0]
 80097ba:	2000      	movs	r0, #0
 80097bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097be:	f000 fa25 	bl	8009c0c <__malloc_lock>
 80097c2:	4921      	ldr	r1, [pc, #132]	; (8009848 <_malloc_r+0xac>)
 80097c4:	680a      	ldr	r2, [r1, #0]
 80097c6:	4614      	mov	r4, r2
 80097c8:	b99c      	cbnz	r4, 80097f2 <_malloc_r+0x56>
 80097ca:	4f20      	ldr	r7, [pc, #128]	; (800984c <_malloc_r+0xb0>)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	b923      	cbnz	r3, 80097da <_malloc_r+0x3e>
 80097d0:	4621      	mov	r1, r4
 80097d2:	4630      	mov	r0, r6
 80097d4:	f000 f9a0 	bl	8009b18 <_sbrk_r>
 80097d8:	6038      	str	r0, [r7, #0]
 80097da:	4629      	mov	r1, r5
 80097dc:	4630      	mov	r0, r6
 80097de:	f000 f99b 	bl	8009b18 <_sbrk_r>
 80097e2:	1c43      	adds	r3, r0, #1
 80097e4:	d123      	bne.n	800982e <_malloc_r+0x92>
 80097e6:	230c      	movs	r3, #12
 80097e8:	6033      	str	r3, [r6, #0]
 80097ea:	4630      	mov	r0, r6
 80097ec:	f000 fa14 	bl	8009c18 <__malloc_unlock>
 80097f0:	e7e3      	b.n	80097ba <_malloc_r+0x1e>
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	1b5b      	subs	r3, r3, r5
 80097f6:	d417      	bmi.n	8009828 <_malloc_r+0x8c>
 80097f8:	2b0b      	cmp	r3, #11
 80097fa:	d903      	bls.n	8009804 <_malloc_r+0x68>
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	441c      	add	r4, r3
 8009800:	6025      	str	r5, [r4, #0]
 8009802:	e004      	b.n	800980e <_malloc_r+0x72>
 8009804:	6863      	ldr	r3, [r4, #4]
 8009806:	42a2      	cmp	r2, r4
 8009808:	bf0c      	ite	eq
 800980a:	600b      	streq	r3, [r1, #0]
 800980c:	6053      	strne	r3, [r2, #4]
 800980e:	4630      	mov	r0, r6
 8009810:	f000 fa02 	bl	8009c18 <__malloc_unlock>
 8009814:	f104 000b 	add.w	r0, r4, #11
 8009818:	1d23      	adds	r3, r4, #4
 800981a:	f020 0007 	bic.w	r0, r0, #7
 800981e:	1ac2      	subs	r2, r0, r3
 8009820:	d0cc      	beq.n	80097bc <_malloc_r+0x20>
 8009822:	1a1b      	subs	r3, r3, r0
 8009824:	50a3      	str	r3, [r4, r2]
 8009826:	e7c9      	b.n	80097bc <_malloc_r+0x20>
 8009828:	4622      	mov	r2, r4
 800982a:	6864      	ldr	r4, [r4, #4]
 800982c:	e7cc      	b.n	80097c8 <_malloc_r+0x2c>
 800982e:	1cc4      	adds	r4, r0, #3
 8009830:	f024 0403 	bic.w	r4, r4, #3
 8009834:	42a0      	cmp	r0, r4
 8009836:	d0e3      	beq.n	8009800 <_malloc_r+0x64>
 8009838:	1a21      	subs	r1, r4, r0
 800983a:	4630      	mov	r0, r6
 800983c:	f000 f96c 	bl	8009b18 <_sbrk_r>
 8009840:	3001      	adds	r0, #1
 8009842:	d1dd      	bne.n	8009800 <_malloc_r+0x64>
 8009844:	e7cf      	b.n	80097e6 <_malloc_r+0x4a>
 8009846:	bf00      	nop
 8009848:	20000224 	.word	0x20000224
 800984c:	20000228 	.word	0x20000228

08009850 <__ssputs_r>:
 8009850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009854:	688e      	ldr	r6, [r1, #8]
 8009856:	429e      	cmp	r6, r3
 8009858:	4682      	mov	sl, r0
 800985a:	460c      	mov	r4, r1
 800985c:	4690      	mov	r8, r2
 800985e:	461f      	mov	r7, r3
 8009860:	d838      	bhi.n	80098d4 <__ssputs_r+0x84>
 8009862:	898a      	ldrh	r2, [r1, #12]
 8009864:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009868:	d032      	beq.n	80098d0 <__ssputs_r+0x80>
 800986a:	6825      	ldr	r5, [r4, #0]
 800986c:	6909      	ldr	r1, [r1, #16]
 800986e:	eba5 0901 	sub.w	r9, r5, r1
 8009872:	6965      	ldr	r5, [r4, #20]
 8009874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009878:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800987c:	3301      	adds	r3, #1
 800987e:	444b      	add	r3, r9
 8009880:	106d      	asrs	r5, r5, #1
 8009882:	429d      	cmp	r5, r3
 8009884:	bf38      	it	cc
 8009886:	461d      	movcc	r5, r3
 8009888:	0553      	lsls	r3, r2, #21
 800988a:	d531      	bpl.n	80098f0 <__ssputs_r+0xa0>
 800988c:	4629      	mov	r1, r5
 800988e:	f7ff ff85 	bl	800979c <_malloc_r>
 8009892:	4606      	mov	r6, r0
 8009894:	b950      	cbnz	r0, 80098ac <__ssputs_r+0x5c>
 8009896:	230c      	movs	r3, #12
 8009898:	f8ca 3000 	str.w	r3, [sl]
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098a2:	81a3      	strh	r3, [r4, #12]
 80098a4:	f04f 30ff 	mov.w	r0, #4294967295
 80098a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ac:	6921      	ldr	r1, [r4, #16]
 80098ae:	464a      	mov	r2, r9
 80098b0:	f7ff fa4a 	bl	8008d48 <memcpy>
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098be:	81a3      	strh	r3, [r4, #12]
 80098c0:	6126      	str	r6, [r4, #16]
 80098c2:	6165      	str	r5, [r4, #20]
 80098c4:	444e      	add	r6, r9
 80098c6:	eba5 0509 	sub.w	r5, r5, r9
 80098ca:	6026      	str	r6, [r4, #0]
 80098cc:	60a5      	str	r5, [r4, #8]
 80098ce:	463e      	mov	r6, r7
 80098d0:	42be      	cmp	r6, r7
 80098d2:	d900      	bls.n	80098d6 <__ssputs_r+0x86>
 80098d4:	463e      	mov	r6, r7
 80098d6:	4632      	mov	r2, r6
 80098d8:	6820      	ldr	r0, [r4, #0]
 80098da:	4641      	mov	r1, r8
 80098dc:	f000 f97c 	bl	8009bd8 <memmove>
 80098e0:	68a3      	ldr	r3, [r4, #8]
 80098e2:	6822      	ldr	r2, [r4, #0]
 80098e4:	1b9b      	subs	r3, r3, r6
 80098e6:	4432      	add	r2, r6
 80098e8:	60a3      	str	r3, [r4, #8]
 80098ea:	6022      	str	r2, [r4, #0]
 80098ec:	2000      	movs	r0, #0
 80098ee:	e7db      	b.n	80098a8 <__ssputs_r+0x58>
 80098f0:	462a      	mov	r2, r5
 80098f2:	f000 f997 	bl	8009c24 <_realloc_r>
 80098f6:	4606      	mov	r6, r0
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d1e1      	bne.n	80098c0 <__ssputs_r+0x70>
 80098fc:	6921      	ldr	r1, [r4, #16]
 80098fe:	4650      	mov	r0, sl
 8009900:	f7ff fefc 	bl	80096fc <_free_r>
 8009904:	e7c7      	b.n	8009896 <__ssputs_r+0x46>
	...

08009908 <_svfiprintf_r>:
 8009908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990c:	4698      	mov	r8, r3
 800990e:	898b      	ldrh	r3, [r1, #12]
 8009910:	061b      	lsls	r3, r3, #24
 8009912:	b09d      	sub	sp, #116	; 0x74
 8009914:	4607      	mov	r7, r0
 8009916:	460d      	mov	r5, r1
 8009918:	4614      	mov	r4, r2
 800991a:	d50e      	bpl.n	800993a <_svfiprintf_r+0x32>
 800991c:	690b      	ldr	r3, [r1, #16]
 800991e:	b963      	cbnz	r3, 800993a <_svfiprintf_r+0x32>
 8009920:	2140      	movs	r1, #64	; 0x40
 8009922:	f7ff ff3b 	bl	800979c <_malloc_r>
 8009926:	6028      	str	r0, [r5, #0]
 8009928:	6128      	str	r0, [r5, #16]
 800992a:	b920      	cbnz	r0, 8009936 <_svfiprintf_r+0x2e>
 800992c:	230c      	movs	r3, #12
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	f04f 30ff 	mov.w	r0, #4294967295
 8009934:	e0d1      	b.n	8009ada <_svfiprintf_r+0x1d2>
 8009936:	2340      	movs	r3, #64	; 0x40
 8009938:	616b      	str	r3, [r5, #20]
 800993a:	2300      	movs	r3, #0
 800993c:	9309      	str	r3, [sp, #36]	; 0x24
 800993e:	2320      	movs	r3, #32
 8009940:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009944:	f8cd 800c 	str.w	r8, [sp, #12]
 8009948:	2330      	movs	r3, #48	; 0x30
 800994a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009af4 <_svfiprintf_r+0x1ec>
 800994e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009952:	f04f 0901 	mov.w	r9, #1
 8009956:	4623      	mov	r3, r4
 8009958:	469a      	mov	sl, r3
 800995a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800995e:	b10a      	cbz	r2, 8009964 <_svfiprintf_r+0x5c>
 8009960:	2a25      	cmp	r2, #37	; 0x25
 8009962:	d1f9      	bne.n	8009958 <_svfiprintf_r+0x50>
 8009964:	ebba 0b04 	subs.w	fp, sl, r4
 8009968:	d00b      	beq.n	8009982 <_svfiprintf_r+0x7a>
 800996a:	465b      	mov	r3, fp
 800996c:	4622      	mov	r2, r4
 800996e:	4629      	mov	r1, r5
 8009970:	4638      	mov	r0, r7
 8009972:	f7ff ff6d 	bl	8009850 <__ssputs_r>
 8009976:	3001      	adds	r0, #1
 8009978:	f000 80aa 	beq.w	8009ad0 <_svfiprintf_r+0x1c8>
 800997c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800997e:	445a      	add	r2, fp
 8009980:	9209      	str	r2, [sp, #36]	; 0x24
 8009982:	f89a 3000 	ldrb.w	r3, [sl]
 8009986:	2b00      	cmp	r3, #0
 8009988:	f000 80a2 	beq.w	8009ad0 <_svfiprintf_r+0x1c8>
 800998c:	2300      	movs	r3, #0
 800998e:	f04f 32ff 	mov.w	r2, #4294967295
 8009992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009996:	f10a 0a01 	add.w	sl, sl, #1
 800999a:	9304      	str	r3, [sp, #16]
 800999c:	9307      	str	r3, [sp, #28]
 800999e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099a2:	931a      	str	r3, [sp, #104]	; 0x68
 80099a4:	4654      	mov	r4, sl
 80099a6:	2205      	movs	r2, #5
 80099a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ac:	4851      	ldr	r0, [pc, #324]	; (8009af4 <_svfiprintf_r+0x1ec>)
 80099ae:	f7f6 fc4f 	bl	8000250 <memchr>
 80099b2:	9a04      	ldr	r2, [sp, #16]
 80099b4:	b9d8      	cbnz	r0, 80099ee <_svfiprintf_r+0xe6>
 80099b6:	06d0      	lsls	r0, r2, #27
 80099b8:	bf44      	itt	mi
 80099ba:	2320      	movmi	r3, #32
 80099bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099c0:	0711      	lsls	r1, r2, #28
 80099c2:	bf44      	itt	mi
 80099c4:	232b      	movmi	r3, #43	; 0x2b
 80099c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099ca:	f89a 3000 	ldrb.w	r3, [sl]
 80099ce:	2b2a      	cmp	r3, #42	; 0x2a
 80099d0:	d015      	beq.n	80099fe <_svfiprintf_r+0xf6>
 80099d2:	9a07      	ldr	r2, [sp, #28]
 80099d4:	4654      	mov	r4, sl
 80099d6:	2000      	movs	r0, #0
 80099d8:	f04f 0c0a 	mov.w	ip, #10
 80099dc:	4621      	mov	r1, r4
 80099de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099e2:	3b30      	subs	r3, #48	; 0x30
 80099e4:	2b09      	cmp	r3, #9
 80099e6:	d94e      	bls.n	8009a86 <_svfiprintf_r+0x17e>
 80099e8:	b1b0      	cbz	r0, 8009a18 <_svfiprintf_r+0x110>
 80099ea:	9207      	str	r2, [sp, #28]
 80099ec:	e014      	b.n	8009a18 <_svfiprintf_r+0x110>
 80099ee:	eba0 0308 	sub.w	r3, r0, r8
 80099f2:	fa09 f303 	lsl.w	r3, r9, r3
 80099f6:	4313      	orrs	r3, r2
 80099f8:	9304      	str	r3, [sp, #16]
 80099fa:	46a2      	mov	sl, r4
 80099fc:	e7d2      	b.n	80099a4 <_svfiprintf_r+0x9c>
 80099fe:	9b03      	ldr	r3, [sp, #12]
 8009a00:	1d19      	adds	r1, r3, #4
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	9103      	str	r1, [sp, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	bfbb      	ittet	lt
 8009a0a:	425b      	neglt	r3, r3
 8009a0c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a10:	9307      	strge	r3, [sp, #28]
 8009a12:	9307      	strlt	r3, [sp, #28]
 8009a14:	bfb8      	it	lt
 8009a16:	9204      	strlt	r2, [sp, #16]
 8009a18:	7823      	ldrb	r3, [r4, #0]
 8009a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a1c:	d10c      	bne.n	8009a38 <_svfiprintf_r+0x130>
 8009a1e:	7863      	ldrb	r3, [r4, #1]
 8009a20:	2b2a      	cmp	r3, #42	; 0x2a
 8009a22:	d135      	bne.n	8009a90 <_svfiprintf_r+0x188>
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	1d1a      	adds	r2, r3, #4
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	9203      	str	r2, [sp, #12]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	bfb8      	it	lt
 8009a30:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a34:	3402      	adds	r4, #2
 8009a36:	9305      	str	r3, [sp, #20]
 8009a38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b04 <_svfiprintf_r+0x1fc>
 8009a3c:	7821      	ldrb	r1, [r4, #0]
 8009a3e:	2203      	movs	r2, #3
 8009a40:	4650      	mov	r0, sl
 8009a42:	f7f6 fc05 	bl	8000250 <memchr>
 8009a46:	b140      	cbz	r0, 8009a5a <_svfiprintf_r+0x152>
 8009a48:	2340      	movs	r3, #64	; 0x40
 8009a4a:	eba0 000a 	sub.w	r0, r0, sl
 8009a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8009a52:	9b04      	ldr	r3, [sp, #16]
 8009a54:	4303      	orrs	r3, r0
 8009a56:	3401      	adds	r4, #1
 8009a58:	9304      	str	r3, [sp, #16]
 8009a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a5e:	4826      	ldr	r0, [pc, #152]	; (8009af8 <_svfiprintf_r+0x1f0>)
 8009a60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a64:	2206      	movs	r2, #6
 8009a66:	f7f6 fbf3 	bl	8000250 <memchr>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	d038      	beq.n	8009ae0 <_svfiprintf_r+0x1d8>
 8009a6e:	4b23      	ldr	r3, [pc, #140]	; (8009afc <_svfiprintf_r+0x1f4>)
 8009a70:	bb1b      	cbnz	r3, 8009aba <_svfiprintf_r+0x1b2>
 8009a72:	9b03      	ldr	r3, [sp, #12]
 8009a74:	3307      	adds	r3, #7
 8009a76:	f023 0307 	bic.w	r3, r3, #7
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	9303      	str	r3, [sp, #12]
 8009a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a80:	4433      	add	r3, r6
 8009a82:	9309      	str	r3, [sp, #36]	; 0x24
 8009a84:	e767      	b.n	8009956 <_svfiprintf_r+0x4e>
 8009a86:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	2001      	movs	r0, #1
 8009a8e:	e7a5      	b.n	80099dc <_svfiprintf_r+0xd4>
 8009a90:	2300      	movs	r3, #0
 8009a92:	3401      	adds	r4, #1
 8009a94:	9305      	str	r3, [sp, #20]
 8009a96:	4619      	mov	r1, r3
 8009a98:	f04f 0c0a 	mov.w	ip, #10
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009aa2:	3a30      	subs	r2, #48	; 0x30
 8009aa4:	2a09      	cmp	r2, #9
 8009aa6:	d903      	bls.n	8009ab0 <_svfiprintf_r+0x1a8>
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d0c5      	beq.n	8009a38 <_svfiprintf_r+0x130>
 8009aac:	9105      	str	r1, [sp, #20]
 8009aae:	e7c3      	b.n	8009a38 <_svfiprintf_r+0x130>
 8009ab0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e7f0      	b.n	8009a9c <_svfiprintf_r+0x194>
 8009aba:	ab03      	add	r3, sp, #12
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	462a      	mov	r2, r5
 8009ac0:	4b0f      	ldr	r3, [pc, #60]	; (8009b00 <_svfiprintf_r+0x1f8>)
 8009ac2:	a904      	add	r1, sp, #16
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	f7fc fb47 	bl	8006158 <_printf_float>
 8009aca:	1c42      	adds	r2, r0, #1
 8009acc:	4606      	mov	r6, r0
 8009ace:	d1d6      	bne.n	8009a7e <_svfiprintf_r+0x176>
 8009ad0:	89ab      	ldrh	r3, [r5, #12]
 8009ad2:	065b      	lsls	r3, r3, #25
 8009ad4:	f53f af2c 	bmi.w	8009930 <_svfiprintf_r+0x28>
 8009ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ada:	b01d      	add	sp, #116	; 0x74
 8009adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae0:	ab03      	add	r3, sp, #12
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	462a      	mov	r2, r5
 8009ae6:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <_svfiprintf_r+0x1f8>)
 8009ae8:	a904      	add	r1, sp, #16
 8009aea:	4638      	mov	r0, r7
 8009aec:	f7fc fdc0 	bl	8006670 <_printf_i>
 8009af0:	e7eb      	b.n	8009aca <_svfiprintf_r+0x1c2>
 8009af2:	bf00      	nop
 8009af4:	0800ab1c 	.word	0x0800ab1c
 8009af8:	0800ab26 	.word	0x0800ab26
 8009afc:	08006159 	.word	0x08006159
 8009b00:	08009851 	.word	0x08009851
 8009b04:	0800ab22 	.word	0x0800ab22

08009b08 <nan>:
 8009b08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009b10 <nan+0x8>
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	00000000 	.word	0x00000000
 8009b14:	7ff80000 	.word	0x7ff80000

08009b18 <_sbrk_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	4d06      	ldr	r5, [pc, #24]	; (8009b34 <_sbrk_r+0x1c>)
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4604      	mov	r4, r0
 8009b20:	4608      	mov	r0, r1
 8009b22:	602b      	str	r3, [r5, #0]
 8009b24:	f7f7 fef4 	bl	8001910 <_sbrk>
 8009b28:	1c43      	adds	r3, r0, #1
 8009b2a:	d102      	bne.n	8009b32 <_sbrk_r+0x1a>
 8009b2c:	682b      	ldr	r3, [r5, #0]
 8009b2e:	b103      	cbz	r3, 8009b32 <_sbrk_r+0x1a>
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	bd38      	pop	{r3, r4, r5, pc}
 8009b34:	20000b9c 	.word	0x20000b9c

08009b38 <strncmp>:
 8009b38:	b510      	push	{r4, lr}
 8009b3a:	b16a      	cbz	r2, 8009b58 <strncmp+0x20>
 8009b3c:	3901      	subs	r1, #1
 8009b3e:	1884      	adds	r4, r0, r2
 8009b40:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009b44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d103      	bne.n	8009b54 <strncmp+0x1c>
 8009b4c:	42a0      	cmp	r0, r4
 8009b4e:	d001      	beq.n	8009b54 <strncmp+0x1c>
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1f5      	bne.n	8009b40 <strncmp+0x8>
 8009b54:	1a98      	subs	r0, r3, r2
 8009b56:	bd10      	pop	{r4, pc}
 8009b58:	4610      	mov	r0, r2
 8009b5a:	e7fc      	b.n	8009b56 <strncmp+0x1e>

08009b5c <__ascii_wctomb>:
 8009b5c:	b149      	cbz	r1, 8009b72 <__ascii_wctomb+0x16>
 8009b5e:	2aff      	cmp	r2, #255	; 0xff
 8009b60:	bf85      	ittet	hi
 8009b62:	238a      	movhi	r3, #138	; 0x8a
 8009b64:	6003      	strhi	r3, [r0, #0]
 8009b66:	700a      	strbls	r2, [r1, #0]
 8009b68:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b6c:	bf98      	it	ls
 8009b6e:	2001      	movls	r0, #1
 8009b70:	4770      	bx	lr
 8009b72:	4608      	mov	r0, r1
 8009b74:	4770      	bx	lr
	...

08009b78 <__assert_func>:
 8009b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b7a:	4614      	mov	r4, r2
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	4b09      	ldr	r3, [pc, #36]	; (8009ba4 <__assert_func+0x2c>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4605      	mov	r5, r0
 8009b84:	68d8      	ldr	r0, [r3, #12]
 8009b86:	b14c      	cbz	r4, 8009b9c <__assert_func+0x24>
 8009b88:	4b07      	ldr	r3, [pc, #28]	; (8009ba8 <__assert_func+0x30>)
 8009b8a:	9100      	str	r1, [sp, #0]
 8009b8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b90:	4906      	ldr	r1, [pc, #24]	; (8009bac <__assert_func+0x34>)
 8009b92:	462b      	mov	r3, r5
 8009b94:	f000 f80e 	bl	8009bb4 <fiprintf>
 8009b98:	f000 fa84 	bl	800a0a4 <abort>
 8009b9c:	4b04      	ldr	r3, [pc, #16]	; (8009bb0 <__assert_func+0x38>)
 8009b9e:	461c      	mov	r4, r3
 8009ba0:	e7f3      	b.n	8009b8a <__assert_func+0x12>
 8009ba2:	bf00      	nop
 8009ba4:	2000001c 	.word	0x2000001c
 8009ba8:	0800ab2d 	.word	0x0800ab2d
 8009bac:	0800ab3a 	.word	0x0800ab3a
 8009bb0:	0800ab68 	.word	0x0800ab68

08009bb4 <fiprintf>:
 8009bb4:	b40e      	push	{r1, r2, r3}
 8009bb6:	b503      	push	{r0, r1, lr}
 8009bb8:	4601      	mov	r1, r0
 8009bba:	ab03      	add	r3, sp, #12
 8009bbc:	4805      	ldr	r0, [pc, #20]	; (8009bd4 <fiprintf+0x20>)
 8009bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bc2:	6800      	ldr	r0, [r0, #0]
 8009bc4:	9301      	str	r3, [sp, #4]
 8009bc6:	f000 f87d 	bl	8009cc4 <_vfiprintf_r>
 8009bca:	b002      	add	sp, #8
 8009bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bd0:	b003      	add	sp, #12
 8009bd2:	4770      	bx	lr
 8009bd4:	2000001c 	.word	0x2000001c

08009bd8 <memmove>:
 8009bd8:	4288      	cmp	r0, r1
 8009bda:	b510      	push	{r4, lr}
 8009bdc:	eb01 0402 	add.w	r4, r1, r2
 8009be0:	d902      	bls.n	8009be8 <memmove+0x10>
 8009be2:	4284      	cmp	r4, r0
 8009be4:	4623      	mov	r3, r4
 8009be6:	d807      	bhi.n	8009bf8 <memmove+0x20>
 8009be8:	1e43      	subs	r3, r0, #1
 8009bea:	42a1      	cmp	r1, r4
 8009bec:	d008      	beq.n	8009c00 <memmove+0x28>
 8009bee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bf6:	e7f8      	b.n	8009bea <memmove+0x12>
 8009bf8:	4402      	add	r2, r0
 8009bfa:	4601      	mov	r1, r0
 8009bfc:	428a      	cmp	r2, r1
 8009bfe:	d100      	bne.n	8009c02 <memmove+0x2a>
 8009c00:	bd10      	pop	{r4, pc}
 8009c02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c0a:	e7f7      	b.n	8009bfc <memmove+0x24>

08009c0c <__malloc_lock>:
 8009c0c:	4801      	ldr	r0, [pc, #4]	; (8009c14 <__malloc_lock+0x8>)
 8009c0e:	f000 bc09 	b.w	800a424 <__retarget_lock_acquire_recursive>
 8009c12:	bf00      	nop
 8009c14:	20000ba4 	.word	0x20000ba4

08009c18 <__malloc_unlock>:
 8009c18:	4801      	ldr	r0, [pc, #4]	; (8009c20 <__malloc_unlock+0x8>)
 8009c1a:	f000 bc04 	b.w	800a426 <__retarget_lock_release_recursive>
 8009c1e:	bf00      	nop
 8009c20:	20000ba4 	.word	0x20000ba4

08009c24 <_realloc_r>:
 8009c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c26:	4607      	mov	r7, r0
 8009c28:	4614      	mov	r4, r2
 8009c2a:	460e      	mov	r6, r1
 8009c2c:	b921      	cbnz	r1, 8009c38 <_realloc_r+0x14>
 8009c2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009c32:	4611      	mov	r1, r2
 8009c34:	f7ff bdb2 	b.w	800979c <_malloc_r>
 8009c38:	b922      	cbnz	r2, 8009c44 <_realloc_r+0x20>
 8009c3a:	f7ff fd5f 	bl	80096fc <_free_r>
 8009c3e:	4625      	mov	r5, r4
 8009c40:	4628      	mov	r0, r5
 8009c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c44:	f000 fc54 	bl	800a4f0 <_malloc_usable_size_r>
 8009c48:	42a0      	cmp	r0, r4
 8009c4a:	d20f      	bcs.n	8009c6c <_realloc_r+0x48>
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	4638      	mov	r0, r7
 8009c50:	f7ff fda4 	bl	800979c <_malloc_r>
 8009c54:	4605      	mov	r5, r0
 8009c56:	2800      	cmp	r0, #0
 8009c58:	d0f2      	beq.n	8009c40 <_realloc_r+0x1c>
 8009c5a:	4631      	mov	r1, r6
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	f7ff f873 	bl	8008d48 <memcpy>
 8009c62:	4631      	mov	r1, r6
 8009c64:	4638      	mov	r0, r7
 8009c66:	f7ff fd49 	bl	80096fc <_free_r>
 8009c6a:	e7e9      	b.n	8009c40 <_realloc_r+0x1c>
 8009c6c:	4635      	mov	r5, r6
 8009c6e:	e7e7      	b.n	8009c40 <_realloc_r+0x1c>

08009c70 <__sfputc_r>:
 8009c70:	6893      	ldr	r3, [r2, #8]
 8009c72:	3b01      	subs	r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	b410      	push	{r4}
 8009c78:	6093      	str	r3, [r2, #8]
 8009c7a:	da08      	bge.n	8009c8e <__sfputc_r+0x1e>
 8009c7c:	6994      	ldr	r4, [r2, #24]
 8009c7e:	42a3      	cmp	r3, r4
 8009c80:	db01      	blt.n	8009c86 <__sfputc_r+0x16>
 8009c82:	290a      	cmp	r1, #10
 8009c84:	d103      	bne.n	8009c8e <__sfputc_r+0x1e>
 8009c86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c8a:	f000 b94b 	b.w	8009f24 <__swbuf_r>
 8009c8e:	6813      	ldr	r3, [r2, #0]
 8009c90:	1c58      	adds	r0, r3, #1
 8009c92:	6010      	str	r0, [r2, #0]
 8009c94:	7019      	strb	r1, [r3, #0]
 8009c96:	4608      	mov	r0, r1
 8009c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <__sfputs_r>:
 8009c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca0:	4606      	mov	r6, r0
 8009ca2:	460f      	mov	r7, r1
 8009ca4:	4614      	mov	r4, r2
 8009ca6:	18d5      	adds	r5, r2, r3
 8009ca8:	42ac      	cmp	r4, r5
 8009caa:	d101      	bne.n	8009cb0 <__sfputs_r+0x12>
 8009cac:	2000      	movs	r0, #0
 8009cae:	e007      	b.n	8009cc0 <__sfputs_r+0x22>
 8009cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb4:	463a      	mov	r2, r7
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	f7ff ffda 	bl	8009c70 <__sfputc_r>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d1f3      	bne.n	8009ca8 <__sfputs_r+0xa>
 8009cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cc4 <_vfiprintf_r>:
 8009cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc8:	460d      	mov	r5, r1
 8009cca:	b09d      	sub	sp, #116	; 0x74
 8009ccc:	4614      	mov	r4, r2
 8009cce:	4698      	mov	r8, r3
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	b118      	cbz	r0, 8009cdc <_vfiprintf_r+0x18>
 8009cd4:	6983      	ldr	r3, [r0, #24]
 8009cd6:	b90b      	cbnz	r3, 8009cdc <_vfiprintf_r+0x18>
 8009cd8:	f000 fb06 	bl	800a2e8 <__sinit>
 8009cdc:	4b89      	ldr	r3, [pc, #548]	; (8009f04 <_vfiprintf_r+0x240>)
 8009cde:	429d      	cmp	r5, r3
 8009ce0:	d11b      	bne.n	8009d1a <_vfiprintf_r+0x56>
 8009ce2:	6875      	ldr	r5, [r6, #4]
 8009ce4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ce6:	07d9      	lsls	r1, r3, #31
 8009ce8:	d405      	bmi.n	8009cf6 <_vfiprintf_r+0x32>
 8009cea:	89ab      	ldrh	r3, [r5, #12]
 8009cec:	059a      	lsls	r2, r3, #22
 8009cee:	d402      	bmi.n	8009cf6 <_vfiprintf_r+0x32>
 8009cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cf2:	f000 fb97 	bl	800a424 <__retarget_lock_acquire_recursive>
 8009cf6:	89ab      	ldrh	r3, [r5, #12]
 8009cf8:	071b      	lsls	r3, r3, #28
 8009cfa:	d501      	bpl.n	8009d00 <_vfiprintf_r+0x3c>
 8009cfc:	692b      	ldr	r3, [r5, #16]
 8009cfe:	b9eb      	cbnz	r3, 8009d3c <_vfiprintf_r+0x78>
 8009d00:	4629      	mov	r1, r5
 8009d02:	4630      	mov	r0, r6
 8009d04:	f000 f960 	bl	8009fc8 <__swsetup_r>
 8009d08:	b1c0      	cbz	r0, 8009d3c <_vfiprintf_r+0x78>
 8009d0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d0c:	07dc      	lsls	r4, r3, #31
 8009d0e:	d50e      	bpl.n	8009d2e <_vfiprintf_r+0x6a>
 8009d10:	f04f 30ff 	mov.w	r0, #4294967295
 8009d14:	b01d      	add	sp, #116	; 0x74
 8009d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1a:	4b7b      	ldr	r3, [pc, #492]	; (8009f08 <_vfiprintf_r+0x244>)
 8009d1c:	429d      	cmp	r5, r3
 8009d1e:	d101      	bne.n	8009d24 <_vfiprintf_r+0x60>
 8009d20:	68b5      	ldr	r5, [r6, #8]
 8009d22:	e7df      	b.n	8009ce4 <_vfiprintf_r+0x20>
 8009d24:	4b79      	ldr	r3, [pc, #484]	; (8009f0c <_vfiprintf_r+0x248>)
 8009d26:	429d      	cmp	r5, r3
 8009d28:	bf08      	it	eq
 8009d2a:	68f5      	ldreq	r5, [r6, #12]
 8009d2c:	e7da      	b.n	8009ce4 <_vfiprintf_r+0x20>
 8009d2e:	89ab      	ldrh	r3, [r5, #12]
 8009d30:	0598      	lsls	r0, r3, #22
 8009d32:	d4ed      	bmi.n	8009d10 <_vfiprintf_r+0x4c>
 8009d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d36:	f000 fb76 	bl	800a426 <__retarget_lock_release_recursive>
 8009d3a:	e7e9      	b.n	8009d10 <_vfiprintf_r+0x4c>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d40:	2320      	movs	r3, #32
 8009d42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d46:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d4a:	2330      	movs	r3, #48	; 0x30
 8009d4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f10 <_vfiprintf_r+0x24c>
 8009d50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d54:	f04f 0901 	mov.w	r9, #1
 8009d58:	4623      	mov	r3, r4
 8009d5a:	469a      	mov	sl, r3
 8009d5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d60:	b10a      	cbz	r2, 8009d66 <_vfiprintf_r+0xa2>
 8009d62:	2a25      	cmp	r2, #37	; 0x25
 8009d64:	d1f9      	bne.n	8009d5a <_vfiprintf_r+0x96>
 8009d66:	ebba 0b04 	subs.w	fp, sl, r4
 8009d6a:	d00b      	beq.n	8009d84 <_vfiprintf_r+0xc0>
 8009d6c:	465b      	mov	r3, fp
 8009d6e:	4622      	mov	r2, r4
 8009d70:	4629      	mov	r1, r5
 8009d72:	4630      	mov	r0, r6
 8009d74:	f7ff ff93 	bl	8009c9e <__sfputs_r>
 8009d78:	3001      	adds	r0, #1
 8009d7a:	f000 80aa 	beq.w	8009ed2 <_vfiprintf_r+0x20e>
 8009d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d80:	445a      	add	r2, fp
 8009d82:	9209      	str	r2, [sp, #36]	; 0x24
 8009d84:	f89a 3000 	ldrb.w	r3, [sl]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 80a2 	beq.w	8009ed2 <_vfiprintf_r+0x20e>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f04f 32ff 	mov.w	r2, #4294967295
 8009d94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d98:	f10a 0a01 	add.w	sl, sl, #1
 8009d9c:	9304      	str	r3, [sp, #16]
 8009d9e:	9307      	str	r3, [sp, #28]
 8009da0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009da4:	931a      	str	r3, [sp, #104]	; 0x68
 8009da6:	4654      	mov	r4, sl
 8009da8:	2205      	movs	r2, #5
 8009daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dae:	4858      	ldr	r0, [pc, #352]	; (8009f10 <_vfiprintf_r+0x24c>)
 8009db0:	f7f6 fa4e 	bl	8000250 <memchr>
 8009db4:	9a04      	ldr	r2, [sp, #16]
 8009db6:	b9d8      	cbnz	r0, 8009df0 <_vfiprintf_r+0x12c>
 8009db8:	06d1      	lsls	r1, r2, #27
 8009dba:	bf44      	itt	mi
 8009dbc:	2320      	movmi	r3, #32
 8009dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dc2:	0713      	lsls	r3, r2, #28
 8009dc4:	bf44      	itt	mi
 8009dc6:	232b      	movmi	r3, #43	; 0x2b
 8009dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8009dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8009dd2:	d015      	beq.n	8009e00 <_vfiprintf_r+0x13c>
 8009dd4:	9a07      	ldr	r2, [sp, #28]
 8009dd6:	4654      	mov	r4, sl
 8009dd8:	2000      	movs	r0, #0
 8009dda:	f04f 0c0a 	mov.w	ip, #10
 8009dde:	4621      	mov	r1, r4
 8009de0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009de4:	3b30      	subs	r3, #48	; 0x30
 8009de6:	2b09      	cmp	r3, #9
 8009de8:	d94e      	bls.n	8009e88 <_vfiprintf_r+0x1c4>
 8009dea:	b1b0      	cbz	r0, 8009e1a <_vfiprintf_r+0x156>
 8009dec:	9207      	str	r2, [sp, #28]
 8009dee:	e014      	b.n	8009e1a <_vfiprintf_r+0x156>
 8009df0:	eba0 0308 	sub.w	r3, r0, r8
 8009df4:	fa09 f303 	lsl.w	r3, r9, r3
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	9304      	str	r3, [sp, #16]
 8009dfc:	46a2      	mov	sl, r4
 8009dfe:	e7d2      	b.n	8009da6 <_vfiprintf_r+0xe2>
 8009e00:	9b03      	ldr	r3, [sp, #12]
 8009e02:	1d19      	adds	r1, r3, #4
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	9103      	str	r1, [sp, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	bfbb      	ittet	lt
 8009e0c:	425b      	neglt	r3, r3
 8009e0e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e12:	9307      	strge	r3, [sp, #28]
 8009e14:	9307      	strlt	r3, [sp, #28]
 8009e16:	bfb8      	it	lt
 8009e18:	9204      	strlt	r2, [sp, #16]
 8009e1a:	7823      	ldrb	r3, [r4, #0]
 8009e1c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e1e:	d10c      	bne.n	8009e3a <_vfiprintf_r+0x176>
 8009e20:	7863      	ldrb	r3, [r4, #1]
 8009e22:	2b2a      	cmp	r3, #42	; 0x2a
 8009e24:	d135      	bne.n	8009e92 <_vfiprintf_r+0x1ce>
 8009e26:	9b03      	ldr	r3, [sp, #12]
 8009e28:	1d1a      	adds	r2, r3, #4
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	9203      	str	r2, [sp, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	bfb8      	it	lt
 8009e32:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e36:	3402      	adds	r4, #2
 8009e38:	9305      	str	r3, [sp, #20]
 8009e3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f20 <_vfiprintf_r+0x25c>
 8009e3e:	7821      	ldrb	r1, [r4, #0]
 8009e40:	2203      	movs	r2, #3
 8009e42:	4650      	mov	r0, sl
 8009e44:	f7f6 fa04 	bl	8000250 <memchr>
 8009e48:	b140      	cbz	r0, 8009e5c <_vfiprintf_r+0x198>
 8009e4a:	2340      	movs	r3, #64	; 0x40
 8009e4c:	eba0 000a 	sub.w	r0, r0, sl
 8009e50:	fa03 f000 	lsl.w	r0, r3, r0
 8009e54:	9b04      	ldr	r3, [sp, #16]
 8009e56:	4303      	orrs	r3, r0
 8009e58:	3401      	adds	r4, #1
 8009e5a:	9304      	str	r3, [sp, #16]
 8009e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e60:	482c      	ldr	r0, [pc, #176]	; (8009f14 <_vfiprintf_r+0x250>)
 8009e62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e66:	2206      	movs	r2, #6
 8009e68:	f7f6 f9f2 	bl	8000250 <memchr>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d03f      	beq.n	8009ef0 <_vfiprintf_r+0x22c>
 8009e70:	4b29      	ldr	r3, [pc, #164]	; (8009f18 <_vfiprintf_r+0x254>)
 8009e72:	bb1b      	cbnz	r3, 8009ebc <_vfiprintf_r+0x1f8>
 8009e74:	9b03      	ldr	r3, [sp, #12]
 8009e76:	3307      	adds	r3, #7
 8009e78:	f023 0307 	bic.w	r3, r3, #7
 8009e7c:	3308      	adds	r3, #8
 8009e7e:	9303      	str	r3, [sp, #12]
 8009e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e82:	443b      	add	r3, r7
 8009e84:	9309      	str	r3, [sp, #36]	; 0x24
 8009e86:	e767      	b.n	8009d58 <_vfiprintf_r+0x94>
 8009e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e8c:	460c      	mov	r4, r1
 8009e8e:	2001      	movs	r0, #1
 8009e90:	e7a5      	b.n	8009dde <_vfiprintf_r+0x11a>
 8009e92:	2300      	movs	r3, #0
 8009e94:	3401      	adds	r4, #1
 8009e96:	9305      	str	r3, [sp, #20]
 8009e98:	4619      	mov	r1, r3
 8009e9a:	f04f 0c0a 	mov.w	ip, #10
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ea4:	3a30      	subs	r2, #48	; 0x30
 8009ea6:	2a09      	cmp	r2, #9
 8009ea8:	d903      	bls.n	8009eb2 <_vfiprintf_r+0x1ee>
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d0c5      	beq.n	8009e3a <_vfiprintf_r+0x176>
 8009eae:	9105      	str	r1, [sp, #20]
 8009eb0:	e7c3      	b.n	8009e3a <_vfiprintf_r+0x176>
 8009eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e7f0      	b.n	8009e9e <_vfiprintf_r+0x1da>
 8009ebc:	ab03      	add	r3, sp, #12
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	462a      	mov	r2, r5
 8009ec2:	4b16      	ldr	r3, [pc, #88]	; (8009f1c <_vfiprintf_r+0x258>)
 8009ec4:	a904      	add	r1, sp, #16
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	f7fc f946 	bl	8006158 <_printf_float>
 8009ecc:	4607      	mov	r7, r0
 8009ece:	1c78      	adds	r0, r7, #1
 8009ed0:	d1d6      	bne.n	8009e80 <_vfiprintf_r+0x1bc>
 8009ed2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ed4:	07d9      	lsls	r1, r3, #31
 8009ed6:	d405      	bmi.n	8009ee4 <_vfiprintf_r+0x220>
 8009ed8:	89ab      	ldrh	r3, [r5, #12]
 8009eda:	059a      	lsls	r2, r3, #22
 8009edc:	d402      	bmi.n	8009ee4 <_vfiprintf_r+0x220>
 8009ede:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ee0:	f000 faa1 	bl	800a426 <__retarget_lock_release_recursive>
 8009ee4:	89ab      	ldrh	r3, [r5, #12]
 8009ee6:	065b      	lsls	r3, r3, #25
 8009ee8:	f53f af12 	bmi.w	8009d10 <_vfiprintf_r+0x4c>
 8009eec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eee:	e711      	b.n	8009d14 <_vfiprintf_r+0x50>
 8009ef0:	ab03      	add	r3, sp, #12
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	462a      	mov	r2, r5
 8009ef6:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <_vfiprintf_r+0x258>)
 8009ef8:	a904      	add	r1, sp, #16
 8009efa:	4630      	mov	r0, r6
 8009efc:	f7fc fbb8 	bl	8006670 <_printf_i>
 8009f00:	e7e4      	b.n	8009ecc <_vfiprintf_r+0x208>
 8009f02:	bf00      	nop
 8009f04:	0800ab8c 	.word	0x0800ab8c
 8009f08:	0800abac 	.word	0x0800abac
 8009f0c:	0800ab6c 	.word	0x0800ab6c
 8009f10:	0800ab1c 	.word	0x0800ab1c
 8009f14:	0800ab26 	.word	0x0800ab26
 8009f18:	08006159 	.word	0x08006159
 8009f1c:	08009c9f 	.word	0x08009c9f
 8009f20:	0800ab22 	.word	0x0800ab22

08009f24 <__swbuf_r>:
 8009f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f26:	460e      	mov	r6, r1
 8009f28:	4614      	mov	r4, r2
 8009f2a:	4605      	mov	r5, r0
 8009f2c:	b118      	cbz	r0, 8009f36 <__swbuf_r+0x12>
 8009f2e:	6983      	ldr	r3, [r0, #24]
 8009f30:	b90b      	cbnz	r3, 8009f36 <__swbuf_r+0x12>
 8009f32:	f000 f9d9 	bl	800a2e8 <__sinit>
 8009f36:	4b21      	ldr	r3, [pc, #132]	; (8009fbc <__swbuf_r+0x98>)
 8009f38:	429c      	cmp	r4, r3
 8009f3a:	d12b      	bne.n	8009f94 <__swbuf_r+0x70>
 8009f3c:	686c      	ldr	r4, [r5, #4]
 8009f3e:	69a3      	ldr	r3, [r4, #24]
 8009f40:	60a3      	str	r3, [r4, #8]
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	071a      	lsls	r2, r3, #28
 8009f46:	d52f      	bpl.n	8009fa8 <__swbuf_r+0x84>
 8009f48:	6923      	ldr	r3, [r4, #16]
 8009f4a:	b36b      	cbz	r3, 8009fa8 <__swbuf_r+0x84>
 8009f4c:	6923      	ldr	r3, [r4, #16]
 8009f4e:	6820      	ldr	r0, [r4, #0]
 8009f50:	1ac0      	subs	r0, r0, r3
 8009f52:	6963      	ldr	r3, [r4, #20]
 8009f54:	b2f6      	uxtb	r6, r6
 8009f56:	4283      	cmp	r3, r0
 8009f58:	4637      	mov	r7, r6
 8009f5a:	dc04      	bgt.n	8009f66 <__swbuf_r+0x42>
 8009f5c:	4621      	mov	r1, r4
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f000 f92e 	bl	800a1c0 <_fflush_r>
 8009f64:	bb30      	cbnz	r0, 8009fb4 <__swbuf_r+0x90>
 8009f66:	68a3      	ldr	r3, [r4, #8]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	60a3      	str	r3, [r4, #8]
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	6022      	str	r2, [r4, #0]
 8009f72:	701e      	strb	r6, [r3, #0]
 8009f74:	6963      	ldr	r3, [r4, #20]
 8009f76:	3001      	adds	r0, #1
 8009f78:	4283      	cmp	r3, r0
 8009f7a:	d004      	beq.n	8009f86 <__swbuf_r+0x62>
 8009f7c:	89a3      	ldrh	r3, [r4, #12]
 8009f7e:	07db      	lsls	r3, r3, #31
 8009f80:	d506      	bpl.n	8009f90 <__swbuf_r+0x6c>
 8009f82:	2e0a      	cmp	r6, #10
 8009f84:	d104      	bne.n	8009f90 <__swbuf_r+0x6c>
 8009f86:	4621      	mov	r1, r4
 8009f88:	4628      	mov	r0, r5
 8009f8a:	f000 f919 	bl	800a1c0 <_fflush_r>
 8009f8e:	b988      	cbnz	r0, 8009fb4 <__swbuf_r+0x90>
 8009f90:	4638      	mov	r0, r7
 8009f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f94:	4b0a      	ldr	r3, [pc, #40]	; (8009fc0 <__swbuf_r+0x9c>)
 8009f96:	429c      	cmp	r4, r3
 8009f98:	d101      	bne.n	8009f9e <__swbuf_r+0x7a>
 8009f9a:	68ac      	ldr	r4, [r5, #8]
 8009f9c:	e7cf      	b.n	8009f3e <__swbuf_r+0x1a>
 8009f9e:	4b09      	ldr	r3, [pc, #36]	; (8009fc4 <__swbuf_r+0xa0>)
 8009fa0:	429c      	cmp	r4, r3
 8009fa2:	bf08      	it	eq
 8009fa4:	68ec      	ldreq	r4, [r5, #12]
 8009fa6:	e7ca      	b.n	8009f3e <__swbuf_r+0x1a>
 8009fa8:	4621      	mov	r1, r4
 8009faa:	4628      	mov	r0, r5
 8009fac:	f000 f80c 	bl	8009fc8 <__swsetup_r>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d0cb      	beq.n	8009f4c <__swbuf_r+0x28>
 8009fb4:	f04f 37ff 	mov.w	r7, #4294967295
 8009fb8:	e7ea      	b.n	8009f90 <__swbuf_r+0x6c>
 8009fba:	bf00      	nop
 8009fbc:	0800ab8c 	.word	0x0800ab8c
 8009fc0:	0800abac 	.word	0x0800abac
 8009fc4:	0800ab6c 	.word	0x0800ab6c

08009fc8 <__swsetup_r>:
 8009fc8:	4b32      	ldr	r3, [pc, #200]	; (800a094 <__swsetup_r+0xcc>)
 8009fca:	b570      	push	{r4, r5, r6, lr}
 8009fcc:	681d      	ldr	r5, [r3, #0]
 8009fce:	4606      	mov	r6, r0
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	b125      	cbz	r5, 8009fde <__swsetup_r+0x16>
 8009fd4:	69ab      	ldr	r3, [r5, #24]
 8009fd6:	b913      	cbnz	r3, 8009fde <__swsetup_r+0x16>
 8009fd8:	4628      	mov	r0, r5
 8009fda:	f000 f985 	bl	800a2e8 <__sinit>
 8009fde:	4b2e      	ldr	r3, [pc, #184]	; (800a098 <__swsetup_r+0xd0>)
 8009fe0:	429c      	cmp	r4, r3
 8009fe2:	d10f      	bne.n	800a004 <__swsetup_r+0x3c>
 8009fe4:	686c      	ldr	r4, [r5, #4]
 8009fe6:	89a3      	ldrh	r3, [r4, #12]
 8009fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fec:	0719      	lsls	r1, r3, #28
 8009fee:	d42c      	bmi.n	800a04a <__swsetup_r+0x82>
 8009ff0:	06dd      	lsls	r5, r3, #27
 8009ff2:	d411      	bmi.n	800a018 <__swsetup_r+0x50>
 8009ff4:	2309      	movs	r3, #9
 8009ff6:	6033      	str	r3, [r6, #0]
 8009ff8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ffc:	81a3      	strh	r3, [r4, #12]
 8009ffe:	f04f 30ff 	mov.w	r0, #4294967295
 800a002:	e03e      	b.n	800a082 <__swsetup_r+0xba>
 800a004:	4b25      	ldr	r3, [pc, #148]	; (800a09c <__swsetup_r+0xd4>)
 800a006:	429c      	cmp	r4, r3
 800a008:	d101      	bne.n	800a00e <__swsetup_r+0x46>
 800a00a:	68ac      	ldr	r4, [r5, #8]
 800a00c:	e7eb      	b.n	8009fe6 <__swsetup_r+0x1e>
 800a00e:	4b24      	ldr	r3, [pc, #144]	; (800a0a0 <__swsetup_r+0xd8>)
 800a010:	429c      	cmp	r4, r3
 800a012:	bf08      	it	eq
 800a014:	68ec      	ldreq	r4, [r5, #12]
 800a016:	e7e6      	b.n	8009fe6 <__swsetup_r+0x1e>
 800a018:	0758      	lsls	r0, r3, #29
 800a01a:	d512      	bpl.n	800a042 <__swsetup_r+0x7a>
 800a01c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a01e:	b141      	cbz	r1, 800a032 <__swsetup_r+0x6a>
 800a020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a024:	4299      	cmp	r1, r3
 800a026:	d002      	beq.n	800a02e <__swsetup_r+0x66>
 800a028:	4630      	mov	r0, r6
 800a02a:	f7ff fb67 	bl	80096fc <_free_r>
 800a02e:	2300      	movs	r3, #0
 800a030:	6363      	str	r3, [r4, #52]	; 0x34
 800a032:	89a3      	ldrh	r3, [r4, #12]
 800a034:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a038:	81a3      	strh	r3, [r4, #12]
 800a03a:	2300      	movs	r3, #0
 800a03c:	6063      	str	r3, [r4, #4]
 800a03e:	6923      	ldr	r3, [r4, #16]
 800a040:	6023      	str	r3, [r4, #0]
 800a042:	89a3      	ldrh	r3, [r4, #12]
 800a044:	f043 0308 	orr.w	r3, r3, #8
 800a048:	81a3      	strh	r3, [r4, #12]
 800a04a:	6923      	ldr	r3, [r4, #16]
 800a04c:	b94b      	cbnz	r3, 800a062 <__swsetup_r+0x9a>
 800a04e:	89a3      	ldrh	r3, [r4, #12]
 800a050:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a058:	d003      	beq.n	800a062 <__swsetup_r+0x9a>
 800a05a:	4621      	mov	r1, r4
 800a05c:	4630      	mov	r0, r6
 800a05e:	f000 fa07 	bl	800a470 <__smakebuf_r>
 800a062:	89a0      	ldrh	r0, [r4, #12]
 800a064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a068:	f010 0301 	ands.w	r3, r0, #1
 800a06c:	d00a      	beq.n	800a084 <__swsetup_r+0xbc>
 800a06e:	2300      	movs	r3, #0
 800a070:	60a3      	str	r3, [r4, #8]
 800a072:	6963      	ldr	r3, [r4, #20]
 800a074:	425b      	negs	r3, r3
 800a076:	61a3      	str	r3, [r4, #24]
 800a078:	6923      	ldr	r3, [r4, #16]
 800a07a:	b943      	cbnz	r3, 800a08e <__swsetup_r+0xc6>
 800a07c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a080:	d1ba      	bne.n	8009ff8 <__swsetup_r+0x30>
 800a082:	bd70      	pop	{r4, r5, r6, pc}
 800a084:	0781      	lsls	r1, r0, #30
 800a086:	bf58      	it	pl
 800a088:	6963      	ldrpl	r3, [r4, #20]
 800a08a:	60a3      	str	r3, [r4, #8]
 800a08c:	e7f4      	b.n	800a078 <__swsetup_r+0xb0>
 800a08e:	2000      	movs	r0, #0
 800a090:	e7f7      	b.n	800a082 <__swsetup_r+0xba>
 800a092:	bf00      	nop
 800a094:	2000001c 	.word	0x2000001c
 800a098:	0800ab8c 	.word	0x0800ab8c
 800a09c:	0800abac 	.word	0x0800abac
 800a0a0:	0800ab6c 	.word	0x0800ab6c

0800a0a4 <abort>:
 800a0a4:	b508      	push	{r3, lr}
 800a0a6:	2006      	movs	r0, #6
 800a0a8:	f000 fa52 	bl	800a550 <raise>
 800a0ac:	2001      	movs	r0, #1
 800a0ae:	f7f7 fbb7 	bl	8001820 <_exit>
	...

0800a0b4 <__sflush_r>:
 800a0b4:	898a      	ldrh	r2, [r1, #12]
 800a0b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ba:	4605      	mov	r5, r0
 800a0bc:	0710      	lsls	r0, r2, #28
 800a0be:	460c      	mov	r4, r1
 800a0c0:	d458      	bmi.n	800a174 <__sflush_r+0xc0>
 800a0c2:	684b      	ldr	r3, [r1, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	dc05      	bgt.n	800a0d4 <__sflush_r+0x20>
 800a0c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	dc02      	bgt.n	800a0d4 <__sflush_r+0x20>
 800a0ce:	2000      	movs	r0, #0
 800a0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0d6:	2e00      	cmp	r6, #0
 800a0d8:	d0f9      	beq.n	800a0ce <__sflush_r+0x1a>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0e0:	682f      	ldr	r7, [r5, #0]
 800a0e2:	602b      	str	r3, [r5, #0]
 800a0e4:	d032      	beq.n	800a14c <__sflush_r+0x98>
 800a0e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0e8:	89a3      	ldrh	r3, [r4, #12]
 800a0ea:	075a      	lsls	r2, r3, #29
 800a0ec:	d505      	bpl.n	800a0fa <__sflush_r+0x46>
 800a0ee:	6863      	ldr	r3, [r4, #4]
 800a0f0:	1ac0      	subs	r0, r0, r3
 800a0f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0f4:	b10b      	cbz	r3, 800a0fa <__sflush_r+0x46>
 800a0f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0f8:	1ac0      	subs	r0, r0, r3
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a100:	6a21      	ldr	r1, [r4, #32]
 800a102:	4628      	mov	r0, r5
 800a104:	47b0      	blx	r6
 800a106:	1c43      	adds	r3, r0, #1
 800a108:	89a3      	ldrh	r3, [r4, #12]
 800a10a:	d106      	bne.n	800a11a <__sflush_r+0x66>
 800a10c:	6829      	ldr	r1, [r5, #0]
 800a10e:	291d      	cmp	r1, #29
 800a110:	d82c      	bhi.n	800a16c <__sflush_r+0xb8>
 800a112:	4a2a      	ldr	r2, [pc, #168]	; (800a1bc <__sflush_r+0x108>)
 800a114:	40ca      	lsrs	r2, r1
 800a116:	07d6      	lsls	r6, r2, #31
 800a118:	d528      	bpl.n	800a16c <__sflush_r+0xb8>
 800a11a:	2200      	movs	r2, #0
 800a11c:	6062      	str	r2, [r4, #4]
 800a11e:	04d9      	lsls	r1, r3, #19
 800a120:	6922      	ldr	r2, [r4, #16]
 800a122:	6022      	str	r2, [r4, #0]
 800a124:	d504      	bpl.n	800a130 <__sflush_r+0x7c>
 800a126:	1c42      	adds	r2, r0, #1
 800a128:	d101      	bne.n	800a12e <__sflush_r+0x7a>
 800a12a:	682b      	ldr	r3, [r5, #0]
 800a12c:	b903      	cbnz	r3, 800a130 <__sflush_r+0x7c>
 800a12e:	6560      	str	r0, [r4, #84]	; 0x54
 800a130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a132:	602f      	str	r7, [r5, #0]
 800a134:	2900      	cmp	r1, #0
 800a136:	d0ca      	beq.n	800a0ce <__sflush_r+0x1a>
 800a138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a13c:	4299      	cmp	r1, r3
 800a13e:	d002      	beq.n	800a146 <__sflush_r+0x92>
 800a140:	4628      	mov	r0, r5
 800a142:	f7ff fadb 	bl	80096fc <_free_r>
 800a146:	2000      	movs	r0, #0
 800a148:	6360      	str	r0, [r4, #52]	; 0x34
 800a14a:	e7c1      	b.n	800a0d0 <__sflush_r+0x1c>
 800a14c:	6a21      	ldr	r1, [r4, #32]
 800a14e:	2301      	movs	r3, #1
 800a150:	4628      	mov	r0, r5
 800a152:	47b0      	blx	r6
 800a154:	1c41      	adds	r1, r0, #1
 800a156:	d1c7      	bne.n	800a0e8 <__sflush_r+0x34>
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0c4      	beq.n	800a0e8 <__sflush_r+0x34>
 800a15e:	2b1d      	cmp	r3, #29
 800a160:	d001      	beq.n	800a166 <__sflush_r+0xb2>
 800a162:	2b16      	cmp	r3, #22
 800a164:	d101      	bne.n	800a16a <__sflush_r+0xb6>
 800a166:	602f      	str	r7, [r5, #0]
 800a168:	e7b1      	b.n	800a0ce <__sflush_r+0x1a>
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a170:	81a3      	strh	r3, [r4, #12]
 800a172:	e7ad      	b.n	800a0d0 <__sflush_r+0x1c>
 800a174:	690f      	ldr	r7, [r1, #16]
 800a176:	2f00      	cmp	r7, #0
 800a178:	d0a9      	beq.n	800a0ce <__sflush_r+0x1a>
 800a17a:	0793      	lsls	r3, r2, #30
 800a17c:	680e      	ldr	r6, [r1, #0]
 800a17e:	bf08      	it	eq
 800a180:	694b      	ldreq	r3, [r1, #20]
 800a182:	600f      	str	r7, [r1, #0]
 800a184:	bf18      	it	ne
 800a186:	2300      	movne	r3, #0
 800a188:	eba6 0807 	sub.w	r8, r6, r7
 800a18c:	608b      	str	r3, [r1, #8]
 800a18e:	f1b8 0f00 	cmp.w	r8, #0
 800a192:	dd9c      	ble.n	800a0ce <__sflush_r+0x1a>
 800a194:	6a21      	ldr	r1, [r4, #32]
 800a196:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a198:	4643      	mov	r3, r8
 800a19a:	463a      	mov	r2, r7
 800a19c:	4628      	mov	r0, r5
 800a19e:	47b0      	blx	r6
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	dc06      	bgt.n	800a1b2 <__sflush_r+0xfe>
 800a1a4:	89a3      	ldrh	r3, [r4, #12]
 800a1a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1aa:	81a3      	strh	r3, [r4, #12]
 800a1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b0:	e78e      	b.n	800a0d0 <__sflush_r+0x1c>
 800a1b2:	4407      	add	r7, r0
 800a1b4:	eba8 0800 	sub.w	r8, r8, r0
 800a1b8:	e7e9      	b.n	800a18e <__sflush_r+0xda>
 800a1ba:	bf00      	nop
 800a1bc:	20400001 	.word	0x20400001

0800a1c0 <_fflush_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	690b      	ldr	r3, [r1, #16]
 800a1c4:	4605      	mov	r5, r0
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	b913      	cbnz	r3, 800a1d0 <_fflush_r+0x10>
 800a1ca:	2500      	movs	r5, #0
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	bd38      	pop	{r3, r4, r5, pc}
 800a1d0:	b118      	cbz	r0, 800a1da <_fflush_r+0x1a>
 800a1d2:	6983      	ldr	r3, [r0, #24]
 800a1d4:	b90b      	cbnz	r3, 800a1da <_fflush_r+0x1a>
 800a1d6:	f000 f887 	bl	800a2e8 <__sinit>
 800a1da:	4b14      	ldr	r3, [pc, #80]	; (800a22c <_fflush_r+0x6c>)
 800a1dc:	429c      	cmp	r4, r3
 800a1de:	d11b      	bne.n	800a218 <_fflush_r+0x58>
 800a1e0:	686c      	ldr	r4, [r5, #4]
 800a1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d0ef      	beq.n	800a1ca <_fflush_r+0xa>
 800a1ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1ec:	07d0      	lsls	r0, r2, #31
 800a1ee:	d404      	bmi.n	800a1fa <_fflush_r+0x3a>
 800a1f0:	0599      	lsls	r1, r3, #22
 800a1f2:	d402      	bmi.n	800a1fa <_fflush_r+0x3a>
 800a1f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1f6:	f000 f915 	bl	800a424 <__retarget_lock_acquire_recursive>
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	4621      	mov	r1, r4
 800a1fe:	f7ff ff59 	bl	800a0b4 <__sflush_r>
 800a202:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a204:	07da      	lsls	r2, r3, #31
 800a206:	4605      	mov	r5, r0
 800a208:	d4e0      	bmi.n	800a1cc <_fflush_r+0xc>
 800a20a:	89a3      	ldrh	r3, [r4, #12]
 800a20c:	059b      	lsls	r3, r3, #22
 800a20e:	d4dd      	bmi.n	800a1cc <_fflush_r+0xc>
 800a210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a212:	f000 f908 	bl	800a426 <__retarget_lock_release_recursive>
 800a216:	e7d9      	b.n	800a1cc <_fflush_r+0xc>
 800a218:	4b05      	ldr	r3, [pc, #20]	; (800a230 <_fflush_r+0x70>)
 800a21a:	429c      	cmp	r4, r3
 800a21c:	d101      	bne.n	800a222 <_fflush_r+0x62>
 800a21e:	68ac      	ldr	r4, [r5, #8]
 800a220:	e7df      	b.n	800a1e2 <_fflush_r+0x22>
 800a222:	4b04      	ldr	r3, [pc, #16]	; (800a234 <_fflush_r+0x74>)
 800a224:	429c      	cmp	r4, r3
 800a226:	bf08      	it	eq
 800a228:	68ec      	ldreq	r4, [r5, #12]
 800a22a:	e7da      	b.n	800a1e2 <_fflush_r+0x22>
 800a22c:	0800ab8c 	.word	0x0800ab8c
 800a230:	0800abac 	.word	0x0800abac
 800a234:	0800ab6c 	.word	0x0800ab6c

0800a238 <std>:
 800a238:	2300      	movs	r3, #0
 800a23a:	b510      	push	{r4, lr}
 800a23c:	4604      	mov	r4, r0
 800a23e:	e9c0 3300 	strd	r3, r3, [r0]
 800a242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a246:	6083      	str	r3, [r0, #8]
 800a248:	8181      	strh	r1, [r0, #12]
 800a24a:	6643      	str	r3, [r0, #100]	; 0x64
 800a24c:	81c2      	strh	r2, [r0, #14]
 800a24e:	6183      	str	r3, [r0, #24]
 800a250:	4619      	mov	r1, r3
 800a252:	2208      	movs	r2, #8
 800a254:	305c      	adds	r0, #92	; 0x5c
 800a256:	f7fb fee5 	bl	8006024 <memset>
 800a25a:	4b05      	ldr	r3, [pc, #20]	; (800a270 <std+0x38>)
 800a25c:	6263      	str	r3, [r4, #36]	; 0x24
 800a25e:	4b05      	ldr	r3, [pc, #20]	; (800a274 <std+0x3c>)
 800a260:	62a3      	str	r3, [r4, #40]	; 0x28
 800a262:	4b05      	ldr	r3, [pc, #20]	; (800a278 <std+0x40>)
 800a264:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a266:	4b05      	ldr	r3, [pc, #20]	; (800a27c <std+0x44>)
 800a268:	6224      	str	r4, [r4, #32]
 800a26a:	6323      	str	r3, [r4, #48]	; 0x30
 800a26c:	bd10      	pop	{r4, pc}
 800a26e:	bf00      	nop
 800a270:	0800a589 	.word	0x0800a589
 800a274:	0800a5ab 	.word	0x0800a5ab
 800a278:	0800a5e3 	.word	0x0800a5e3
 800a27c:	0800a607 	.word	0x0800a607

0800a280 <_cleanup_r>:
 800a280:	4901      	ldr	r1, [pc, #4]	; (800a288 <_cleanup_r+0x8>)
 800a282:	f000 b8af 	b.w	800a3e4 <_fwalk_reent>
 800a286:	bf00      	nop
 800a288:	0800a1c1 	.word	0x0800a1c1

0800a28c <__sfmoreglue>:
 800a28c:	b570      	push	{r4, r5, r6, lr}
 800a28e:	1e4a      	subs	r2, r1, #1
 800a290:	2568      	movs	r5, #104	; 0x68
 800a292:	4355      	muls	r5, r2
 800a294:	460e      	mov	r6, r1
 800a296:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a29a:	f7ff fa7f 	bl	800979c <_malloc_r>
 800a29e:	4604      	mov	r4, r0
 800a2a0:	b140      	cbz	r0, 800a2b4 <__sfmoreglue+0x28>
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	e9c0 1600 	strd	r1, r6, [r0]
 800a2a8:	300c      	adds	r0, #12
 800a2aa:	60a0      	str	r0, [r4, #8]
 800a2ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a2b0:	f7fb feb8 	bl	8006024 <memset>
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	bd70      	pop	{r4, r5, r6, pc}

0800a2b8 <__sfp_lock_acquire>:
 800a2b8:	4801      	ldr	r0, [pc, #4]	; (800a2c0 <__sfp_lock_acquire+0x8>)
 800a2ba:	f000 b8b3 	b.w	800a424 <__retarget_lock_acquire_recursive>
 800a2be:	bf00      	nop
 800a2c0:	20000ba8 	.word	0x20000ba8

0800a2c4 <__sfp_lock_release>:
 800a2c4:	4801      	ldr	r0, [pc, #4]	; (800a2cc <__sfp_lock_release+0x8>)
 800a2c6:	f000 b8ae 	b.w	800a426 <__retarget_lock_release_recursive>
 800a2ca:	bf00      	nop
 800a2cc:	20000ba8 	.word	0x20000ba8

0800a2d0 <__sinit_lock_acquire>:
 800a2d0:	4801      	ldr	r0, [pc, #4]	; (800a2d8 <__sinit_lock_acquire+0x8>)
 800a2d2:	f000 b8a7 	b.w	800a424 <__retarget_lock_acquire_recursive>
 800a2d6:	bf00      	nop
 800a2d8:	20000ba3 	.word	0x20000ba3

0800a2dc <__sinit_lock_release>:
 800a2dc:	4801      	ldr	r0, [pc, #4]	; (800a2e4 <__sinit_lock_release+0x8>)
 800a2de:	f000 b8a2 	b.w	800a426 <__retarget_lock_release_recursive>
 800a2e2:	bf00      	nop
 800a2e4:	20000ba3 	.word	0x20000ba3

0800a2e8 <__sinit>:
 800a2e8:	b510      	push	{r4, lr}
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	f7ff fff0 	bl	800a2d0 <__sinit_lock_acquire>
 800a2f0:	69a3      	ldr	r3, [r4, #24]
 800a2f2:	b11b      	cbz	r3, 800a2fc <__sinit+0x14>
 800a2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2f8:	f7ff bff0 	b.w	800a2dc <__sinit_lock_release>
 800a2fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a300:	6523      	str	r3, [r4, #80]	; 0x50
 800a302:	4b13      	ldr	r3, [pc, #76]	; (800a350 <__sinit+0x68>)
 800a304:	4a13      	ldr	r2, [pc, #76]	; (800a354 <__sinit+0x6c>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	62a2      	str	r2, [r4, #40]	; 0x28
 800a30a:	42a3      	cmp	r3, r4
 800a30c:	bf04      	itt	eq
 800a30e:	2301      	moveq	r3, #1
 800a310:	61a3      	streq	r3, [r4, #24]
 800a312:	4620      	mov	r0, r4
 800a314:	f000 f820 	bl	800a358 <__sfp>
 800a318:	6060      	str	r0, [r4, #4]
 800a31a:	4620      	mov	r0, r4
 800a31c:	f000 f81c 	bl	800a358 <__sfp>
 800a320:	60a0      	str	r0, [r4, #8]
 800a322:	4620      	mov	r0, r4
 800a324:	f000 f818 	bl	800a358 <__sfp>
 800a328:	2200      	movs	r2, #0
 800a32a:	60e0      	str	r0, [r4, #12]
 800a32c:	2104      	movs	r1, #4
 800a32e:	6860      	ldr	r0, [r4, #4]
 800a330:	f7ff ff82 	bl	800a238 <std>
 800a334:	68a0      	ldr	r0, [r4, #8]
 800a336:	2201      	movs	r2, #1
 800a338:	2109      	movs	r1, #9
 800a33a:	f7ff ff7d 	bl	800a238 <std>
 800a33e:	68e0      	ldr	r0, [r4, #12]
 800a340:	2202      	movs	r2, #2
 800a342:	2112      	movs	r1, #18
 800a344:	f7ff ff78 	bl	800a238 <std>
 800a348:	2301      	movs	r3, #1
 800a34a:	61a3      	str	r3, [r4, #24]
 800a34c:	e7d2      	b.n	800a2f4 <__sinit+0xc>
 800a34e:	bf00      	nop
 800a350:	0800a718 	.word	0x0800a718
 800a354:	0800a281 	.word	0x0800a281

0800a358 <__sfp>:
 800a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35a:	4607      	mov	r7, r0
 800a35c:	f7ff ffac 	bl	800a2b8 <__sfp_lock_acquire>
 800a360:	4b1e      	ldr	r3, [pc, #120]	; (800a3dc <__sfp+0x84>)
 800a362:	681e      	ldr	r6, [r3, #0]
 800a364:	69b3      	ldr	r3, [r6, #24]
 800a366:	b913      	cbnz	r3, 800a36e <__sfp+0x16>
 800a368:	4630      	mov	r0, r6
 800a36a:	f7ff ffbd 	bl	800a2e8 <__sinit>
 800a36e:	3648      	adds	r6, #72	; 0x48
 800a370:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a374:	3b01      	subs	r3, #1
 800a376:	d503      	bpl.n	800a380 <__sfp+0x28>
 800a378:	6833      	ldr	r3, [r6, #0]
 800a37a:	b30b      	cbz	r3, 800a3c0 <__sfp+0x68>
 800a37c:	6836      	ldr	r6, [r6, #0]
 800a37e:	e7f7      	b.n	800a370 <__sfp+0x18>
 800a380:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a384:	b9d5      	cbnz	r5, 800a3bc <__sfp+0x64>
 800a386:	4b16      	ldr	r3, [pc, #88]	; (800a3e0 <__sfp+0x88>)
 800a388:	60e3      	str	r3, [r4, #12]
 800a38a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a38e:	6665      	str	r5, [r4, #100]	; 0x64
 800a390:	f000 f847 	bl	800a422 <__retarget_lock_init_recursive>
 800a394:	f7ff ff96 	bl	800a2c4 <__sfp_lock_release>
 800a398:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a39c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a3a0:	6025      	str	r5, [r4, #0]
 800a3a2:	61a5      	str	r5, [r4, #24]
 800a3a4:	2208      	movs	r2, #8
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a3ac:	f7fb fe3a 	bl	8006024 <memset>
 800a3b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a3b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3bc:	3468      	adds	r4, #104	; 0x68
 800a3be:	e7d9      	b.n	800a374 <__sfp+0x1c>
 800a3c0:	2104      	movs	r1, #4
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	f7ff ff62 	bl	800a28c <__sfmoreglue>
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	6030      	str	r0, [r6, #0]
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d1d5      	bne.n	800a37c <__sfp+0x24>
 800a3d0:	f7ff ff78 	bl	800a2c4 <__sfp_lock_release>
 800a3d4:	230c      	movs	r3, #12
 800a3d6:	603b      	str	r3, [r7, #0]
 800a3d8:	e7ee      	b.n	800a3b8 <__sfp+0x60>
 800a3da:	bf00      	nop
 800a3dc:	0800a718 	.word	0x0800a718
 800a3e0:	ffff0001 	.word	0xffff0001

0800a3e4 <_fwalk_reent>:
 800a3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	4688      	mov	r8, r1
 800a3ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3f0:	2700      	movs	r7, #0
 800a3f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3f6:	f1b9 0901 	subs.w	r9, r9, #1
 800a3fa:	d505      	bpl.n	800a408 <_fwalk_reent+0x24>
 800a3fc:	6824      	ldr	r4, [r4, #0]
 800a3fe:	2c00      	cmp	r4, #0
 800a400:	d1f7      	bne.n	800a3f2 <_fwalk_reent+0xe>
 800a402:	4638      	mov	r0, r7
 800a404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a408:	89ab      	ldrh	r3, [r5, #12]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d907      	bls.n	800a41e <_fwalk_reent+0x3a>
 800a40e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a412:	3301      	adds	r3, #1
 800a414:	d003      	beq.n	800a41e <_fwalk_reent+0x3a>
 800a416:	4629      	mov	r1, r5
 800a418:	4630      	mov	r0, r6
 800a41a:	47c0      	blx	r8
 800a41c:	4307      	orrs	r7, r0
 800a41e:	3568      	adds	r5, #104	; 0x68
 800a420:	e7e9      	b.n	800a3f6 <_fwalk_reent+0x12>

0800a422 <__retarget_lock_init_recursive>:
 800a422:	4770      	bx	lr

0800a424 <__retarget_lock_acquire_recursive>:
 800a424:	4770      	bx	lr

0800a426 <__retarget_lock_release_recursive>:
 800a426:	4770      	bx	lr

0800a428 <__swhatbuf_r>:
 800a428:	b570      	push	{r4, r5, r6, lr}
 800a42a:	460e      	mov	r6, r1
 800a42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a430:	2900      	cmp	r1, #0
 800a432:	b096      	sub	sp, #88	; 0x58
 800a434:	4614      	mov	r4, r2
 800a436:	461d      	mov	r5, r3
 800a438:	da07      	bge.n	800a44a <__swhatbuf_r+0x22>
 800a43a:	2300      	movs	r3, #0
 800a43c:	602b      	str	r3, [r5, #0]
 800a43e:	89b3      	ldrh	r3, [r6, #12]
 800a440:	061a      	lsls	r2, r3, #24
 800a442:	d410      	bmi.n	800a466 <__swhatbuf_r+0x3e>
 800a444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a448:	e00e      	b.n	800a468 <__swhatbuf_r+0x40>
 800a44a:	466a      	mov	r2, sp
 800a44c:	f000 f902 	bl	800a654 <_fstat_r>
 800a450:	2800      	cmp	r0, #0
 800a452:	dbf2      	blt.n	800a43a <__swhatbuf_r+0x12>
 800a454:	9a01      	ldr	r2, [sp, #4]
 800a456:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a45a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a45e:	425a      	negs	r2, r3
 800a460:	415a      	adcs	r2, r3
 800a462:	602a      	str	r2, [r5, #0]
 800a464:	e7ee      	b.n	800a444 <__swhatbuf_r+0x1c>
 800a466:	2340      	movs	r3, #64	; 0x40
 800a468:	2000      	movs	r0, #0
 800a46a:	6023      	str	r3, [r4, #0]
 800a46c:	b016      	add	sp, #88	; 0x58
 800a46e:	bd70      	pop	{r4, r5, r6, pc}

0800a470 <__smakebuf_r>:
 800a470:	898b      	ldrh	r3, [r1, #12]
 800a472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a474:	079d      	lsls	r5, r3, #30
 800a476:	4606      	mov	r6, r0
 800a478:	460c      	mov	r4, r1
 800a47a:	d507      	bpl.n	800a48c <__smakebuf_r+0x1c>
 800a47c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a480:	6023      	str	r3, [r4, #0]
 800a482:	6123      	str	r3, [r4, #16]
 800a484:	2301      	movs	r3, #1
 800a486:	6163      	str	r3, [r4, #20]
 800a488:	b002      	add	sp, #8
 800a48a:	bd70      	pop	{r4, r5, r6, pc}
 800a48c:	ab01      	add	r3, sp, #4
 800a48e:	466a      	mov	r2, sp
 800a490:	f7ff ffca 	bl	800a428 <__swhatbuf_r>
 800a494:	9900      	ldr	r1, [sp, #0]
 800a496:	4605      	mov	r5, r0
 800a498:	4630      	mov	r0, r6
 800a49a:	f7ff f97f 	bl	800979c <_malloc_r>
 800a49e:	b948      	cbnz	r0, 800a4b4 <__smakebuf_r+0x44>
 800a4a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a4:	059a      	lsls	r2, r3, #22
 800a4a6:	d4ef      	bmi.n	800a488 <__smakebuf_r+0x18>
 800a4a8:	f023 0303 	bic.w	r3, r3, #3
 800a4ac:	f043 0302 	orr.w	r3, r3, #2
 800a4b0:	81a3      	strh	r3, [r4, #12]
 800a4b2:	e7e3      	b.n	800a47c <__smakebuf_r+0xc>
 800a4b4:	4b0d      	ldr	r3, [pc, #52]	; (800a4ec <__smakebuf_r+0x7c>)
 800a4b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	6020      	str	r0, [r4, #0]
 800a4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4c0:	81a3      	strh	r3, [r4, #12]
 800a4c2:	9b00      	ldr	r3, [sp, #0]
 800a4c4:	6163      	str	r3, [r4, #20]
 800a4c6:	9b01      	ldr	r3, [sp, #4]
 800a4c8:	6120      	str	r0, [r4, #16]
 800a4ca:	b15b      	cbz	r3, 800a4e4 <__smakebuf_r+0x74>
 800a4cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f000 f8d1 	bl	800a678 <_isatty_r>
 800a4d6:	b128      	cbz	r0, 800a4e4 <__smakebuf_r+0x74>
 800a4d8:	89a3      	ldrh	r3, [r4, #12]
 800a4da:	f023 0303 	bic.w	r3, r3, #3
 800a4de:	f043 0301 	orr.w	r3, r3, #1
 800a4e2:	81a3      	strh	r3, [r4, #12]
 800a4e4:	89a0      	ldrh	r0, [r4, #12]
 800a4e6:	4305      	orrs	r5, r0
 800a4e8:	81a5      	strh	r5, [r4, #12]
 800a4ea:	e7cd      	b.n	800a488 <__smakebuf_r+0x18>
 800a4ec:	0800a281 	.word	0x0800a281

0800a4f0 <_malloc_usable_size_r>:
 800a4f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4f4:	1f18      	subs	r0, r3, #4
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	bfbc      	itt	lt
 800a4fa:	580b      	ldrlt	r3, [r1, r0]
 800a4fc:	18c0      	addlt	r0, r0, r3
 800a4fe:	4770      	bx	lr

0800a500 <_raise_r>:
 800a500:	291f      	cmp	r1, #31
 800a502:	b538      	push	{r3, r4, r5, lr}
 800a504:	4604      	mov	r4, r0
 800a506:	460d      	mov	r5, r1
 800a508:	d904      	bls.n	800a514 <_raise_r+0x14>
 800a50a:	2316      	movs	r3, #22
 800a50c:	6003      	str	r3, [r0, #0]
 800a50e:	f04f 30ff 	mov.w	r0, #4294967295
 800a512:	bd38      	pop	{r3, r4, r5, pc}
 800a514:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a516:	b112      	cbz	r2, 800a51e <_raise_r+0x1e>
 800a518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a51c:	b94b      	cbnz	r3, 800a532 <_raise_r+0x32>
 800a51e:	4620      	mov	r0, r4
 800a520:	f000 f830 	bl	800a584 <_getpid_r>
 800a524:	462a      	mov	r2, r5
 800a526:	4601      	mov	r1, r0
 800a528:	4620      	mov	r0, r4
 800a52a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a52e:	f000 b817 	b.w	800a560 <_kill_r>
 800a532:	2b01      	cmp	r3, #1
 800a534:	d00a      	beq.n	800a54c <_raise_r+0x4c>
 800a536:	1c59      	adds	r1, r3, #1
 800a538:	d103      	bne.n	800a542 <_raise_r+0x42>
 800a53a:	2316      	movs	r3, #22
 800a53c:	6003      	str	r3, [r0, #0]
 800a53e:	2001      	movs	r0, #1
 800a540:	e7e7      	b.n	800a512 <_raise_r+0x12>
 800a542:	2400      	movs	r4, #0
 800a544:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a548:	4628      	mov	r0, r5
 800a54a:	4798      	blx	r3
 800a54c:	2000      	movs	r0, #0
 800a54e:	e7e0      	b.n	800a512 <_raise_r+0x12>

0800a550 <raise>:
 800a550:	4b02      	ldr	r3, [pc, #8]	; (800a55c <raise+0xc>)
 800a552:	4601      	mov	r1, r0
 800a554:	6818      	ldr	r0, [r3, #0]
 800a556:	f7ff bfd3 	b.w	800a500 <_raise_r>
 800a55a:	bf00      	nop
 800a55c:	2000001c 	.word	0x2000001c

0800a560 <_kill_r>:
 800a560:	b538      	push	{r3, r4, r5, lr}
 800a562:	4d07      	ldr	r5, [pc, #28]	; (800a580 <_kill_r+0x20>)
 800a564:	2300      	movs	r3, #0
 800a566:	4604      	mov	r4, r0
 800a568:	4608      	mov	r0, r1
 800a56a:	4611      	mov	r1, r2
 800a56c:	602b      	str	r3, [r5, #0]
 800a56e:	f7f7 f947 	bl	8001800 <_kill>
 800a572:	1c43      	adds	r3, r0, #1
 800a574:	d102      	bne.n	800a57c <_kill_r+0x1c>
 800a576:	682b      	ldr	r3, [r5, #0]
 800a578:	b103      	cbz	r3, 800a57c <_kill_r+0x1c>
 800a57a:	6023      	str	r3, [r4, #0]
 800a57c:	bd38      	pop	{r3, r4, r5, pc}
 800a57e:	bf00      	nop
 800a580:	20000b9c 	.word	0x20000b9c

0800a584 <_getpid_r>:
 800a584:	f7f7 b934 	b.w	80017f0 <_getpid>

0800a588 <__sread>:
 800a588:	b510      	push	{r4, lr}
 800a58a:	460c      	mov	r4, r1
 800a58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a590:	f000 f894 	bl	800a6bc <_read_r>
 800a594:	2800      	cmp	r0, #0
 800a596:	bfab      	itete	ge
 800a598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a59a:	89a3      	ldrhlt	r3, [r4, #12]
 800a59c:	181b      	addge	r3, r3, r0
 800a59e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5a2:	bfac      	ite	ge
 800a5a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5a6:	81a3      	strhlt	r3, [r4, #12]
 800a5a8:	bd10      	pop	{r4, pc}

0800a5aa <__swrite>:
 800a5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ae:	461f      	mov	r7, r3
 800a5b0:	898b      	ldrh	r3, [r1, #12]
 800a5b2:	05db      	lsls	r3, r3, #23
 800a5b4:	4605      	mov	r5, r0
 800a5b6:	460c      	mov	r4, r1
 800a5b8:	4616      	mov	r6, r2
 800a5ba:	d505      	bpl.n	800a5c8 <__swrite+0x1e>
 800a5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f000 f868 	bl	800a698 <_lseek_r>
 800a5c8:	89a3      	ldrh	r3, [r4, #12]
 800a5ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5d2:	81a3      	strh	r3, [r4, #12]
 800a5d4:	4632      	mov	r2, r6
 800a5d6:	463b      	mov	r3, r7
 800a5d8:	4628      	mov	r0, r5
 800a5da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5de:	f000 b817 	b.w	800a610 <_write_r>

0800a5e2 <__sseek>:
 800a5e2:	b510      	push	{r4, lr}
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ea:	f000 f855 	bl	800a698 <_lseek_r>
 800a5ee:	1c43      	adds	r3, r0, #1
 800a5f0:	89a3      	ldrh	r3, [r4, #12]
 800a5f2:	bf15      	itete	ne
 800a5f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5fe:	81a3      	strheq	r3, [r4, #12]
 800a600:	bf18      	it	ne
 800a602:	81a3      	strhne	r3, [r4, #12]
 800a604:	bd10      	pop	{r4, pc}

0800a606 <__sclose>:
 800a606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60a:	f000 b813 	b.w	800a634 <_close_r>
	...

0800a610 <_write_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4d07      	ldr	r5, [pc, #28]	; (800a630 <_write_r+0x20>)
 800a614:	4604      	mov	r4, r0
 800a616:	4608      	mov	r0, r1
 800a618:	4611      	mov	r1, r2
 800a61a:	2200      	movs	r2, #0
 800a61c:	602a      	str	r2, [r5, #0]
 800a61e:	461a      	mov	r2, r3
 800a620:	f7f7 f925 	bl	800186e <_write>
 800a624:	1c43      	adds	r3, r0, #1
 800a626:	d102      	bne.n	800a62e <_write_r+0x1e>
 800a628:	682b      	ldr	r3, [r5, #0]
 800a62a:	b103      	cbz	r3, 800a62e <_write_r+0x1e>
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	bd38      	pop	{r3, r4, r5, pc}
 800a630:	20000b9c 	.word	0x20000b9c

0800a634 <_close_r>:
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	4d06      	ldr	r5, [pc, #24]	; (800a650 <_close_r+0x1c>)
 800a638:	2300      	movs	r3, #0
 800a63a:	4604      	mov	r4, r0
 800a63c:	4608      	mov	r0, r1
 800a63e:	602b      	str	r3, [r5, #0]
 800a640:	f7f7 f931 	bl	80018a6 <_close>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d102      	bne.n	800a64e <_close_r+0x1a>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	b103      	cbz	r3, 800a64e <_close_r+0x1a>
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	20000b9c 	.word	0x20000b9c

0800a654 <_fstat_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	4d07      	ldr	r5, [pc, #28]	; (800a674 <_fstat_r+0x20>)
 800a658:	2300      	movs	r3, #0
 800a65a:	4604      	mov	r4, r0
 800a65c:	4608      	mov	r0, r1
 800a65e:	4611      	mov	r1, r2
 800a660:	602b      	str	r3, [r5, #0]
 800a662:	f7f7 f92c 	bl	80018be <_fstat>
 800a666:	1c43      	adds	r3, r0, #1
 800a668:	d102      	bne.n	800a670 <_fstat_r+0x1c>
 800a66a:	682b      	ldr	r3, [r5, #0]
 800a66c:	b103      	cbz	r3, 800a670 <_fstat_r+0x1c>
 800a66e:	6023      	str	r3, [r4, #0]
 800a670:	bd38      	pop	{r3, r4, r5, pc}
 800a672:	bf00      	nop
 800a674:	20000b9c 	.word	0x20000b9c

0800a678 <_isatty_r>:
 800a678:	b538      	push	{r3, r4, r5, lr}
 800a67a:	4d06      	ldr	r5, [pc, #24]	; (800a694 <_isatty_r+0x1c>)
 800a67c:	2300      	movs	r3, #0
 800a67e:	4604      	mov	r4, r0
 800a680:	4608      	mov	r0, r1
 800a682:	602b      	str	r3, [r5, #0]
 800a684:	f7f7 f92b 	bl	80018de <_isatty>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	d102      	bne.n	800a692 <_isatty_r+0x1a>
 800a68c:	682b      	ldr	r3, [r5, #0]
 800a68e:	b103      	cbz	r3, 800a692 <_isatty_r+0x1a>
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	bd38      	pop	{r3, r4, r5, pc}
 800a694:	20000b9c 	.word	0x20000b9c

0800a698 <_lseek_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4d07      	ldr	r5, [pc, #28]	; (800a6b8 <_lseek_r+0x20>)
 800a69c:	4604      	mov	r4, r0
 800a69e:	4608      	mov	r0, r1
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	602a      	str	r2, [r5, #0]
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f7f7 f924 	bl	80018f4 <_lseek>
 800a6ac:	1c43      	adds	r3, r0, #1
 800a6ae:	d102      	bne.n	800a6b6 <_lseek_r+0x1e>
 800a6b0:	682b      	ldr	r3, [r5, #0]
 800a6b2:	b103      	cbz	r3, 800a6b6 <_lseek_r+0x1e>
 800a6b4:	6023      	str	r3, [r4, #0]
 800a6b6:	bd38      	pop	{r3, r4, r5, pc}
 800a6b8:	20000b9c 	.word	0x20000b9c

0800a6bc <_read_r>:
 800a6bc:	b538      	push	{r3, r4, r5, lr}
 800a6be:	4d07      	ldr	r5, [pc, #28]	; (800a6dc <_read_r+0x20>)
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	4608      	mov	r0, r1
 800a6c4:	4611      	mov	r1, r2
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	602a      	str	r2, [r5, #0]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f7f7 f8b2 	bl	8001834 <_read>
 800a6d0:	1c43      	adds	r3, r0, #1
 800a6d2:	d102      	bne.n	800a6da <_read_r+0x1e>
 800a6d4:	682b      	ldr	r3, [r5, #0]
 800a6d6:	b103      	cbz	r3, 800a6da <_read_r+0x1e>
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
 800a6dc:	20000b9c 	.word	0x20000b9c

0800a6e0 <_init>:
 800a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e2:	bf00      	nop
 800a6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e6:	bc08      	pop	{r3}
 800a6e8:	469e      	mov	lr, r3
 800a6ea:	4770      	bx	lr

0800a6ec <_fini>:
 800a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ee:	bf00      	nop
 800a6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6f2:	bc08      	pop	{r3}
 800a6f4:	469e      	mov	lr, r3
 800a6f6:	4770      	bx	lr
